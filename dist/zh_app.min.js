!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("mainVue",[],e):"object"==typeof exports?exports.mainVue=e():t.mainVue=e()}(window,function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){n(1),n(2),n(3),n(4),n(5),n(6),n(7);var o=n(8);t.exports=o},function(t,e){!function(t){function e(t,e){return(e?window[t][e]?/{|}|%7B|%7D|\[|\]|%5B|%5D/.test(window[t][e])?JSON.parse(unescape(window[t][e])):unescape(window[t][e]):void 0:window[t])||!1}function n(t,e,n){return"string"==typeof e?window[t][e]="object"==typeof n?escape(JSON.stringify(n)):escape(n):"object"==typeof e&&Object.keys(e).forEach(function(o){window[t][o]="object"==typeof n?escape(JSON.stringify(e[o])):escape(e[o])}),window[t]}t.IsNullOrEmpty=function(t){return null==t||null==t||""==t},t.inAttr=function(t){return!0===t||"true"===t||""===t},t.enpty_obj=function(t){return Object.keys(t).map(function(e){t[e]=null}),t},t.IsNumber=function(t){return isNaN(t)?0:t},t.clone=function(t){if(null==t||"object"!=typeof t)return t;if(t instanceof Date)return(e=new Date).setTime(t.getTime()),e;if(t instanceof Array){for(var e=[],n=0,o=t.length;n<o;++n)e[n]=clone(t[n]);return e}if(t instanceof Object){e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=clone(t[r]));return e}throw new Error("Unable to copy obj! Its type isn't supported.")},t.arrBuildTree=function(t,e,n){var o=[];return t.forEach(function(t){t.children=[]}),t.forEach(function(r){if(0!==r[e]&&"0"!==r[e]){var i=r;t.forEach(function(t){t[n]==i[e]&&t.children.push(i)})}else o.push(r)}),t.forEach(function(t){0==t.children.length&&delete t.children}),o},t.treeBreakArr=function(t,e){var n=[],o=0;e=e||"children";function r(t,i){var a=i+1;o=o>i?o:i,t.forEach(function(t){n.push(t),Array.isArray(t[e])&&t[e].length>0&&r(t[e],a)})}if("object"==typeof t&&Array.isArray(t))r(t,1);else if("object"==typeof t&&!Array.isArray(t)){var i=[];i.push(t),r(i,1)}return{array:n,depth:o}},t.getSearch=function(t){var e=[];try{e=window.location.search.split("?")[1].split("&")}catch(t){}var n={};return e.forEach(function(t){n[t.split("=")[0]]=t.split("=")[1]}),t?/%u/.test(n[t])?unescape(n[t]):n[t]:n},t.toSearch=function(e,n){var o="?";if("object"==typeof e&&Array.isArray(e))e.forEach(function(e,n){o+="["+n+"]="+t.toSearch(e,!0)+"&"});else{if("object"!=typeof e)return e;Object.keys(e).forEach(function(n){if("object"==typeof e[n]&&Array.isArray(e[n]))e[n].forEach(function(e,r){o+=n+"["+r+"]="+t.toSearch(e,!0)+"&"});else if("object"==typeof e[n]&&null!=e[n])o+=t.toSearch(e[n],!0)+"&";else{var r=/[\u3220-\uFA29]/.test(e[n])?escape(e[n]):e[n];o+=n+"="+(r||"")+"&"}})}return n?o.slice(1,-1):o.slice(0,-1)},t.setHash=function(t,e,n){var o=[];try{o=window.location.hash.split("#")[1].split("&")}catch(t){}var r={};$(o).each(function(){r[this.split("=")[0]]=this.split("=")[1]}),"string"==typeof t?(n=n||function(){},r[t]=e):"object"==typeof t&&(n=e||function(){},Object.keys(t).forEach(function(e){r[e]=t[e]}));var i="#";for(tkey in r)i+=tkey+"="+r[tkey]+"&";window.location.hash?window.location.replace(window.location.href.replace(window.location.hash,i.slice(0,-1))):window.location.replace(window.location.href+i.slice(0,-1)),n()},t.getHash=function(t){var e=[];try{e=window.location.hash.split("#")[1].split("&")}catch(t){}var n={};return e.forEach(function(t){n[t.split("=")[0]]=t.split("=")[1]}),t?n[t]:n},t.getLocal=function(t){return e("localStorage",t)},t.setLocal=function(t,e){return n("localStorage",t,e)},t.getSession=function(t){return e("sessionStorage",t)},t.setSession=function(t,e){return n("sessionStorage",t,e)},t.setRandomId=function(t){var e=this.$refs[t],n=t+"-"+(1e5*Math.random()+"").slice(0,5);return e.setAttribute("id",n),n},t.sortorder=function(t){try{if(t.indexOf("asc")>-1)return"asc";if(t.indexOf("desc")>-1)return"desc"}catch(e){return t}},t.GetGuid=function(){var t="";return $.ajaxSetup({async:!1}),this.$get(sysUrl+"/sysfile/getguid",{},function(e,n){t=e}),$.ajaxSetup({async:!0}),t},t.getObjByValue=function(t){var e=null,n=t.arr,o=t.target,r=t.key||"key",i=t.value||"value",a=t.mapkey||r,c=t.mapvalue||i,u=t.add||!1,s={};return"string"==typeof t.target?(n.forEach(function(t){s[escape(t[i])]=t}),e={},u&&(e=clone(s[escape(o)])),e[a]=s[escape(o)][r],e[c]=o):"object"==typeof t.target&&Array.isArray(t.target)&&(e=[],n.forEach(function(t){s[escape(t[i])]=t}),o.forEach(function(t){e.push(s[escape(t)])})),e},t.timeToDate=function(t){return/ /.test(t)?t.split(" ")[0]:t},t.getRandom=function(t){return(Math.random()+"").slice(2,t+2)},t.getTimeStrmp=function(){return(new Date).getTime()},t.floatToPercent=function(t,e,n){var o=100*Number(t);return o>100&&n&&(o=100),o.toFixed(e)+"%"},t.wxPay=function(t,e,n){WeixinJSBridge.invoke("getBrandWCPayRequest",{appId:t.appId,timeStamp:t.timeStamp,nonceStr:t.nonceStr,package:t.package,signType:"MD5",paySign:t.paySign},function(t){"get_brand_wcpay_request:ok"==t.err_msg?(alert("支付成功"),e&&e()):"get_brand_wcpay_request:fail"==t.err_msg?(alert("支付失败，请重试"),n&&n()):"get_brand_wcpay_request:cancel"==t.err_msg?(alert("用户取消支付"),n&&n()):(alert(t.err_msg),n&&n())})},t.downloader=function(t){var e=document.createElement("a");if("download"in e)return e.setAttribute("download",t),e.setAttribute("href",t),e.innerHTML="downloading",document.body.appendChild(e),setTimeout(function(){e.click(),document.body.removeChild(e)},1e3/24),!0;try{var n=document.createElement("iframe");return n.style.display="none",document.body.appendChild(n),n.src=t,setTimeout(function(){document.body.removeChild(n)},333),!0}catch(e){var o=document.createElement("form");return o.setAttribute("method","get"),o.setAttribute("action",t),document.body.appendChild(o),setTimeout(function(){o.submit(),document.body.removeChild(o)},1e3/24),!0}return window.open(url)||confirm("请使用右键-另存为进行下载，完成后点击后退返回当前页面")&&(location.href=url),!0},t.imgToBase64=function(t,e,n){var o=document.createElement("CANVAS"),r=o.getContext("2d"),i=new Image;i.crossOrigin="Anonymous",i.onload=function(){o.height=i.height,o.width=i.width,r.drawImage(i,0,0);var t=o.toDataURL(n||"image/png");e.call(this,t),o=null},i.src=t},t.inheritPrototype=function(t,e){var n=Object.create(e.prototype);n.constructor=t,t.prototype=n},t.loadScript=function(t){if(!t)throw new Error("请指定要加载的js文件路径");var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=t;var n=document.getElementsByTagName("script")[0];return n.parentNode.insertBefore(e,n),!0},t.Arabia_to_Chinese=function(t){var e=["角","分"],n=["零","壹","贰","叁","肆","伍","陆","柒","捌","玖"],o=[["元","万","亿"],["","拾","佰","仟"]],r=t<0?"欠":"";t=Math.abs(t);for(var i="",a=0;a<e.length;a++)i+=(n[Math.floor(10*t*Math.pow(10,a))%10]+e[a]).replace(/零./,"");i=i||"整",t=Math.floor(t);for(a=0;a<o[0].length&&t>0;a++){for(var c="",u=0;u<o[1].length&&t>0;u++)c=n[t%10]+o[1][u]+c,t=Math.floor(t/10);i=c.replace(/(零.)*零$/,"").replace(/^$/,"零")+o[0][a]+i}return r+i.replace(/(零.)*零元/,"元").replace(/(零.)+/g,"零").replace(/^整$/,"零元整")},t.mixin=function(t,e,n){return Object.keys(t).forEach(function(o){n?e[o]=t[o]:e[o]||(e[o]=t[o])}),e}}(window)},function(t,e){window.Chain=function(){this.chain_arr=[]},window.Chain.prototype={link:function(t){return"function"==typeof t&&this.chain_arr.push(t),this},run:function(t){var e=this,n=0,o=(t=t,function(){var r=e.chain_arr[n];if(n++,r)return r(t,o)});o()}}},function(t,e){Hasher=function(t){this.Init(t)},Hasher.prototype={$data:{},$watch:{},Init:function(t){var e=this;this.$watch=t.watch;var n=t.data||{};if(this.$data=mixin(this.getHash(),n,!0),this.initListener(this.$data),!("onhashchange"in window&&(void 0===document.documentMode||document.documentMode>=8)))throw new Error("您的浏览器不支持hash监听事件");window.onhashchange=function(t){var n=e.hashWatcher(t);e.initListener(n.add),e.updateData(n.update);var o={};n.del.forEach(function(t){o[t]=""}),e.updateData(o)},t.mounted&&t.mounted.call(this)},push:function(t,e){var n=this.crearNewHref(t,e);return window.location.href=n,n},replace:function(t,e){var n=this.crearNewHref(t,e);return window.location.replace(n),n},toHash:function(t,e,n){var o=this.getHash();"string"==typeof t?(n=n||function(){},o[t]=e):"object"==typeof t&&(n=e||function(){},Object.keys(t).forEach(function(e){o[e]=t[e]}));var r="#";for(tkey in o)"$path"==tkey?r+=o[tkey]+"&":r+=tkey+"="+o[tkey]+"&";return r.slice(0,-1)},crearNewHref:function(t,e){var n=this.toHash(t,e),o=window.location.href;return window.location.hash?o.replace(window.location.hash,n):o+n},getHash:function(){var t=[];try{t=window.location.hash.split("#")[1].split("&")}catch(t){}var e={};return t.forEach(function(t){/=/.test(t)?e[t.split("=")[0]]=t.split("=")[1]:e.$path=t}),e},hashWatcher:function(t){var e=this,n=this.getHash(),o={},r={},i=[];return Object.keys(n).forEach(function(t){void 0===e.$data[t]&&void 0!==n[t]?r[t]=n[t]:e.$data[t]!=n[t]&&(o[t]={old:e.$data[t],new:n[t]})}),Object.keys(this.$data).forEach(function(t){void 0!==e.$data[t]&&void 0===n[t]&&i.push(t)}),{update:o,add:r,del:i}},initListener:function(t){var e=this;Object.keys(t).forEach(function(t){Object.defineProperty(e,t,{get:function(){return e.$data[t]},set:function(n){var o=e.$data[t];e.$data[t]=n,e.$watch[t]&&e.$watch[t](n,o)}})})},updateData:function(t){var e=this;Object.keys(t).forEach(function(n){e[n]=t[n].new})}}},function(t,e){ShadeBox=function(t){this.init(t)},ShadeBox.prototype={el:null,animate:300,lock:!1,init:function(t){var e=document.body,n=document.createElement("div"),o={position:"fixed",left:0,right:0,top:0,bottom:0,zIndex:5e3,display:"none",transition:"all",opacity:0};if(this.lock=t.lock,t.animate){var r=t.animate;/s/.test(r)&&(r=1e3*Number(r.split("s")[0])),this.animate=Number(r)}o.transition="all "+this.animate/1e3+"s",mixin(t.style,o),Object.keys(o).forEach(function(t){n.style[t]=o[t]}),n.id="cover__div--"+getRandom(5),n.innerHTML=t.innerHTML||"",e.appendChild(n),this.el=n},show:function(){document.body.style.overflow=this.lock?"hidden":"",this.el.style.display="block",this.el.style.opacity=1},hide:function(){document.body.style.overflow="",this.el.style.opacity=0,setTimeout(function(){this.el.style.display="none"}.bind(this),this.animate)}}},function(t,e){window.ajaxResCheck=function(t,e,n){n=n;2==arguments.length&&(n=e);var o={v:function(){n&&n(t.tdata,t)},pglist:function(){n&&n(t)},valerror:function(){IsNullOrEmpty(t.msg)||ShowMsgBox(t.msg,"error")},"login-index":function(){ShowMsgBox(t.msg,"error",function(){var t=getSession("company"),e=getSession("user");if(sessionStorage.clear(),t)window.top.location.href="/"+t+"/login";else{if("1"==e.userid)return void(window.top.location.href=htmlUrl+"/platlogin.html");window.top.location.href=htmlUrl+"/login.html"}})},"jump-url":function(){ShowMsgBox(t.msg,"info",function(){window.top.location.href=htmlUrl+t.url})}};return o[t.code]?o[t.code]():/^(throw-)/.test(t.code)?(t.code=t.code.split("throw-")[1],void(n&&n(t))):ShowMsgBox(t.msg,"error",function(){throw new Error(JSON.stringify(e))})},window.ShowMsg=function(t,e,n){n=n||function(){},window.top.$vue.$notify({message:t,type:e||"warning",onClose:n})},window.ShowConfirm=function(t,e,n,o){n=n||function(){},o=o||function(){},window.top.$vue.$confirm(t,"提示",{confirmButtonText:"确定",cancelButtonText:"取消",type:e||"warning",showClose:!1,callback:function(t,e){"confirm"==t?n():o()}})}},function(t,e){window.Date.prototype.pattern=function(t){var e={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours()%12==0?12:this.getHours()%12,"H+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var n in/(y+)/.test(t)&&(t=t.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),/(E+)/.test(t)&&(t=t.replace(RegExp.$1,(RegExp.$1.length>1?RegExp.$1.length>2?"/u661f/u671f":"/u5468":"")+{0:"/u65e5",1:"/u4e00",2:"/u4e8c",3:"/u4e09",4:"/u56db",5:"/u4e94",6:"/u516d"}[this.getDay()+""])),e)new RegExp("("+n+")").test(t)&&(t=t.replace(RegExp.$1,1==RegExp.$1.length?e[n]:("00"+e[n]).substr((""+e[n]).length)));return t},window.Date.prototype.Format=function(t){var e={"M+":this.getMonth()+1,"d+":this.getDate(),"H+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var n in/(y+)/.test(t)&&(t=t.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),e)new RegExp("("+n+")").test(t)&&(t=t.replace(RegExp.$1,1==RegExp.$1.length?e[n]:("00"+e[n]).substr((""+e[n]).length)));return t}},function(t,e){window.String.prototype.html=function(t){var e=["&#39;","'","&quot;",'"',"&nbsp;"," ","&gt;",">","&lt;","<","&amp;","&","&yen;","¥","&lsquo;","‘","&rsquo;","’","&hellip;","…","&ldquo;","“","&rdquo;","”","&mdash;","—"];t&&e.reverse();for(var n=0,o=this;n<e.length;n+=2)o=o.replace(new RegExp(e[n],"g"),e[n+1]);return o}},function(t,e){window.Vue?window.$?function(){function e(t){try{$vue.loadingController=!0}catch(t){}var e=clone(t.data);e=t.fztype?JSON.stringify(e):e;var n=t.fztype?"application/json;charset=UTF-8":"application/x-www-form-urlencoded;charset=UTF-8",o=t.callback||function(){};$.ajax({url:/\?/.test(t.url)?t.url+"&random="+getTimeStrmp():t.url+"?random="+getTimeStrmp(),type:t.type||"get",data:e,contentType:n,headers:{pageuser:getSession("user")?getSession("user").userid:""},success:function(e){var n="string"==typeof e&&/{|}/.test(e)?JSON.parse(e):e;try{$vue.loadingController=!1}catch(t){}!function t(e){if("object"==typeof e&&Array.isArray(e))e.forEach(function(e){"string"==typeof e?e=t(e):t(e)});else if("object"==typeof e&&e)Object.keys(e).forEach(function(n){"string"==typeof e[n]?e[n]=t(e[n]):t(e[n])});else if("string"==typeof e)return e.html()}(n),ajaxResCheck.call(this,n,t,o)},complete:function(t,e){try{"login-index"==t.responseJSON.result&&(window.parent!=window?window.top.location.href=htmlUrl+"/login.html":location.href=htmlUrl+"/login.html")}catch(t){}},error:function(e){console.error("ajax-error:"+t.url,e)}})}function n(t){window.$vue=null,t&&this.init(t)}function o(t){return null!=t&&null!=t&&"false"!=t}window.$bus=new Vue({}),Vue.prototype.$get=function(t,n,o,r){var i,a,c,u;i=t,a="",c=c||function(){},u=!1,2==arguments.length&&"function"==typeof n?c=n:2==arguments.length&&"function"!=typeof n?a=n:3==arguments.length?"boolean"==typeof arguments[arguments.length-1]?(a=n,u=o):(a=n,c=o):4==arguments.length&&(a=n,c=o,u=r),e.call(this,{url:i,data:a,type:"get",callback:function(t,e){c.call(this,t,e)}.bind(this),fztype:u})},Vue.prototype.$post=function(t,n,o,r){var i,a,c,u;i=t,a="",c=c||function(){},u=!1,2==arguments.length&&"function"==typeof n?c=n:2==arguments.length&&"function"!=typeof n?a=n:3==arguments.length?"boolean"==typeof arguments[arguments.length-1]?(a=n,u=o):(a=n,c=o):4==arguments.length&&(a=n,c=o,u=r),e.call(this,{url:i,data:a,type:"post",callback:function(t,e){c.call(this,t,e)}.bind(this),fztype:u})},n.prototype={data:{},methods:{},computed:{},watch:{},created:function(){},mounted:function(){},init:function(t){var e=t||this;t&&(e.mounted=e.mounted||function(){},e.created=e.created||function(){}),new Vue({el:"#main_con",data:function(){return e.data},computed:e.computed,watch:e.watch,methods:e.methods,mounted:function(){window.$vue=this,e.mounted.call(this)},created:function(){window.$vue=this,function(){var t=document.querySelectorAll("el-form-item"),e=["string","number","boolean","method","regexp","integer","float","array","object","enum","date","url","hex","email"];typeMap=["字符串","数字","布尔","method","正则","integer","浮点数","数组","对象","enum","日期","url地址","哈希","电子邮件"];for(var n=0;n<t.length;n++){var r=[],i="";if(o(t[n].getAttribute("required"))){var a=["blur"];o(t[n].getAttribute("change"))&&a.push("change"),r.push({required:"true",message:"请输入"+t[n].getAttribute("label"),trigger:a}),t[n].removeAttribute("required"),t[n].removeAttribute("change")}o(t[n].getAttribute("min"))&&(r.push({min:parseInt(t[n].getAttribute("min")),message:"至少输入"+t[n].getAttribute("min")+"个字符",trigger:"blur"}),t[n].removeAttribute("min")),o(t[n].getAttribute("max"))&&(r.push({max:parseInt(t[n].getAttribute("max")),message:"至多输入"+t[n].getAttribute("max")+"个字符",trigger:"blur"}),t[n].removeAttribute("max")),o(t[n].getAttribute("mobile"))&&(i='{ "validator":validatorObj.mobile,"trigger": ["blur", "change"]}',t[n].removeAttribute("mobile")),o(t[n].getAttribute("arrayvalue"))&&(i='{ "validator":validatorObj.arrayvalue,"trigger": ["blur", "change"]}',t[n].removeAttribute("arrayvalue"));for(var c=0;c<e.length;c++)null!=t[n].getAttribute(e[c])&&null!=t[n].getAttribute(e[c])&&"false"!=t[n].getAttribute(e[c])&&r.push({type:e[c],message:"请输入正确的"+typeMap[c]+"格式",trigger:["blur","change"]});var u=t[n].getAttribute(":rules")||"[]",s=JSON.stringify(r).slice(1,-1);function l(t){return t?",":""}var f="["+s+l(s)+i+l(i)+u.slice(1,-1)+"]";f=f.replace(/"/g,"'"),t[n].setAttribute(":rules",f)}}(),this.loadingController=this.loadingController||!1,this.dialogVisible=this.dialogVisible||!1,this.searchKey=this.searchKey||"",this.tableData=this.tableData||[],e.created.call(this)}})},getdata:function(t,n,o,r){if(arguments.length<=3){var i=t;e(i)}else if(4==arguments.length){var i=t;!function(t,n,o,r){e(t)}(i)}}},t.exports=n}():console.error("无法找到$对象"):console.error("无法找到Vue对象")}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,