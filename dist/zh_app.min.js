!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("mainVue",[],n):"object"==typeof exports?exports.mainVue=n():t.mainVue=n()}(window,function(){return function(t){var n={};function r(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)r.d(e,i,function(n){return t[n]}.bind(null,i));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=125)}([function(t,n,r){var e=r(2),i=r(18),o=r(11),u=r(12),c=r(19),a=function(t,n,r){var f,s,l,h,p=t&a.F,v=t&a.G,d=t&a.S,g=t&a.P,y=t&a.B,m=v?e:d?e[n]||(e[n]={}):(e[n]||{}).prototype,w=v?i:i[n]||(i[n]={}),b=w.prototype||(w.prototype={});for(f in v&&(r=n),r)l=((s=!p&&m&&void 0!==m[f])?m:r)[f],h=y&&s?c(l,e):g&&"function"==typeof l?c(Function.call,l):l,m&&u(m,f,l,t&a.U),w[f]!=l&&o(w,f,h),g&&b[f]!=l&&(b[f]=l)};e.core=i,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,r){var e=r(4);t.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},function(t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,r){var e=r(49)("wks"),i=r(33),o=r(2).Symbol,u="function"==typeof o;(t.exports=function(t){return e[t]||(e[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=e},function(t,n,r){t.exports=!r(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,r){var e=r(1),i=r(91),o=r(22),u=Object.defineProperty;n.f=r(6)?Object.defineProperty:function(t,n,r){if(e(t),n=o(n,!0),e(r),i)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},function(t,n,r){var e=r(24),i=Math.min;t.exports=function(t){return t>0?i(e(t),9007199254740991):0}},function(t,n,r){var e=r(23);t.exports=function(t){return Object(e(t))}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,r){var e=r(7),i=r(32);t.exports=r(6)?function(t,n,r){return e.f(t,n,i(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n,r){var e=r(2),i=r(11),o=r(14),u=r(33)("src"),c=Function.toString,a=(""+c).split("toString");r(18).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,r,c){var f="function"==typeof r;f&&(o(r,"name")||i(r,"name",n)),t[n]!==r&&(f&&(o(r,u)||i(r,u,t[n]?""+t[n]:a.join(String(n)))),t===e?t[n]=r:c?t[n]?t[n]=r:i(t,n,r):(delete t[n],i(t,n,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n,r){var e=r(0),i=r(3),o=r(23),u=/"/g,c=function(t,n,r,e){var i=String(o(t)),c="<"+n;return""!==r&&(c+=" "+r+'="'+String(e).replace(u,"&quot;")+'"'),c+">"+i+"</"+n+">"};t.exports=function(t,n){var r={};r[t]=n(c),e(e.P+e.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",r)}},function(t,n){var r={}.hasOwnProperty;t.exports=function(t,n){return r.call(t,n)}},function(t,n,r){var e=r(46),i=r(23);t.exports=function(t){return e(i(t))}},function(t,n,r){var e=r(47),i=r(32),o=r(15),u=r(22),c=r(14),a=r(91),f=Object.getOwnPropertyDescriptor;n.f=r(6)?f:function(t,n){if(t=o(t),n=u(n,!0),a)try{return f(t,n)}catch(t){}if(c(t,n))return i(!e.f.call(t,n),t[n])}},function(t,n,r){var e=r(14),i=r(9),o=r(66)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),e(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n){var r=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=r)},function(t,n,r){var e=r(10);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,i){return t.call(n,r,e,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,n,r){"use strict";var e=r(3);t.exports=function(t,n){return!!t&&e(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,r){var e=r(4);t.exports=function(t,n){if(!e(t))return t;var r,i;if(n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!e(i=r.call(t)))return i;if(!n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n){var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},function(t,n,r){var e=r(0),i=r(18),o=r(3);t.exports=function(t,n){var r=(i.Object||{})[t]||Object[t],u={};u[t]=n(r),e(e.S+e.F*o(function(){r(1)}),"Object",u)}},function(t,n,r){var e=r(19),i=r(46),o=r(9),u=r(8),c=r(83);t.exports=function(t,n){var r=1==t,a=2==t,f=3==t,s=4==t,l=6==t,h=5==t||l,p=n||c;return function(n,c,v){for(var d,g,y=o(n),m=i(y),w=e(c,v,3),b=u(m.length),S=0,x=r?p(n,b):a?p(n,0):void 0;b>S;S++)if((h||S in m)&&(g=w(d=m[S],S,y),t))if(r)x[S]=g;else if(g)switch(t){case 3:return!0;case 5:return d;case 6:return S;case 2:x.push(d)}else if(s)return!1;return l?-1:f||s?s:x}}},function(t,n,r){"use strict";if(r(6)){var e=r(30),i=r(2),o=r(3),u=r(0),c=r(60),a=r(89),f=r(19),s=r(39),l=r(32),h=r(11),p=r(41),v=r(24),d=r(8),g=r(117),y=r(35),m=r(22),w=r(14),b=r(48),S=r(4),x=r(9),_=r(80),E=r(36),O=r(17),M=r(37).f,A=r(82),j=r(33),P=r(5),F=r(26),k=r(50),N=r(57),I=r(85),T=r(44),R=r(54),L=r(38),C=r(84),D=r(107),$=r(7),W=r(16),B=$.f,V=W.f,U=i.RangeError,G=i.TypeError,H=i.Uint8Array,q=Array.prototype,z=a.ArrayBuffer,J=a.DataView,Y=F(0),K=F(2),X=F(3),Z=F(4),Q=F(5),tt=F(6),nt=k(!0),rt=k(!1),et=I.values,it=I.keys,ot=I.entries,ut=q.lastIndexOf,ct=q.reduce,at=q.reduceRight,ft=q.join,st=q.sort,lt=q.slice,ht=q.toString,pt=q.toLocaleString,vt=P("iterator"),dt=P("toStringTag"),gt=j("typed_constructor"),yt=j("def_constructor"),mt=c.CONSTR,wt=c.TYPED,bt=c.VIEW,St=F(1,function(t,n){return Mt(N(t,t[yt]),n)}),xt=o(function(){return 1===new H(new Uint16Array([1]).buffer)[0]}),_t=!!H&&!!H.prototype.set&&o(function(){new H(1).set({})}),Et=function(t,n){var r=v(t);if(r<0||r%n)throw U("Wrong offset!");return r},Ot=function(t){if(S(t)&&wt in t)return t;throw G(t+" is not a typed array!")},Mt=function(t,n){if(!(S(t)&&gt in t))throw G("It is not a typed array constructor!");return new t(n)},At=function(t,n){return jt(N(t,t[yt]),n)},jt=function(t,n){for(var r=0,e=n.length,i=Mt(t,e);e>r;)i[r]=n[r++];return i},Pt=function(t,n,r){B(t,n,{get:function(){return this._d[r]}})},Ft=function(t){var n,r,e,i,o,u,c=x(t),a=arguments.length,s=a>1?arguments[1]:void 0,l=void 0!==s,h=A(c);if(null!=h&&!_(h)){for(u=h.call(c),e=[],n=0;!(o=u.next()).done;n++)e.push(o.value);c=e}for(l&&a>2&&(s=f(s,arguments[2],2)),n=0,r=d(c.length),i=Mt(this,r);r>n;n++)i[n]=l?s(c[n],n):c[n];return i},kt=function(){for(var t=0,n=arguments.length,r=Mt(this,n);n>t;)r[t]=arguments[t++];return r},Nt=!!H&&o(function(){pt.call(new H(1))}),It=function(){return pt.apply(Nt?lt.call(Ot(this)):Ot(this),arguments)},Tt={copyWithin:function(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return C.apply(Ot(this),arguments)},filter:function(t){return At(this,K(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Y(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ft.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return St(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,r=Math.floor(n/2),e=0;e<r;)t=this[e],this[e++]=this[--n],this[n]=t;return this},some:function(t){return X(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return st.call(Ot(this),t)},subarray:function(t,n){var r=Ot(this),e=r.length,i=y(t,e);return new(N(r,r[yt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,d((void 0===n?e:y(n,e))-i))}},Rt=function(t,n){return At(this,lt.call(Ot(this),t,n))},Lt=function(t){Ot(this);var n=Et(arguments[1],1),r=this.length,e=x(t),i=d(e.length),o=0;if(i+n>r)throw U("Wrong length!");for(;o<i;)this[n+o]=e[o++]},Ct={entries:function(){return ot.call(Ot(this))},keys:function(){return it.call(Ot(this))},values:function(){return et.call(Ot(this))}},Dt=function(t,n){return S(t)&&t[wt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},$t=function(t,n){return Dt(t,n=m(n,!0))?l(2,t[n]):V(t,n)},Wt=function(t,n,r){return!(Dt(t,n=m(n,!0))&&S(r)&&w(r,"value"))||w(r,"get")||w(r,"set")||r.configurable||w(r,"writable")&&!r.writable||w(r,"enumerable")&&!r.enumerable?B(t,n,r):(t[n]=r.value,t)};mt||(W.f=$t,$.f=Wt),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:$t,defineProperty:Wt}),o(function(){ht.call({})})&&(ht=pt=function(){return ft.call(this)});var Bt=p({},Tt);p(Bt,Ct),h(Bt,vt,Ct.values),p(Bt,{slice:Rt,set:Lt,constructor:function(){},toString:ht,toLocaleString:It}),Pt(Bt,"buffer","b"),Pt(Bt,"byteOffset","o"),Pt(Bt,"byteLength","l"),Pt(Bt,"length","e"),B(Bt,dt,{get:function(){return this[wt]}}),t.exports=function(t,n,r,a){var f=t+((a=!!a)?"Clamped":"")+"Array",l="get"+t,p="set"+t,v=i[f],y=v||{},m=v&&O(v),w=!v||!c.ABV,x={},_=v&&v.prototype,A=function(t,r){B(t,r,{get:function(){return function(t,r){var e=t._d;return e.v[l](r*n+e.o,xt)}(this,r)},set:function(t){return function(t,r,e){var i=t._d;a&&(e=(e=Math.round(e))<0?0:e>255?255:255&e),i.v[p](r*n+i.o,e,xt)}(this,r,t)},enumerable:!0})};w?(v=r(function(t,r,e,i){s(t,v,f,"_d");var o,u,c,a,l=0,p=0;if(S(r)){if(!(r instanceof z||"ArrayBuffer"==(a=b(r))||"SharedArrayBuffer"==a))return wt in r?jt(v,r):Ft.call(v,r);o=r,p=Et(e,n);var y=r.byteLength;if(void 0===i){if(y%n)throw U("Wrong length!");if((u=y-p)<0)throw U("Wrong length!")}else if((u=d(i)*n)+p>y)throw U("Wrong length!");c=u/n}else c=g(r),o=new z(u=c*n);for(h(t,"_d",{b:o,o:p,l:u,e:c,v:new J(o)});l<c;)A(t,l++)}),_=v.prototype=E(Bt),h(_,"constructor",v)):o(function(){v(1)})&&o(function(){new v(-1)})&&R(function(t){new v,new v(null),new v(1.5),new v(t)},!0)||(v=r(function(t,r,e,i){var o;return s(t,v,f),S(r)?r instanceof z||"ArrayBuffer"==(o=b(r))||"SharedArrayBuffer"==o?void 0!==i?new y(r,Et(e,n),i):void 0!==e?new y(r,Et(e,n)):new y(r):wt in r?jt(v,r):Ft.call(v,r):new y(g(r))}),Y(m!==Function.prototype?M(y).concat(M(m)):M(y),function(t){t in v||h(v,t,y[t])}),v.prototype=_,e||(_.constructor=v));var j=_[vt],P=!!j&&("values"==j.name||null==j.name),F=Ct.values;h(v,gt,!0),h(_,wt,f),h(_,bt,!0),h(_,yt,v),(a?new v(1)[dt]==f:dt in _)||B(_,dt,{get:function(){return f}}),x[f]=v,u(u.G+u.W+u.F*(v!=y),x),u(u.S,f,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*o(function(){y.of.call(v,1)}),f,{from:Ft,of:kt}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",n),u(u.P,f,Tt),L(f),u(u.P+u.F*_t,f,{set:Lt}),u(u.P+u.F*!P,f,Ct),e||_.toString==ht||(_.toString=ht),u(u.P+u.F*o(function(){new v(1).slice()}),f,{slice:Rt}),u(u.P+u.F*(o(function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()})||!o(function(){_.toLocaleString.call([1,2])})),f,{toLocaleString:It}),T[f]=P?j:F,e||P||h(_,vt,F)}}else t.exports=function(){}},function(t,n,r){var e=r(112),i=r(0),o=r(49)("metadata"),u=o.store||(o.store=new(r(115))),c=function(t,n,r){var i=u.get(t);if(!i){if(!r)return;u.set(t,i=new e)}var o=i.get(n);if(!o){if(!r)return;i.set(n,o=new e)}return o};t.exports={store:u,map:c,has:function(t,n,r){var e=c(n,r,!1);return void 0!==e&&e.has(t)},get:function(t,n,r){var e=c(n,r,!1);return void 0===e?void 0:e.get(t)},set:function(t,n,r,e){c(r,e,!0).set(t,n)},keys:function(t,n){var r=c(t,n,!1),e=[];return r&&r.forEach(function(t,n){e.push(n)}),e},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},function(t,n,r){var e=r(33)("meta"),i=r(4),o=r(14),u=r(7).f,c=0,a=Object.isExtensible||function(){return!0},f=!r(3)(function(){return a(Object.preventExtensions({}))}),s=function(t){u(t,e,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,e)){if(!a(t))return"F";if(!n)return"E";s(t)}return t[e].i},getWeak:function(t,n){if(!o(t,e)){if(!a(t))return!0;if(!n)return!1;s(t)}return t[e].w},onFreeze:function(t){return f&&l.NEED&&a(t)&&!o(t,e)&&s(t),t}}},function(t,n){t.exports=!1},function(t,n,r){var e=r(5)("unscopables"),i=Array.prototype;null==i[e]&&r(11)(i,e,{}),t.exports=function(t){i[e][t]=!0}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var r=0,e=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+e).toString(36))}},function(t,n,r){var e=r(93),i=r(67);t.exports=Object.keys||function(t){return e(t,i)}},function(t,n,r){var e=r(24),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=e(t))<0?i(t+n,0):o(t,n)}},function(t,n,r){var e=r(1),i=r(94),o=r(67),u=r(66)("IE_PROTO"),c=function(){},a=function(){var t,n=r(64)("iframe"),e=o.length;for(n.style.display="none",r(68).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;e--;)delete a.prototype[o[e]];return a()};t.exports=Object.create||function(t,n){var r;return null!==t?(c.prototype=e(t),r=new c,c.prototype=null,r[u]=t):r=a(),void 0===n?r:i(r,n)}},function(t,n,r){var e=r(93),i=r(67).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return e(t,i)}},function(t,n,r){"use strict";var e=r(2),i=r(7),o=r(6),u=r(5)("species");t.exports=function(t){var n=e[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,r,e){if(!(t instanceof n)||void 0!==e&&e in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,n,r){var e=r(19),i=r(105),o=r(80),u=r(1),c=r(8),a=r(82),f={},s={};(n=t.exports=function(t,n,r,l,h){var p,v,d,g,y=h?function(){return t}:a(t),m=e(r,l,n?2:1),w=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(o(y)){for(p=c(t.length);p>w;w++)if((g=n?m(u(v=t[w])[0],v[1]):m(t[w]))===f||g===s)return g}else for(d=y.call(t);!(v=d.next()).done;)if((g=i(d,m,v.value,n))===f||g===s)return g}).BREAK=f,n.RETURN=s},function(t,n,r){var e=r(12);t.exports=function(t,n,r){for(var i in n)e(t,i,n[i],r);return t}},function(t,n,r){var e=r(7).f,i=r(14),o=r(5)("toStringTag");t.exports=function(t,n,r){t&&!i(t=r?t:t.prototype,o)&&e(t,o,{configurable:!0,value:n})}},function(t,n,r){var e=r(0),i=r(23),o=r(3),u=r(70),c="["+u+"]",a=RegExp("^"+c+c+"*"),f=RegExp(c+c+"*$"),s=function(t,n,r){var i={},c=o(function(){return!!u[t]()||"​"!="​"[t]()}),a=i[t]=c?n(l):u[t];r&&(i[r]=a),e(e.P+e.F*c,"String",i)},l=s.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(a,"")),2&n&&(t=t.replace(f,"")),t};t.exports=s},function(t,n){t.exports={}},function(t,n,r){var e=r(4);t.exports=function(t,n){if(!e(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,r){var e=r(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,r){var e=r(20),i=r(5)("toStringTag"),o="Arguments"==e(function(){return arguments}());t.exports=function(t){var n,r,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?r:o?e(n):"Object"==(u=e(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,r){var e=r(18),i=r(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:e.version,mode:r(30)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,n,r){var e=r(15),i=r(8),o=r(35);t.exports=function(t){return function(n,r,u){var c,a=e(n),f=i(a.length),s=o(u,f);if(t&&r!=r){for(;f>s;)if((c=a[s++])!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===r)return t||s||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,r){var e=r(20);t.exports=Array.isArray||function(t){return"Array"==e(t)}},function(t,n,r){var e=r(4),i=r(20),o=r(5)("match");t.exports=function(t){var n;return e(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,r){var e=r(5)("iterator"),i=!1;try{var o=[7][e]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var r=!1;try{var o=[7],u=o[e]();u.next=function(){return{done:r=!0}},o[e]=function(){return u},t(o)}catch(t){}return r}},function(t,n,r){"use strict";var e=r(1);t.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,r){"use strict";var e=r(11),i=r(12),o=r(3),u=r(23),c=r(5);t.exports=function(t,n,r){var a=c(t),f=r(u,a,""[t]),s=f[0],l=f[1];o(function(){var n={};return n[a]=function(){return 7},7!=""[t](n)})&&(i(String.prototype,t,s),e(RegExp.prototype,a,2==n?function(t,n){return l.call(t,this,n)}:function(t){return l.call(t,this)}))}},function(t,n,r){var e=r(1),i=r(10),o=r(5)("species");t.exports=function(t,n){var r,u=e(t).constructor;return void 0===u||null==(r=e(u)[o])?n:i(r)}},function(t,n,r){var e=r(2).navigator;t.exports=e&&e.userAgent||""},function(t,n,r){"use strict";var e=r(2),i=r(0),o=r(12),u=r(41),c=r(29),a=r(40),f=r(39),s=r(4),l=r(3),h=r(54),p=r(42),v=r(71);t.exports=function(t,n,r,d,g,y){var m=e[t],w=m,b=g?"set":"add",S=w&&w.prototype,x={},_=function(t){var n=S[t];o(S,t,"delete"==t?function(t){return!(y&&!s(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!s(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!s(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,r){return n.call(this,0===t?0:t,r),this})};if("function"==typeof w&&(y||S.forEach&&!l(function(){(new w).entries().next()}))){var E=new w,O=E[b](y?{}:-0,1)!=E,M=l(function(){E.has(1)}),A=h(function(t){new w(t)}),j=!y&&l(function(){for(var t=new w,n=5;n--;)t[b](n,n);return!t.has(-0)});A||((w=n(function(n,r){f(n,w,t);var e=v(new m,n,w);return null!=r&&a(r,g,e[b],e),e})).prototype=S,S.constructor=w),(M||j)&&(_("delete"),_("has"),g&&_("get")),(j||O)&&_(b),y&&S.clear&&delete S.clear}else w=d.getConstructor(n,t,g,b),u(w.prototype,r),c.NEED=!0;return p(w,t),x[t]=w,i(i.G+i.W+i.F*(w!=m),x),y||d.setStrong(w,t,g),w}},function(t,n,r){for(var e,i=r(2),o=r(11),u=r(33),c=u("typed_array"),a=u("view"),f=!(!i.ArrayBuffer||!i.DataView),s=f,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(e=i[h[l++]])?(o(e.prototype,c,!0),o(e.prototype,a,!0)):s=!1;t.exports={ABV:f,CONSTR:s,TYPED:c,VIEW:a}},function(t,n,r){"use strict";t.exports=r(30)||!r(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete r(2)[t]})},function(t,n,r){"use strict";var e=r(0);t.exports=function(t){e(e.S,t,{of:function(){for(var t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},function(t,n,r){"use strict";var e=r(0),i=r(10),o=r(19),u=r(40);t.exports=function(t){e(e.S,t,{from:function(t){var n,r,e,c,a=arguments[1];return i(this),(n=void 0!==a)&&i(a),null==t?new this:(r=[],n?(e=0,c=o(a,arguments[2],2),u(t,!1,function(t){r.push(c(t,e++))})):u(t,!1,r.push,r),new this(r))}})}},function(t,n,r){var e=r(4),i=r(2).document,o=e(i)&&e(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,r){var e=r(2),i=r(18),o=r(30),u=r(92),c=r(7).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:e.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,r){var e=r(49)("keys"),i=r(33);t.exports=function(t){return e[t]||(e[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,r){var e=r(2).document;t.exports=e&&e.documentElement},function(t,n,r){var e=r(4),i=r(1),o=function(t,n){if(i(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,e){try{(e=r(19)(Function.call,r(16).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,r){return o(t,r),n?t.__proto__=r:e(t,r),t}}({},!1):void 0),check:o}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,r){var e=r(4),i=r(69).set;t.exports=function(t,n,r){var o,u=n.constructor;return u!==r&&"function"==typeof u&&(o=u.prototype)!==r.prototype&&e(o)&&i&&i(t,o),t}},function(t,n,r){"use strict";var e=r(24),i=r(23);t.exports=function(t){var n=String(i(this)),r="",o=e(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(r+=n);return r}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,n,r){var e=r(24),i=r(23);t.exports=function(t){return function(n,r){var o,u,c=String(i(n)),a=e(r),f=c.length;return a<0||a>=f?t?"":void 0:(o=c.charCodeAt(a))<55296||o>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):o:t?c.slice(a,a+2):u-56320+(o-55296<<10)+65536}}},function(t,n,r){"use strict";var e=r(30),i=r(0),o=r(12),u=r(11),c=r(44),a=r(77),f=r(42),s=r(17),l=r(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,r,v,d,g,y){a(r,n,v);var m,w,b,S=function(t){if(!h&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},x=n+" Iterator",_="values"==d,E=!1,O=t.prototype,M=O[l]||O["@@iterator"]||d&&O[d],A=M||S(d),j=d?_?S("entries"):A:void 0,P="Array"==n&&O.entries||M;if(P&&(b=s(P.call(new t)))!==Object.prototype&&b.next&&(f(b,x,!0),e||"function"==typeof b[l]||u(b,l,p)),_&&M&&"values"!==M.name&&(E=!0,A=function(){return M.call(this)}),e&&!y||!h&&!E&&O[l]||u(O,l,A),c[n]=A,c[x]=p,d)if(m={values:_?A:S("values"),keys:g?A:S("keys"),entries:j},y)for(w in m)w in O||o(O,w,m[w]);else i(i.P+i.F*(h||E),n,m);return m}},function(t,n,r){"use strict";var e=r(36),i=r(32),o=r(42),u={};r(11)(u,r(5)("iterator"),function(){return this}),t.exports=function(t,n,r){t.prototype=e(u,{next:i(1,r)}),o(t,n+" Iterator")}},function(t,n,r){var e=r(53),i=r(23);t.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},function(t,n,r){var e=r(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(r){try{return n[e]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,r){var e=r(44),i=r(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(e.Array===t||o[i]===t)}},function(t,n,r){"use strict";var e=r(7),i=r(32);t.exports=function(t,n,r){n in t?e.f(t,n,i(0,r)):t[n]=r}},function(t,n,r){var e=r(48),i=r(5)("iterator"),o=r(44);t.exports=r(18).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[e(t)]}},function(t,n,r){var e=r(218);t.exports=function(t,n){return new(e(t))(n)}},function(t,n,r){"use strict";var e=r(9),i=r(35),o=r(8);t.exports=function(t){for(var n=e(this),r=o(n.length),u=arguments.length,c=i(u>1?arguments[1]:void 0,r),a=u>2?arguments[2]:void 0,f=void 0===a?r:i(a,r);f>c;)n[c++]=t;return n}},function(t,n,r){"use strict";var e=r(31),i=r(108),o=r(44),u=r(15);t.exports=r(76)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?r:"values"==n?t[r]:[r,t[r]])},"values"),o.Arguments=o.Array,e("keys"),e("values"),e("entries")},function(t,n,r){var e,i,o,u=r(19),c=r(98),a=r(68),f=r(64),s=r(2),l=s.process,h=s.setImmediate,p=s.clearImmediate,v=s.MessageChannel,d=s.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var n=y[t];delete y[t],n()}},w=function(t){m.call(t.data)};h&&p||(h=function(t){for(var n=[],r=1;arguments.length>r;)n.push(arguments[r++]);return y[++g]=function(){c("function"==typeof t?t:Function(t),n)},e(g),g},p=function(t){delete y[t]},"process"==r(20)(l)?e=function(t){l.nextTick(u(m,t,1))}:d&&d.now?e=function(t){d.now(u(m,t,1))}:v?(o=(i=new v).port2,i.port1.onmessage=w,e=u(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(e=function(t){s.postMessage(t+"","*")},s.addEventListener("message",w,!1)):e="onreadystatechange"in f("script")?function(t){a.appendChild(f("script")).onreadystatechange=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,r){var e=r(2),i=r(86).set,o=e.MutationObserver||e.WebKitMutationObserver,u=e.process,c=e.Promise,a="process"==r(20)(u);t.exports=function(){var t,n,r,f=function(){var e,i;for(a&&(e=u.domain)&&e.exit();t;){i=t.fn,t=t.next;try{i()}catch(e){throw t?r():n=void 0,e}}n=void 0,e&&e.enter()};if(a)r=function(){u.nextTick(f)};else if(!o||e.navigator&&e.navigator.standalone)if(c&&c.resolve){var s=c.resolve(void 0);r=function(){s.then(f)}}else r=function(){i.call(e,f)};else{var l=!0,h=document.createTextNode("");new o(f).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(e){var i={fn:e,next:void 0};n&&(n.next=i),t||(t=i,r()),n=i}}},function(t,n,r){"use strict";var e=r(10);function i(t){var n,r;this.promise=new t(function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e}),this.resolve=e(n),this.reject=e(r)}t.exports.f=function(t){return new i(t)}},function(t,n,r){"use strict";var e=r(2),i=r(6),o=r(30),u=r(60),c=r(11),a=r(41),f=r(3),s=r(39),l=r(24),h=r(8),p=r(117),v=r(37).f,d=r(7).f,g=r(84),y=r(42),m="prototype",w="Wrong index!",b=e.ArrayBuffer,S=e.DataView,x=e.Math,_=e.RangeError,E=e.Infinity,O=b,M=x.abs,A=x.pow,j=x.floor,P=x.log,F=x.LN2,k=i?"_b":"buffer",N=i?"_l":"byteLength",I=i?"_o":"byteOffset";function T(t,n,r){var e,i,o,u=new Array(r),c=8*r-n-1,a=(1<<c)-1,f=a>>1,s=23===n?A(2,-24)-A(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=M(t))!=t||t===E?(i=t!=t?1:0,e=a):(e=j(P(t)/F),t*(o=A(2,-e))<1&&(e--,o*=2),(t+=e+f>=1?s/o:s*A(2,1-f))*o>=2&&(e++,o/=2),e+f>=a?(i=0,e=a):e+f>=1?(i=(t*o-1)*A(2,n),e+=f):(i=t*A(2,f-1)*A(2,n),e=0));n>=8;u[l++]=255&i,i/=256,n-=8);for(e=e<<n|i,c+=n;c>0;u[l++]=255&e,e/=256,c-=8);return u[--l]|=128*h,u}function R(t,n,r){var e,i=8*r-n-1,o=(1<<i)-1,u=o>>1,c=i-7,a=r-1,f=t[a--],s=127&f;for(f>>=7;c>0;s=256*s+t[a],a--,c-=8);for(e=s&(1<<-c)-1,s>>=-c,c+=n;c>0;e=256*e+t[a],a--,c-=8);if(0===s)s=1-u;else{if(s===o)return e?NaN:f?-E:E;e+=A(2,n),s-=u}return(f?-1:1)*e*A(2,s-n)}function L(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function C(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function $(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function W(t){return T(t,52,8)}function B(t){return T(t,23,4)}function V(t,n,r){d(t[m],n,{get:function(){return this[r]}})}function U(t,n,r,e){var i=p(+r);if(i+n>t[N])throw _(w);var o=t[k]._b,u=i+t[I],c=o.slice(u,u+n);return e?c:c.reverse()}function G(t,n,r,e,i,o){var u=p(+r);if(u+n>t[N])throw _(w);for(var c=t[k]._b,a=u+t[I],f=e(+i),s=0;s<n;s++)c[a+s]=f[o?s:n-s-1]}if(u.ABV){if(!f(function(){b(1)})||!f(function(){new b(-1)})||f(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var H,q=(b=function(t){return s(this,b),new O(p(t))})[m]=O[m],z=v(O),J=0;z.length>J;)(H=z[J++])in b||c(b,H,O[H]);o||(q.constructor=b)}var Y=new S(new b(2)),K=S[m].setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||a(S[m],{setInt8:function(t,n){K.call(this,t,n<<24>>24)},setUint8:function(t,n){K.call(this,t,n<<24>>24)}},!0)}else b=function(t){s(this,b,"ArrayBuffer");var n=p(t);this._b=g.call(new Array(n),0),this[N]=n},S=function(t,n,r){s(this,S,"DataView"),s(t,b,"DataView");var e=t[N],i=l(n);if(i<0||i>e)throw _("Wrong offset!");if(i+(r=void 0===r?e-i:h(r))>e)throw _("Wrong length!");this[k]=t,this[I]=i,this[N]=r},i&&(V(b,"byteLength","_l"),V(S,"buffer","_b"),V(S,"byteLength","_l"),V(S,"byteOffset","_o")),a(S[m],{getInt8:function(t){return U(this,1,t)[0]<<24>>24},getUint8:function(t){return U(this,1,t)[0]},getInt16:function(t){var n=U(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=U(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return L(U(this,4,t,arguments[1]))},getUint32:function(t){return L(U(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(U(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(U(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){G(this,1,t,C,n)},setUint8:function(t,n){G(this,1,t,C,n)},setInt16:function(t,n){G(this,2,t,D,n,arguments[2])},setUint16:function(t,n){G(this,2,t,D,n,arguments[2])},setInt32:function(t,n){G(this,4,t,$,n,arguments[2])},setUint32:function(t,n){G(this,4,t,$,n,arguments[2])},setFloat32:function(t,n){G(this,4,t,B,n,arguments[2])},setFloat64:function(t,n){G(this,8,t,W,n,arguments[2])}});y(b,"ArrayBuffer"),y(S,"DataView"),c(S[m],u.VIEW,!0),n.ArrayBuffer=b,n.DataView=S},function(t,n){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,n,r){t.exports=!r(6)&&!r(3)(function(){return 7!=Object.defineProperty(r(64)("div"),"a",{get:function(){return 7}}).a})},function(t,n,r){n.f=r(5)},function(t,n,r){var e=r(14),i=r(15),o=r(50)(!1),u=r(66)("IE_PROTO");t.exports=function(t,n){var r,c=i(t),a=0,f=[];for(r in c)r!=u&&e(c,r)&&f.push(r);for(;n.length>a;)e(c,r=n[a++])&&(~o(f,r)||f.push(r));return f}},function(t,n,r){var e=r(7),i=r(1),o=r(34);t.exports=r(6)?Object.defineProperties:function(t,n){i(t);for(var r,u=o(n),c=u.length,a=0;c>a;)e.f(t,r=u[a++],n[r]);return t}},function(t,n,r){var e=r(15),i=r(37).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(e(t))}},function(t,n,r){"use strict";var e=r(34),i=r(51),o=r(47),u=r(9),c=r(46),a=Object.assign;t.exports=!a||r(3)(function(){var t={},n={},r=Symbol(),e="abcdefghijklmnopqrst";return t[r]=7,e.split("").forEach(function(t){n[t]=t}),7!=a({},t)[r]||Object.keys(a({},n)).join("")!=e})?function(t,n){for(var r=u(t),a=arguments.length,f=1,s=i.f,l=o.f;a>f;)for(var h,p=c(arguments[f++]),v=s?e(p).concat(s(p)):e(p),d=v.length,g=0;d>g;)l.call(p,h=v[g++])&&(r[h]=p[h]);return r}:a},function(t,n,r){"use strict";var e=r(10),i=r(4),o=r(98),u=[].slice,c={};t.exports=Function.bind||function(t){var n=e(this),r=u.call(arguments,1),a=function(){var e=r.concat(u.call(arguments));return this instanceof a?function(t,n,r){if(!(n in c)){for(var e=[],i=0;i<n;i++)e[i]="a["+i+"]";c[n]=Function("F,a","return new F("+e.join(",")+")")}return c[n](t,r)}(n,e.length,e):o(n,e,t)};return i(n.prototype)&&(a.prototype=n.prototype),a}},function(t,n){t.exports=function(t,n,r){var e=void 0===r;switch(n.length){case 0:return e?t():t.call(r);case 1:return e?t(n[0]):t.call(r,n[0]);case 2:return e?t(n[0],n[1]):t.call(r,n[0],n[1]);case 3:return e?t(n[0],n[1],n[2]):t.call(r,n[0],n[1],n[2]);case 4:return e?t(n[0],n[1],n[2],n[3]):t.call(r,n[0],n[1],n[2],n[3])}return t.apply(r,n)}},function(t,n,r){var e=r(2).parseInt,i=r(43).trim,o=r(70),u=/^[-+]?0[xX]/;t.exports=8!==e(o+"08")||22!==e(o+"0x16")?function(t,n){var r=i(String(t),3);return e(r,n>>>0||(u.test(r)?16:10))}:e},function(t,n,r){var e=r(2).parseFloat,i=r(43).trim;t.exports=1/e(r(70)+"-0")!=-1/0?function(t){var n=i(String(t),3),r=e(n);return 0===r&&"-"==n.charAt(0)?-0:r}:e},function(t,n,r){var e=r(20);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=e(t))throw TypeError(n);return+t}},function(t,n,r){var e=r(4),i=Math.floor;t.exports=function(t){return!e(t)&&isFinite(t)&&i(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,r){var e=r(73),i=Math.pow,o=i(2,-52),u=i(2,-23),c=i(2,127)*(2-u),a=i(2,-126);t.exports=Math.fround||function(t){var n,r,i=Math.abs(t),f=e(t);return i<a?f*(i/a/u+1/o-1/o)*a*u:(r=(n=(1+u/o)*i)-(n-i))>c||r!=r?f*(1/0):f*r}},function(t,n,r){var e=r(1);t.exports=function(t,n,r,i){try{return i?n(e(r)[0],r[1]):n(r)}catch(n){var o=t.return;throw void 0!==o&&e(o.call(t)),n}}},function(t,n,r){var e=r(10),i=r(9),o=r(46),u=r(8);t.exports=function(t,n,r,c,a){e(n);var f=i(t),s=o(f),l=u(f.length),h=a?l-1:0,p=a?-1:1;if(r<2)for(;;){if(h in s){c=s[h],h+=p;break}if(h+=p,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=p)h in s&&(c=n(c,s[h],h,f));return c}},function(t,n,r){"use strict";var e=r(9),i=r(35),o=r(8);t.exports=[].copyWithin||function(t,n){var r=e(this),u=o(r.length),c=i(t,u),a=i(n,u),f=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===f?u:i(f,u))-a,u-c),l=1;for(a<c&&c<a+s&&(l=-1,a+=s-1,c+=s-1);s-- >0;)a in r?r[c]=r[a]:delete r[c],c+=l,a+=l;return r}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,r){r(6)&&"g"!=/./g.flags&&r(7).f(RegExp.prototype,"flags",{configurable:!0,get:r(55)})},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,r){var e=r(1),i=r(4),o=r(88);t.exports=function(t,n){if(e(t),i(n)&&n.constructor===t)return n;var r=o.f(t);return(0,r.resolve)(n),r.promise}},function(t,n,r){"use strict";var e=r(113),i=r(45);t.exports=r(59)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=e.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return e.def(i(this,"Map"),0===t?0:t,n)}},e,!0)},function(t,n,r){"use strict";var e=r(7).f,i=r(36),o=r(41),u=r(19),c=r(39),a=r(40),f=r(76),s=r(108),l=r(38),h=r(6),p=r(29).fastKey,v=r(45),d=h?"_s":"size",g=function(t,n){var r,e=p(n);if("F"!==e)return t._i[e];for(r=t._f;r;r=r.n)if(r.k==n)return r};t.exports={getConstructor:function(t,n,r,f){var s=t(function(t,e){c(t,s,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[d]=0,null!=e&&a(e,r,t[f],t)});return o(s.prototype,{clear:function(){for(var t=v(this,n),r=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete r[e.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var r=v(this,n),e=g(r,t);if(e){var i=e.n,o=e.p;delete r._i[e.i],e.r=!0,o&&(o.n=i),i&&(i.p=o),r._f==e&&(r._f=i),r._l==e&&(r._l=o),r[d]--}return!!e},forEach:function(t){v(this,n);for(var r,e=u(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(e(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(v(this,n),t)}}),h&&e(s.prototype,"size",{get:function(){return v(this,n)[d]}}),s},def:function(t,n,r){var e,i,o=g(t,n);return o?o.v=r:(t._l=o={i:i=p(n,!0),k:n,v:r,p:e=t._l,n:void 0,r:!1},t._f||(t._f=o),e&&(e.n=o),t[d]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,r){f(t,n,function(t,r){this._t=v(t,n),this._k=r,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?s(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,s(1))},r?"entries":"values",!r,!0),l(n)}}},function(t,n,r){"use strict";var e=r(113),i=r(45);t.exports=r(59)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return e.def(i(this,"Set"),t=0===t?0:t,t)}},e)},function(t,n,r){"use strict";var e,i=r(26)(0),o=r(12),u=r(29),c=r(96),a=r(116),f=r(4),s=r(3),l=r(45),h=u.getWeak,p=Object.isExtensible,v=a.ufstore,d={},g=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(f(t)){var n=h(t);return!0===n?v(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return a.def(l(this,"WeakMap"),t,n)}},m=t.exports=r(59)("WeakMap",g,y,a,!0,!0);s(function(){return 7!=(new m).set((Object.freeze||Object)(d),7).get(d)})&&(c((e=a.getConstructor(g,"WeakMap")).prototype,y),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=m.prototype,r=n[t];o(n,t,function(n,i){if(f(n)&&!p(n)){this._f||(this._f=new e);var o=this._f[t](n,i);return"set"==t?this:o}return r.call(this,n,i)})}))},function(t,n,r){"use strict";var e=r(41),i=r(29).getWeak,o=r(1),u=r(4),c=r(39),a=r(40),f=r(26),s=r(14),l=r(45),h=f(5),p=f(6),v=0,d=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,n){return h(t.a,function(t){return t[0]===n})};g.prototype={get:function(t){var n=y(this,t);if(n)return n[1]},has:function(t){return!!y(this,t)},set:function(t,n){var r=y(this,t);r?r[1]=n:this.a.push([t,n])},delete:function(t){var n=p(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,r,o){var f=t(function(t,e){c(t,f,n,"_i"),t._t=n,t._i=v++,t._l=void 0,null!=e&&a(e,r,t[o],t)});return e(f.prototype,{delete:function(t){if(!u(t))return!1;var r=i(t);return!0===r?d(l(this,n)).delete(t):r&&s(r,this._i)&&delete r[this._i]},has:function(t){if(!u(t))return!1;var r=i(t);return!0===r?d(l(this,n)).has(t):r&&s(r,this._i)}}),f},def:function(t,n,r){var e=i(o(n),!0);return!0===e?d(t).set(n,r):e[t._i]=r,t},ufstore:d}},function(t,n,r){var e=r(24),i=r(8);t.exports=function(t){if(void 0===t)return 0;var n=e(t),r=i(n);if(n!==r)throw RangeError("Wrong length!");return r}},function(t,n,r){var e=r(37),i=r(51),o=r(1),u=r(2).Reflect;t.exports=u&&u.ownKeys||function(t){var n=e.f(o(t)),r=i.f;return r?n.concat(r(t)):n}},function(t,n,r){"use strict";var e=r(52),i=r(4),o=r(8),u=r(19),c=r(5)("isConcatSpreadable");t.exports=function t(n,r,a,f,s,l,h,p){for(var v,d,g=s,y=0,m=!!h&&u(h,p,3);y<f;){if(y in a){if(v=m?m(a[y],y,r):a[y],d=!1,i(v)&&(d=void 0!==(d=v[c])?!!d:e(v)),d&&l>0)g=t(n,r,v,o(v.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();n[g]=v}g++}y++}return g}},function(t,n,r){var e=r(8),i=r(72),o=r(23);t.exports=function(t,n,r,u){var c=String(o(t)),a=c.length,f=void 0===r?" ":String(r),s=e(n);if(s<=a||""==f)return c;var l=s-a,h=i.call(f,Math.ceil(l/f.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},function(t,n,r){var e=r(34),i=r(15),o=r(47).f;t.exports=function(t){return function(n){for(var r,u=i(n),c=e(u),a=c.length,f=0,s=[];a>f;)o.call(u,r=c[f++])&&s.push(t?[r,u[r]]:u[r]);return s}}},function(t,n,r){var e=r(48),i=r(123);t.exports=function(t){return function(){if(e(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,n,r){var e=r(40);t.exports=function(t,n){var r=[];return e(t,!1,r.push,r,n),r}},function(t,n){t.exports=Math.scale||function(t,n,r,e,i){return 0===arguments.length||t!=t||n!=n||r!=r||e!=e||i!=i?NaN:t===1/0||t===-1/0?t:(t-n)*(i-e)/(r-n)+e}},function(t,n,r){r(126),t.exports=r(328)},function(t,n,r){"use strict";(function(t){if(r(127),r(324),r(325),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var n="defineProperty";function e(t,r,e){t[r]||Object[n](t,r,{writable:!0,configurable:!0,value:e})}e(String.prototype,"padLeft","".padStart),e(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&e(Array,t,Function.call.bind([][t]))})}).call(this,r(90))},function(t,n,r){r(128),r(130),r(131),r(132),r(133),r(134),r(135),r(136),r(137),r(138),r(139),r(140),r(141),r(142),r(143),r(144),r(146),r(147),r(148),r(149),r(150),r(151),r(152),r(153),r(154),r(155),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(174),r(175),r(176),r(177),r(178),r(179),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(208),r(209),r(211),r(212),r(213),r(214),r(215),r(216),r(217),r(219),r(220),r(221),r(222),r(223),r(224),r(225),r(226),r(227),r(228),r(229),r(230),r(231),r(85),r(232),r(233),r(109),r(234),r(235),r(236),r(237),r(238),r(112),r(114),r(115),r(239),r(240),r(241),r(242),r(243),r(244),r(245),r(246),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(255),r(256),r(257),r(258),r(259),r(260),r(261),r(262),r(263),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),r(276),r(277),r(278),r(279),r(280),r(281),r(282),r(283),r(284),r(285),r(286),r(287),r(288),r(289),r(290),r(291),r(292),r(293),r(294),r(295),r(296),r(297),r(298),r(299),r(300),r(301),r(302),r(303),r(304),r(305),r(306),r(307),r(308),r(309),r(310),r(311),r(312),r(313),r(314),r(315),r(316),r(317),r(318),r(319),r(320),r(321),r(322),r(323),t.exports=r(18)},function(t,n,r){"use strict";var e=r(2),i=r(14),o=r(6),u=r(0),c=r(12),a=r(29).KEY,f=r(3),s=r(49),l=r(42),h=r(33),p=r(5),v=r(92),d=r(65),g=r(129),y=r(52),m=r(1),w=r(4),b=r(15),S=r(22),x=r(32),_=r(36),E=r(95),O=r(16),M=r(7),A=r(34),j=O.f,P=M.f,F=E.f,k=e.Symbol,N=e.JSON,I=N&&N.stringify,T=p("_hidden"),R=p("toPrimitive"),L={}.propertyIsEnumerable,C=s("symbol-registry"),D=s("symbols"),$=s("op-symbols"),W=Object.prototype,B="function"==typeof k,V=e.QObject,U=!V||!V.prototype||!V.prototype.findChild,G=o&&f(function(){return 7!=_(P({},"a",{get:function(){return P(this,"a",{value:7}).a}})).a})?function(t,n,r){var e=j(W,n);e&&delete W[n],P(t,n,r),e&&t!==W&&P(W,n,e)}:P,H=function(t){var n=D[t]=_(k.prototype);return n._k=t,n},q=B&&"symbol"==typeof k.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof k},z=function(t,n,r){return t===W&&z($,n,r),m(t),n=S(n,!0),m(r),i(D,n)?(r.enumerable?(i(t,T)&&t[T][n]&&(t[T][n]=!1),r=_(r,{enumerable:x(0,!1)})):(i(t,T)||P(t,T,x(1,{})),t[T][n]=!0),G(t,n,r)):P(t,n,r)},J=function(t,n){m(t);for(var r,e=g(n=b(n)),i=0,o=e.length;o>i;)z(t,r=e[i++],n[r]);return t},Y=function(t){var n=L.call(this,t=S(t,!0));return!(this===W&&i(D,t)&&!i($,t))&&(!(n||!i(this,t)||!i(D,t)||i(this,T)&&this[T][t])||n)},K=function(t,n){if(t=b(t),n=S(n,!0),t!==W||!i(D,n)||i($,n)){var r=j(t,n);return!r||!i(D,n)||i(t,T)&&t[T][n]||(r.enumerable=!0),r}},X=function(t){for(var n,r=F(b(t)),e=[],o=0;r.length>o;)i(D,n=r[o++])||n==T||n==a||e.push(n);return e},Z=function(t){for(var n,r=t===W,e=F(r?$:b(t)),o=[],u=0;e.length>u;)!i(D,n=e[u++])||r&&!i(W,n)||o.push(D[n]);return o};B||(c((k=function(){if(this instanceof k)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(r){this===W&&n.call($,r),i(this,T)&&i(this[T],t)&&(this[T][t]=!1),G(this,t,x(1,r))};return o&&U&&G(W,t,{configurable:!0,set:n}),H(t)}).prototype,"toString",function(){return this._k}),O.f=K,M.f=z,r(37).f=E.f=X,r(47).f=Y,r(51).f=Z,o&&!r(30)&&c(W,"propertyIsEnumerable",Y,!0),v.f=function(t){return H(p(t))}),u(u.G+u.W+u.F*!B,{Symbol:k});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var nt=A(p.store),rt=0;nt.length>rt;)d(nt[rt++]);u(u.S+u.F*!B,"Symbol",{for:function(t){return i(C,t+="")?C[t]:C[t]=k(t)},keyFor:function(t){if(!q(t))throw TypeError(t+" is not a symbol!");for(var n in C)if(C[n]===t)return n},useSetter:function(){U=!0},useSimple:function(){U=!1}}),u(u.S+u.F*!B,"Object",{create:function(t,n){return void 0===n?_(t):J(_(t),n)},defineProperty:z,defineProperties:J,getOwnPropertyDescriptor:K,getOwnPropertyNames:X,getOwnPropertySymbols:Z}),N&&u(u.S+u.F*(!B||f(function(){var t=k();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))})),"JSON",{stringify:function(t){for(var n,r,e=[t],i=1;arguments.length>i;)e.push(arguments[i++]);if(r=n=e[1],(w(n)||void 0!==t)&&!q(t))return y(n)||(n=function(t,n){if("function"==typeof r&&(n=r.call(this,t,n)),!q(n))return n}),e[1]=n,I.apply(N,e)}}),k.prototype[R]||r(11)(k.prototype,R,k.prototype.valueOf),l(k,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},function(t,n,r){var e=r(34),i=r(51),o=r(47);t.exports=function(t){var n=e(t),r=i.f;if(r)for(var u,c=r(t),a=o.f,f=0;c.length>f;)a.call(t,u=c[f++])&&n.push(u);return n}},function(t,n,r){var e=r(0);e(e.S,"Object",{create:r(36)})},function(t,n,r){var e=r(0);e(e.S+e.F*!r(6),"Object",{defineProperty:r(7).f})},function(t,n,r){var e=r(0);e(e.S+e.F*!r(6),"Object",{defineProperties:r(94)})},function(t,n,r){var e=r(15),i=r(16).f;r(25)("getOwnPropertyDescriptor",function(){return function(t,n){return i(e(t),n)}})},function(t,n,r){var e=r(9),i=r(17);r(25)("getPrototypeOf",function(){return function(t){return i(e(t))}})},function(t,n,r){var e=r(9),i=r(34);r(25)("keys",function(){return function(t){return i(e(t))}})},function(t,n,r){r(25)("getOwnPropertyNames",function(){return r(95).f})},function(t,n,r){var e=r(4),i=r(29).onFreeze;r(25)("freeze",function(t){return function(n){return t&&e(n)?t(i(n)):n}})},function(t,n,r){var e=r(4),i=r(29).onFreeze;r(25)("seal",function(t){return function(n){return t&&e(n)?t(i(n)):n}})},function(t,n,r){var e=r(4),i=r(29).onFreeze;r(25)("preventExtensions",function(t){return function(n){return t&&e(n)?t(i(n)):n}})},function(t,n,r){var e=r(4);r(25)("isFrozen",function(t){return function(n){return!e(n)||!!t&&t(n)}})},function(t,n,r){var e=r(4);r(25)("isSealed",function(t){return function(n){return!e(n)||!!t&&t(n)}})},function(t,n,r){var e=r(4);r(25)("isExtensible",function(t){return function(n){return!!e(n)&&(!t||t(n))}})},function(t,n,r){var e=r(0);e(e.S+e.F,"Object",{assign:r(96)})},function(t,n,r){var e=r(0);e(e.S,"Object",{is:r(145)})},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,r){var e=r(0);e(e.S,"Object",{setPrototypeOf:r(69).set})},function(t,n,r){"use strict";var e=r(48),i={};i[r(5)("toStringTag")]="z",i+""!="[object z]"&&r(12)(Object.prototype,"toString",function(){return"[object "+e(this)+"]"},!0)},function(t,n,r){var e=r(0);e(e.P,"Function",{bind:r(97)})},function(t,n,r){var e=r(7).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||r(6)&&e(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,n,r){"use strict";var e=r(4),i=r(17),o=r(5)("hasInstance"),u=Function.prototype;o in u||r(7).f(u,o,{value:function(t){if("function"!=typeof this||!e(t))return!1;if(!e(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,r){var e=r(0),i=r(99);e(e.G+e.F*(parseInt!=i),{parseInt:i})},function(t,n,r){var e=r(0),i=r(100);e(e.G+e.F*(parseFloat!=i),{parseFloat:i})},function(t,n,r){"use strict";var e=r(2),i=r(14),o=r(20),u=r(71),c=r(22),a=r(3),f=r(37).f,s=r(16).f,l=r(7).f,h=r(43).trim,p=e.Number,v=p,d=p.prototype,g="Number"==o(r(36)(d)),y="trim"in String.prototype,m=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){var r,e,i,o=(n=y?n.trim():h(n,3)).charCodeAt(0);if(43===o||45===o){if(88===(r=n.charCodeAt(2))||120===r)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:e=2,i=49;break;case 79:case 111:e=8,i=55;break;default:return+n}for(var u,a=n.slice(2),f=0,s=a.length;f<s;f++)if((u=a.charCodeAt(f))<48||u>i)return NaN;return parseInt(a,e)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,r=this;return r instanceof p&&(g?a(function(){d.valueOf.call(r)}):"Number"!=o(r))?u(new v(m(n)),r,p):m(n)};for(var w,b=r(6)?f(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;b.length>S;S++)i(v,w=b[S])&&!i(p,w)&&l(p,w,s(v,w));p.prototype=d,d.constructor=p,r(12)(e,"Number",p)}},function(t,n,r){"use strict";var e=r(0),i=r(24),o=r(101),u=r(72),c=1..toFixed,a=Math.floor,f=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",l=function(t,n){for(var r=-1,e=n;++r<6;)e+=t*f[r],f[r]=e%1e7,e=a(e/1e7)},h=function(t){for(var n=6,r=0;--n>=0;)r+=f[n],f[n]=a(r/t),r=r%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==f[t]){var r=String(f[t]);n=""===n?r:n+u.call("0",7-r.length)+r}return n},v=function(t,n,r){return 0===n?r:n%2==1?v(t,n-1,r*t):v(t*t,n/2,r)};e(e.P+e.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(3)(function(){c.call({})})),"Number",{toFixed:function(t){var n,r,e,c,a=o(this,s),f=i(t),d="",g="0";if(f<0||f>20)throw RangeError(s);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(d="-",a=-a),a>1e-21)if(r=(n=function(t){for(var n=0,r=t;r>=4096;)n+=12,r/=4096;for(;r>=2;)n+=1,r/=2;return n}(a*v(2,69,1))-69)<0?a*v(2,-n,1):a/v(2,n,1),r*=4503599627370496,(n=52-n)>0){for(l(0,r),e=f;e>=7;)l(1e7,0),e-=7;for(l(v(10,e,1),0),e=n-1;e>=23;)h(1<<23),e-=23;h(1<<e),l(1,1),h(2),g=p()}else l(0,r),l(1<<-n,0),g=p()+u.call("0",f);return g=f>0?d+((c=g.length)<=f?"0."+u.call("0",f-c)+g:g.slice(0,c-f)+"."+g.slice(c-f)):d+g}})},function(t,n,r){"use strict";var e=r(0),i=r(3),o=r(101),u=1..toPrecision;e(e.P+e.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,r){var e=r(0);e(e.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,r){var e=r(0),i=r(2).isFinite;e(e.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,n,r){var e=r(0);e(e.S,"Number",{isInteger:r(102)})},function(t,n,r){var e=r(0);e(e.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,r){var e=r(0),i=r(102),o=Math.abs;e(e.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,n,r){var e=r(0);e(e.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,r){var e=r(0);e(e.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,r){var e=r(0),i=r(100);e(e.S+e.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,n,r){var e=r(0),i=r(99);e(e.S+e.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,n,r){var e=r(0),i=r(103),o=Math.sqrt,u=Math.acosh;e(e.S+e.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,n,r){var e=r(0),i=Math.asinh;e(e.S+e.F*!(i&&1/i(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,r){var e=r(0),i=Math.atanh;e(e.S+e.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,r){var e=r(0),i=r(73);e(e.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,r){var e=r(0),i=Math.exp;e(e.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,n,r){var e=r(0),i=r(74);e(e.S+e.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,n,r){var e=r(0);e(e.S,"Math",{fround:r(104)})},function(t,n,r){var e=r(0),i=Math.abs;e(e.S,"Math",{hypot:function(t,n){for(var r,e,o=0,u=0,c=arguments.length,a=0;u<c;)a<(r=i(arguments[u++]))?(o=o*(e=a/r)*e+1,a=r):o+=r>0?(e=r/a)*e:r;return a===1/0?1/0:a*Math.sqrt(o)}})},function(t,n,r){var e=r(0),i=Math.imul;e(e.S+e.F*r(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var r=+t,e=+n,i=65535&r,o=65535&e;return 0|i*o+((65535&r>>>16)*o+i*(65535&e>>>16)<<16>>>0)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,r){var e=r(0);e(e.S,"Math",{log1p:r(103)})},function(t,n,r){var e=r(0);e(e.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,r){var e=r(0);e(e.S,"Math",{sign:r(73)})},function(t,n,r){var e=r(0),i=r(74),o=Math.exp;e(e.S+e.F*r(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,n,r){var e=r(0),i=r(74),o=Math.exp;e(e.S,"Math",{tanh:function(t){var n=i(t=+t),r=i(-t);return n==1/0?1:r==1/0?-1:(n-r)/(o(t)+o(-t))}})},function(t,n,r){var e=r(0);e(e.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,r){var e=r(0),i=r(35),o=String.fromCharCode,u=String.fromCodePoint;e(e.S+e.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,r=[],e=arguments.length,u=0;e>u;){if(n=+arguments[u++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");r.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return r.join("")}})},function(t,n,r){var e=r(0),i=r(15),o=r(8);e(e.S,"String",{raw:function(t){for(var n=i(t.raw),r=o(n.length),e=arguments.length,u=[],c=0;r>c;)u.push(String(n[c++])),c<e&&u.push(String(arguments[c]));return u.join("")}})},function(t,n,r){"use strict";r(43)("trim",function(t){return function(){return t(this,3)}})},function(t,n,r){"use strict";var e=r(75)(!0);r(76)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,r=this._i;return r>=n.length?{value:void 0,done:!0}:(t=e(n,r),this._i+=t.length,{value:t,done:!1})})},function(t,n,r){"use strict";var e=r(0),i=r(75)(!1);e(e.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,n,r){"use strict";var e=r(0),i=r(8),o=r(78),u="".endsWith;e(e.P+e.F*r(79)("endsWith"),"String",{endsWith:function(t){var n=o(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,e=i(n.length),c=void 0===r?e:Math.min(i(r),e),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},function(t,n,r){"use strict";var e=r(0),i=r(78);e(e.P+e.F*r(79)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,r){var e=r(0);e(e.P,"String",{repeat:r(72)})},function(t,n,r){"use strict";var e=r(0),i=r(8),o=r(78),u="".startsWith;e(e.P+e.F*r(79)("startsWith"),"String",{startsWith:function(t){var n=o(this,t,"startsWith"),r=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),e=String(t);return u?u.call(n,e,r):n.slice(r,r+e.length)===e}})},function(t,n,r){"use strict";r(13)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,r){"use strict";r(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,r){"use strict";r(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,r){"use strict";r(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,r){"use strict";r(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,r){"use strict";r(13)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,r){"use strict";r(13)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,r){"use strict";r(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,r){"use strict";r(13)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,r){"use strict";r(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,r){"use strict";r(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,r){"use strict";r(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,r){"use strict";r(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,r){var e=r(0);e(e.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(22);e(e.P+e.F*r(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),r=o(n);return"number"!=typeof r||isFinite(r)?n.toISOString():null}})},function(t,n,r){var e=r(0),i=r(207);e(e.P+e.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,n,r){"use strict";var e=r(3),i=Date.prototype.getTime,o=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=e(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!e(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),r=t.getUTCMilliseconds(),e=n<0?"-":n>9999?"+":"";return e+("00000"+Math.abs(n)).slice(e?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(r>99?r:"0"+u(r))+"Z"}:o},function(t,n,r){var e=Date.prototype,i=e.toString,o=e.getTime;new Date(NaN)+""!="Invalid Date"&&r(12)(e,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,r){var e=r(5)("toPrimitive"),i=Date.prototype;e in i||r(11)(i,e,r(210))},function(t,n,r){"use strict";var e=r(1),i=r(22);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(e(this),"number"!=t)}},function(t,n,r){var e=r(0);e(e.S,"Array",{isArray:r(52)})},function(t,n,r){"use strict";var e=r(19),i=r(0),o=r(9),u=r(105),c=r(80),a=r(8),f=r(81),s=r(82);i(i.S+i.F*!r(54)(function(t){Array.from(t)}),"Array",{from:function(t){var n,r,i,l,h=o(t),p="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,g=void 0!==d,y=0,m=s(h);if(g&&(d=e(d,v>2?arguments[2]:void 0,2)),null==m||p==Array&&c(m))for(r=new p(n=a(h.length));n>y;y++)f(r,y,g?d(h[y],y):h[y]);else for(l=m.call(h),r=new p;!(i=l.next()).done;y++)f(r,y,g?u(l,d,[i.value,y],!0):i.value);return r.length=y,r}})},function(t,n,r){"use strict";var e=r(0),i=r(81);e(e.S+e.F*r(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,r=new("function"==typeof this?this:Array)(n);n>t;)i(r,t,arguments[t++]);return r.length=n,r}})},function(t,n,r){"use strict";var e=r(0),i=r(15),o=[].join;e(e.P+e.F*(r(46)!=Object||!r(21)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,n,r){"use strict";var e=r(0),i=r(68),o=r(20),u=r(35),c=r(8),a=[].slice;e(e.P+e.F*r(3)(function(){i&&a.call(i)}),"Array",{slice:function(t,n){var r=c(this.length),e=o(this);if(n=void 0===n?r:n,"Array"==e)return a.call(this,t,n);for(var i=u(t,r),f=u(n,r),s=c(f-i),l=new Array(s),h=0;h<s;h++)l[h]="String"==e?this.charAt(i+h):this[i+h];return l}})},function(t,n,r){"use strict";var e=r(0),i=r(10),o=r(9),u=r(3),c=[].sort,a=[1,2,3];e(e.P+e.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!r(21)(c)),"Array",{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},function(t,n,r){"use strict";var e=r(0),i=r(26)(0),o=r(21)([].forEach,!0);e(e.P+e.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,r){var e=r(4),i=r(52),o=r(5)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),e(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,r){"use strict";var e=r(0),i=r(26)(1);e(e.P+e.F*!r(21)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(26)(2);e(e.P+e.F*!r(21)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(26)(3);e(e.P+e.F*!r(21)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(26)(4);e(e.P+e.F*!r(21)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(106);e(e.P+e.F*!r(21)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,n,r){"use strict";var e=r(0),i=r(106);e(e.P+e.F*!r(21)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,n,r){"use strict";var e=r(0),i=r(50)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;e(e.P+e.F*(u||!r(21)(o)),"Array",{indexOf:function(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(15),o=r(24),u=r(8),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;e(e.P+e.F*(a||!r(21)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=i(this),r=u(n.length),e=r-1;for(arguments.length>1&&(e=Math.min(e,o(arguments[1]))),e<0&&(e=r+e);e>=0;e--)if(e in n&&n[e]===t)return e||0;return-1}})},function(t,n,r){var e=r(0);e(e.P,"Array",{copyWithin:r(107)}),r(31)("copyWithin")},function(t,n,r){var e=r(0);e(e.P,"Array",{fill:r(84)}),r(31)("fill")},function(t,n,r){"use strict";var e=r(0),i=r(26)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),e(e.P+e.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("find")},function(t,n,r){"use strict";var e=r(0),i=r(26)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),e(e.P+e.F*u,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)(o)},function(t,n,r){r(38)("Array")},function(t,n,r){var e=r(2),i=r(71),o=r(7).f,u=r(37).f,c=r(53),a=r(55),f=e.RegExp,s=f,l=f.prototype,h=/a/g,p=/a/g,v=new f(h)!==h;if(r(6)&&(!v||r(3)(function(){return p[r(5)("match")]=!1,f(h)!=h||f(p)==p||"/a/i"!=f(h,"i")}))){f=function(t,n){var r=this instanceof f,e=c(t),o=void 0===n;return!r&&e&&t.constructor===f&&o?t:i(v?new s(e&&!o?t.source:t,n):s((e=t instanceof f)?t.source:t,e&&o?a.call(t):n),r?this:l,f)};for(var d=function(t){t in f||o(f,t,{configurable:!0,get:function(){return s[t]},set:function(n){s[t]=n}})},g=u(s),y=0;g.length>y;)d(g[y++]);l.constructor=f,f.prototype=l,r(12)(e,"RegExp",f)}r(38)("RegExp")},function(t,n,r){"use strict";r(109);var e=r(1),i=r(55),o=r(6),u=/./.toString,c=function(t){r(12)(RegExp.prototype,"toString",t,!0)};r(3)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function(){var t=e(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&c(function(){return u.call(this)})},function(t,n,r){r(56)("match",1,function(t,n,r){return[function(r){"use strict";var e=t(this),i=null==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},function(t,n,r){r(56)("replace",2,function(t,n,r){return[function(e,i){"use strict";var o=t(this),u=null==e?void 0:e[n];return void 0!==u?u.call(e,o,i):r.call(String(o),e,i)},r]})},function(t,n,r){r(56)("search",1,function(t,n,r){return[function(r){"use strict";var e=t(this),i=null==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},function(t,n,r){r(56)("split",2,function(t,n,e){"use strict";var i=r(53),o=e,u=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var c=void 0===/()??/.exec("")[1];e=function(t,n){var r=String(this);if(void 0===t&&0===n)return[];if(!i(t))return o.call(r,t,n);var e,a,f,s,l,h=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),v=0,d=void 0===n?4294967295:n>>>0,g=new RegExp(t.source,p+"g");for(c||(e=new RegExp("^"+g.source+"$(?!\\s)",p));(a=g.exec(r))&&!((f=a.index+a[0].length)>v&&(h.push(r.slice(v,a.index)),!c&&a.length>1&&a[0].replace(e,function(){for(l=1;l<arguments.length-2;l++)void 0===arguments[l]&&(a[l]=void 0)}),a.length>1&&a.index<r.length&&u.apply(h,a.slice(1)),s=a[0].length,v=f,h.length>=d));)g.lastIndex===a.index&&g.lastIndex++;return v===r.length?!s&&g.test("")||h.push(""):h.push(r.slice(v)),h.length>d?h.slice(0,d):h}}else"0".split(void 0,0).length&&(e=function(t,n){return void 0===t&&0===n?[]:o.call(this,t,n)});return[function(r,i){var o=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,o,i):e.call(String(o),r,i)},e]})},function(t,n,r){"use strict";var e,i,o,u,c=r(30),a=r(2),f=r(19),s=r(48),l=r(0),h=r(4),p=r(10),v=r(39),d=r(40),g=r(57),y=r(86).set,m=r(87)(),w=r(88),b=r(110),S=r(58),x=r(111),_=a.TypeError,E=a.process,O=E&&E.versions,M=O&&O.v8||"",A=a.Promise,j="process"==s(E),P=function(){},F=i=w.f,k=!!function(){try{var t=A.resolve(1),n=(t.constructor={})[r(5)("species")]=function(t){t(P,P)};return(j||"function"==typeof PromiseRejectionEvent)&&t.then(P)instanceof n&&0!==M.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(t){}}(),N=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},I=function(t,n){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var e=t._v,i=1==t._s,o=0,u=function(n){var r,o,u,c=i?n.ok:n.fail,a=n.resolve,f=n.reject,s=n.domain;try{c?(i||(2==t._h&&L(t),t._h=1),!0===c?r=e:(s&&s.enter(),r=c(e),s&&(s.exit(),u=!0)),r===n.promise?f(_("Promise-chain cycle")):(o=N(r))?o.call(r,a,f):a(r)):f(e)}catch(t){s&&!u&&s.exit(),f(t)}};r.length>o;)u(r[o++]);t._c=[],t._n=!1,n&&!t._h&&T(t)})}},T=function(t){y.call(a,function(){var n,r,e,i=t._v,o=R(t);if(o&&(n=b(function(){j?E.emit("unhandledRejection",i,t):(r=a.onunhandledrejection)?r({promise:t,reason:i}):(e=a.console)&&e.error&&e.error("Unhandled promise rejection",i)}),t._h=j||R(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){y.call(a,function(){var n;j?E.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})})},C=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),I(n,!0))},D=function(t){var n,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw _("Promise can't be resolved itself");(n=N(t))?m(function(){var e={_w:r,_d:!1};try{n.call(t,f(D,e,1),f(C,e,1))}catch(t){C.call(e,t)}}):(r._v=t,r._s=1,I(r,!1))}catch(t){C.call({_w:r,_d:!1},t)}}};k||(A=function(t){v(this,A,"Promise","_h"),p(t),e.call(this);try{t(f(D,this,1),f(C,this,1))}catch(t){C.call(this,t)}},(e=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(41)(A.prototype,{then:function(t,n){var r=F(g(this,A));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=j?E.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&I(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new e;this.promise=t,this.resolve=f(D,t,1),this.reject=f(C,t,1)},w.f=F=function(t){return t===A||t===u?new o(t):i(t)}),l(l.G+l.W+l.F*!k,{Promise:A}),r(42)(A,"Promise"),r(38)("Promise"),u=r(18).Promise,l(l.S+l.F*!k,"Promise",{reject:function(t){var n=F(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!k),"Promise",{resolve:function(t){return x(c&&this===u?A:this,t)}}),l(l.S+l.F*!(k&&r(54)(function(t){A.all(t).catch(P)})),"Promise",{all:function(t){var n=this,r=F(n),e=r.resolve,i=r.reject,o=b(function(){var r=[],o=0,u=1;d(t,!1,function(t){var c=o++,a=!1;r.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,r[c]=t,--u||e(r))},i)}),--u||e(r)});return o.e&&i(o.v),r.promise},race:function(t){var n=this,r=F(n),e=r.reject,i=b(function(){d(t,!1,function(t){n.resolve(t).then(r.resolve,e)})});return i.e&&e(i.v),r.promise}})},function(t,n,r){"use strict";var e=r(116),i=r(45);r(59)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return e.def(i(this,"WeakSet"),t,!0)}},e,!1,!0)},function(t,n,r){"use strict";var e=r(0),i=r(60),o=r(89),u=r(1),c=r(35),a=r(8),f=r(4),s=r(2).ArrayBuffer,l=r(57),h=o.ArrayBuffer,p=o.DataView,v=i.ABV&&s.isView,d=h.prototype.slice,g=i.VIEW;e(e.G+e.W+e.F*(s!==h),{ArrayBuffer:h}),e(e.S+e.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||f(t)&&g in t}}),e(e.P+e.U+e.F*r(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==d&&void 0===n)return d.call(u(this),t);for(var r=u(this).byteLength,e=c(t,r),i=c(void 0===n?r:n,r),o=new(l(this,h))(a(i-e)),f=new p(this),s=new p(o),v=0;e<i;)s.setUint8(v++,f.getUint8(e++));return o}}),r(38)("ArrayBuffer")},function(t,n,r){var e=r(0);e(e.G+e.W+e.F*!r(60).ABV,{DataView:r(89).DataView})},function(t,n,r){r(27)("Int8",1,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Uint8",1,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Uint8",1,function(t){return function(n,r,e){return t(this,n,r,e)}},!0)},function(t,n,r){r(27)("Int16",2,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Uint16",2,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Int32",4,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Uint32",4,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Float32",4,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Float64",8,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){var e=r(0),i=r(10),o=r(1),u=(r(2).Reflect||{}).apply,c=Function.apply;e(e.S+e.F*!r(3)(function(){u(function(){})}),"Reflect",{apply:function(t,n,r){var e=i(t),a=o(r);return u?u(e,n,a):c.call(e,n,a)}})},function(t,n,r){var e=r(0),i=r(36),o=r(10),u=r(1),c=r(4),a=r(3),f=r(97),s=(r(2).Reflect||{}).construct,l=a(function(){function t(){}return!(s(function(){},[],t)instanceof t)}),h=!a(function(){s(function(){})});e(e.S+e.F*(l||h),"Reflect",{construct:function(t,n){o(t),u(n);var r=arguments.length<3?t:o(arguments[2]);if(h&&!l)return s(t,n,r);if(t==r){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var e=[null];return e.push.apply(e,n),new(f.apply(t,e))}var a=r.prototype,p=i(c(a)?a:Object.prototype),v=Function.apply.call(t,p,n);return c(v)?v:p}})},function(t,n,r){var e=r(7),i=r(0),o=r(1),u=r(22);i(i.S+i.F*r(3)(function(){Reflect.defineProperty(e.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,r){o(t),n=u(n,!0),o(r);try{return e.f(t,n,r),!0}catch(t){return!1}}})},function(t,n,r){var e=r(0),i=r(16).f,o=r(1);e(e.S,"Reflect",{deleteProperty:function(t,n){var r=i(o(t),n);return!(r&&!r.configurable)&&delete t[n]}})},function(t,n,r){"use strict";var e=r(0),i=r(1),o=function(t){this._t=i(t),this._i=0;var n,r=this._k=[];for(n in t)r.push(n)};r(77)(o,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),e(e.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,n,r){var e=r(16),i=r(17),o=r(14),u=r(0),c=r(4),a=r(1);u(u.S,"Reflect",{get:function t(n,r){var u,f,s=arguments.length<3?n:arguments[2];return a(n)===s?n[r]:(u=e.f(n,r))?o(u,"value")?u.value:void 0!==u.get?u.get.call(s):void 0:c(f=i(n))?t(f,r,s):void 0}})},function(t,n,r){var e=r(16),i=r(0),o=r(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return e.f(o(t),n)}})},function(t,n,r){var e=r(0),i=r(17),o=r(1);e(e.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,n,r){var e=r(0);e(e.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,r){var e=r(0),i=r(1),o=Object.isExtensible;e(e.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,n,r){var e=r(0);e(e.S,"Reflect",{ownKeys:r(118)})},function(t,n,r){var e=r(0),i=r(1),o=Object.preventExtensions;e(e.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,n,r){var e=r(7),i=r(16),o=r(17),u=r(14),c=r(0),a=r(32),f=r(1),s=r(4);c(c.S,"Reflect",{set:function t(n,r,c){var l,h,p=arguments.length<4?n:arguments[3],v=i.f(f(n),r);if(!v){if(s(h=o(n)))return t(h,r,c,p);v=a(0)}if(u(v,"value")){if(!1===v.writable||!s(p))return!1;if(l=i.f(p,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=c,e.f(p,r,l)}else e.f(p,r,a(0,c));return!0}return void 0!==v.set&&(v.set.call(p,c),!0)}})},function(t,n,r){var e=r(0),i=r(69);i&&e(e.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},function(t,n,r){"use strict";var e=r(0),i=r(50)(!0);e(e.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("includes")},function(t,n,r){"use strict";var e=r(0),i=r(119),o=r(9),u=r(8),c=r(10),a=r(83);e(e.P,"Array",{flatMap:function(t){var n,r,e=o(this);return c(t),n=u(e.length),r=a(e,0),i(r,e,e,n,0,1,t,arguments[1]),r}}),r(31)("flatMap")},function(t,n,r){"use strict";var e=r(0),i=r(119),o=r(9),u=r(8),c=r(24),a=r(83);e(e.P,"Array",{flatten:function(){var t=arguments[0],n=o(this),r=u(n.length),e=a(n,0);return i(e,n,n,r,0,void 0===t?1:c(t)),e}}),r(31)("flatten")},function(t,n,r){"use strict";var e=r(0),i=r(75)(!0);e(e.P,"String",{at:function(t){return i(this,t)}})},function(t,n,r){"use strict";var e=r(0),i=r(120),o=r(58);e(e.P+e.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,r){"use strict";var e=r(0),i=r(120),o=r(58);e(e.P+e.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,r){"use strict";r(43)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,r){"use strict";r(43)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,r){"use strict";var e=r(0),i=r(23),o=r(8),u=r(53),c=r(55),a=RegExp.prototype,f=function(t,n){this._r=t,this._s=n};r(77)(f,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),e(e.P,"String",{matchAll:function(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),r="flags"in a?String(t.flags):c.call(t),e=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return e.lastIndex=o(t.lastIndex),new f(e,n)}})},function(t,n,r){r(65)("asyncIterator")},function(t,n,r){r(65)("observable")},function(t,n,r){var e=r(0),i=r(118),o=r(15),u=r(16),c=r(81);e(e.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,r,e=o(t),a=u.f,f=i(e),s={},l=0;f.length>l;)void 0!==(r=a(e,n=f[l++]))&&c(s,n,r);return s}})},function(t,n,r){var e=r(0),i=r(121)(!1);e(e.S,"Object",{values:function(t){return i(t)}})},function(t,n,r){var e=r(0),i=r(121)(!0);e(e.S,"Object",{entries:function(t){return i(t)}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(10),u=r(7);r(6)&&e(e.P+r(61),"Object",{__defineGetter__:function(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(10),u=r(7);r(6)&&e(e.P+r(61),"Object",{__defineSetter__:function(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(22),u=r(17),c=r(16).f;r(6)&&e(e.P+r(61),"Object",{__lookupGetter__:function(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.get}while(r=u(r))}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(22),u=r(17),c=r(16).f;r(6)&&e(e.P+r(61),"Object",{__lookupSetter__:function(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.set}while(r=u(r))}})},function(t,n,r){var e=r(0);e(e.P+e.R,"Map",{toJSON:r(122)("Map")})},function(t,n,r){var e=r(0);e(e.P+e.R,"Set",{toJSON:r(122)("Set")})},function(t,n,r){r(62)("Map")},function(t,n,r){r(62)("Set")},function(t,n,r){r(62)("WeakMap")},function(t,n,r){r(62)("WeakSet")},function(t,n,r){r(63)("Map")},function(t,n,r){r(63)("Set")},function(t,n,r){r(63)("WeakMap")},function(t,n,r){r(63)("WeakSet")},function(t,n,r){var e=r(0);e(e.G,{global:r(2)})},function(t,n,r){var e=r(0);e(e.S,"System",{global:r(2)})},function(t,n,r){var e=r(0),i=r(20);e(e.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{clamp:function(t,n,r){return Math.min(r,Math.max(n,t))}})},function(t,n,r){var e=r(0);e(e.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,n,r){var e=r(0),i=180/Math.PI;e(e.S,"Math",{degrees:function(t){return t*i}})},function(t,n,r){var e=r(0),i=r(124),o=r(104);e(e.S,"Math",{fscale:function(t,n,r,e,u){return o(i(t,n,r,e,u))}})},function(t,n,r){var e=r(0);e(e.S,"Math",{iaddh:function(t,n,r,e){var i=t>>>0,o=r>>>0;return(n>>>0)+(e>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},function(t,n,r){var e=r(0);e(e.S,"Math",{isubh:function(t,n,r,e){var i=t>>>0,o=r>>>0;return(n>>>0)-(e>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},function(t,n,r){var e=r(0);e(e.S,"Math",{imulh:function(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>16,c=e>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>16)+((i*c>>>0)+(65535&a)>>16)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,n,r){var e=r(0),i=Math.PI/180;e(e.S,"Math",{radians:function(t){return t*i}})},function(t,n,r){var e=r(0);e(e.S,"Math",{scale:r(124)})},function(t,n,r){var e=r(0);e(e.S,"Math",{umulh:function(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>>16,c=e>>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>>16)+((i*c>>>0)+(65535&a)>>>16)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,n,r){"use strict";var e=r(0),i=r(18),o=r(2),u=r(57),c=r(111);e(e.P+e.R,"Promise",{finally:function(t){var n=u(this,i.Promise||o.Promise),r="function"==typeof t;return this.then(r?function(r){return c(n,t()).then(function(){return r})}:t,r?function(r){return c(n,t()).then(function(){throw r})}:t)}})},function(t,n,r){"use strict";var e=r(0),i=r(88),o=r(110);e(e.S,"Promise",{try:function(t){var n=i.f(this),r=o(t);return(r.e?n.reject:n.resolve)(r.v),n.promise}})},function(t,n,r){var e=r(28),i=r(1),o=e.key,u=e.set;e.exp({defineMetadata:function(t,n,r,e){u(t,n,i(r),o(e))}})},function(t,n,r){var e=r(28),i=r(1),o=e.key,u=e.map,c=e.store;e.exp({deleteMetadata:function(t,n){var r=arguments.length<3?void 0:o(arguments[2]),e=u(i(n),r,!1);if(void 0===e||!e.delete(t))return!1;if(e.size)return!0;var a=c.get(n);return a.delete(r),!!a.size||c.delete(n)}})},function(t,n,r){var e=r(28),i=r(1),o=r(17),u=e.has,c=e.get,a=e.key,f=function(t,n,r){if(u(t,n,r))return c(t,n,r);var e=o(n);return null!==e?f(t,e,r):void 0};e.exp({getMetadata:function(t,n){return f(t,i(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,r){var e=r(114),i=r(123),o=r(28),u=r(1),c=r(17),a=o.keys,f=o.key,s=function(t,n){var r=a(t,n),o=c(t);if(null===o)return r;var u=s(o,n);return u.length?r.length?i(new e(r.concat(u))):u:r};o.exp({getMetadataKeys:function(t){return s(u(t),arguments.length<2?void 0:f(arguments[1]))}})},function(t,n,r){var e=r(28),i=r(1),o=e.get,u=e.key;e.exp({getOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,r){var e=r(28),i=r(1),o=e.keys,u=e.key;e.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,n,r){var e=r(28),i=r(1),o=r(17),u=e.has,c=e.key,a=function(t,n,r){if(u(t,n,r))return!0;var e=o(n);return null!==e&&a(t,e,r)};e.exp({hasMetadata:function(t,n){return a(t,i(n),arguments.length<3?void 0:c(arguments[2]))}})},function(t,n,r){var e=r(28),i=r(1),o=e.has,u=e.key;e.exp({hasOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,r){var e=r(28),i=r(1),o=r(10),u=e.key,c=e.set;e.exp({metadata:function(t,n){return function(r,e){c(t,n,(void 0!==e?i:o)(r),u(e))}}})},function(t,n,r){var e=r(0),i=r(87)(),o=r(2).process,u="process"==r(20)(o);e(e.G,{asap:function(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},function(t,n,r){"use strict";var e=r(0),i=r(2),o=r(18),u=r(87)(),c=r(5)("observable"),a=r(10),f=r(1),s=r(39),l=r(41),h=r(11),p=r(40),v=p.RETURN,d=function(t){return null==t?void 0:a(t)},g=function(t){var n=t._c;n&&(t._c=void 0,n())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,g(t))},w=function(t,n){f(t),this._c=void 0,this._o=t,t=new b(this);try{var r=n(t),e=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){e.unsubscribe()}:a(r),this._c=r)}catch(n){return void t.error(n)}y(this)&&g(this)};w.prototype=l({},{unsubscribe:function(){m(this)}});var b=function(t){this._s=t};b.prototype=l({},{next:function(t){var n=this._s;if(!y(n)){var r=n._o;try{var e=d(r.next);if(e)return e.call(r,t)}catch(t){try{m(n)}finally{throw t}}}},error:function(t){var n=this._s;if(y(n))throw t;var r=n._o;n._o=void 0;try{var e=d(r.error);if(!e)throw t;t=e.call(r,t)}catch(t){try{g(n)}finally{throw t}}return g(n),t},complete:function(t){var n=this._s;if(!y(n)){var r=n._o;n._o=void 0;try{var e=d(r.complete);t=e?e.call(r,t):void 0}catch(t){try{g(n)}finally{throw t}}return g(n),t}}});var S=function(t){s(this,S,"Observable","_f")._f=a(t)};l(S.prototype,{subscribe:function(t){return new w(t,this._f)},forEach:function(t){var n=this;return new(o.Promise||i.Promise)(function(r,e){a(t);var i=n.subscribe({next:function(n){try{return t(n)}catch(t){e(t),i.unsubscribe()}},error:e,complete:r})})}}),l(S,{from:function(t){var n="function"==typeof this?this:S,r=d(f(t)[c]);if(r){var e=f(r.call(t));return e.constructor===n?e:new n(function(t){return e.subscribe(t)})}return new n(function(n){var r=!1;return u(function(){if(!r){try{if(p(t,!1,function(t){if(n.next(t),r)return v})===v)return}catch(t){if(r)throw t;return void n.error(t)}n.complete()}}),function(){r=!0}})},of:function(){for(var t=0,n=arguments.length,r=new Array(n);t<n;)r[t]=arguments[t++];return new("function"==typeof this?this:S)(function(t){var n=!1;return u(function(){if(!n){for(var e=0;e<r.length;++e)if(t.next(r[e]),n)return;t.complete()}}),function(){n=!0}})}}),h(S.prototype,c,function(){return this}),e(e.G,{Observable:S}),r(38)("Observable")},function(t,n,r){var e=r(2),i=r(0),o=r(58),u=[].slice,c=/MSIE .\./.test(o),a=function(t){return function(n,r){var e=arguments.length>2,i=!!e&&u.call(arguments,2);return t(e?function(){("function"==typeof n?n:Function(n)).apply(this,i)}:n,r)}};i(i.G+i.B+i.F*c,{setTimeout:a(e.setTimeout),setInterval:a(e.setInterval)})},function(t,n,r){var e=r(0),i=r(86);e(e.G+e.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,n,r){for(var e=r(85),i=r(34),o=r(12),u=r(2),c=r(11),a=r(44),f=r(5),s=f("iterator"),l=f("toStringTag"),h=a.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=i(p),d=0;d<v.length;d++){var g,y=v[d],m=p[y],w=u[y],b=w&&w.prototype;if(b&&(b[s]||c(b,s,h),b[l]||c(b,l,y),a[y]=h,m))for(g in e)b[g]||o(b,g,e[g],!0)}},function(t,n,r){(function(n){!function(n){"use strict";var r,e=Object.prototype,i=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag",f="object"==typeof t,s=n.regeneratorRuntime;if(s)f&&(t.exports=s);else{(s=n.regeneratorRuntime=f?t.exports:{}).wrap=b;var l="suspendedStart",h="suspendedYield",p="executing",v="completed",d={},g={};g[u]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(k([])));m&&m!==e&&i.call(m,u)&&(g=m);var w=E.prototype=x.prototype=Object.create(g);_.prototype=w.constructor=E,E.constructor=_,E[a]=_.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===_||"GeneratorFunction"===(n.displayName||n.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(w),t},s.awrap=function(t){return{__await:t}},O(M.prototype),M.prototype[c]=function(){return this},s.AsyncIterator=M,s.async=function(t,n,r,e){var i=new M(b(t,n,r,e));return s.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},O(w),w[a]="Generator",w[u]=function(){return this},w.toString=function(){return"[object Generator]"},s.keys=function(t){var n=[];for(var r in t)n.push(r);return n.reverse(),function r(){for(;n.length;){var e=n.pop();if(e in t)return r.value=e,r.done=!1,r}return r.done=!0,r}},s.values=k,F.prototype={constructor:F,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(P),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function e(e,i){return c.type="throw",c.arg=t,n.next=e,i&&(n.method="next",n.arg=r),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],c=u.completion;if("root"===u.tryLoc)return e("end");if(u.tryLoc<=this.prev){var a=i.call(u,"catchLoc"),f=i.call(u,"finallyLoc");if(a&&f){if(this.prev<u.catchLoc)return e(u.catchLoc,!0);if(this.prev<u.finallyLoc)return e(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return e(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return e(u.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc<=this.prev&&i.call(e,"finallyLoc")&&this.prev<e.finallyLoc){var o=e;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),P(r),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var e=r.completion;if("throw"===e.type){var i=e.arg;P(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:k(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=r),d}}}function b(t,n,r,e){var i=n&&n.prototype instanceof x?n:x,o=Object.create(i.prototype),u=new F(e||[]);return o._invoke=function(t,n,r){var e=l;return function(i,o){if(e===p)throw new Error("Generator is already running");if(e===v){if("throw"===i)throw o;return N()}for(r.method=i,r.arg=o;;){var u=r.delegate;if(u){var c=A(u,r);if(c){if(c===d)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(e===l)throw e=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);e=p;var a=S(t,n,r);if("normal"===a.type){if(e=r.done?v:h,a.arg===d)continue;return{value:a.arg,done:r.done}}"throw"===a.type&&(e=v,r.method="throw",r.arg=a.arg)}}}(t,r,u),o}function S(t,n,r){try{return{type:"normal",arg:t.call(n,r)}}catch(t){return{type:"throw",arg:t}}}function x(){}function _(){}function E(){}function O(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function M(t){function r(n,e,o,u){var c=S(t[n],t,e);if("throw"!==c.type){var a=c.arg,f=a.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){r("next",t,o,u)},function(t){r("throw",t,o,u)}):Promise.resolve(f).then(function(t){a.value=t,o(a)},u)}u(c.arg)}var e;"object"==typeof n.process&&n.process.domain&&(r=n.process.domain.bind(r)),this._invoke=function(t,n){function i(){return new Promise(function(e,i){r(t,n,e,i)})}return e=e?e.then(i,i):i()}}function A(t,n){var e=t.iterator[n.method];if(e===r){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=r,A(t,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=S(e,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,d;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=r),n.delegate=null,d):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function j(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function P(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function F(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(j,this),this.reset(!0)}function k(t){if(t){var n=t[u];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,o=function n(){for(;++e<t.length;)if(i.call(t,e))return n.value=t[e],n.done=!1,n;return n.value=r,n.done=!0,n};return o.next=o}}return{next:N}}function N(){return{value:r,done:!0}}}("object"==typeof n?n:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,r(90))},function(t,n,r){r(326),t.exports=r(18).RegExp.escape},function(t,n,r){var e=r(0),i=r(327)(/[\\^$*+?.()|[\]{}]/g,"\\$&");e(e.S,"RegExp",{escape:function(t){return i(t)}})},function(t,n){t.exports=function(t,n){var r=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,r)}}},function(t,n,r){r(329),r(330),r(331),r(332),r(333),window.win=r(334),r(335),r(336);var e=r(337);t.exports=e},function(t,n){!function(t){function n(t,n){return(n?window[t][n]?/{|}|%7B|%7D|\[|\]|%5B|%5D/.test(window[t][n])?JSON.parse(unescape(window[t][n])):unescape(window[t][n]):void 0:window[t])||!1}function r(t,n,r){return"string"==typeof n?window[t][n]="object"==typeof r?escape(JSON.stringify(r)):escape(r):"object"==typeof n&&Object.keys(n).forEach(function(e){window[t][e]="object"==typeof r?escape(JSON.stringify(n[e])):escape(n[e])}),window[t]}t.IsNullOrEmpty=function(t){return null==t||null==t||""==t},t.inAttr=function(t){return!0===t||"true"===t||""===t},t.enpty_obj=function(t){return Object.keys(t).map(function(n){t[n]=null}),t},t.IsNumber=function(t){return isNaN(t)?0:t},t.clone=function(t){if(null==t||"object"!=typeof t)return t;if(t instanceof Date)return(n=new Date).setTime(t.getTime()),n;if(t instanceof Array){for(var n=[],r=0,e=t.length;r<e;++r)n[r]=clone(t[r]);return n}if(t instanceof Object){n={};for(var i in t)t.hasOwnProperty(i)&&(n[i]=clone(t[i]));return n}throw new Error("Unable to copy obj! Its type isn't supported.")},t.arrBuildTree=function(t,n,r){var e=[];return t.forEach(function(t){t.children=[]}),t.forEach(function(i){if(0!==i[n]&&"0"!==i[n]){var o=i;t.forEach(function(t){t[r]==o[n]&&t.children.push(o)})}else e.push(i)}),t.forEach(function(t){0==t.children.length&&delete t.children}),e},t.treeBreakArr=function(t,n){var r=[],e=0;n=n||"children";function i(t,o){var u=o+1;e=e>o?e:o,t.forEach(function(t){r.push(t),Array.isArray(t[n])&&t[n].length>0&&i(t[n],u)})}if("object"==typeof t&&Array.isArray(t))i(t,1);else if("object"==typeof t&&!Array.isArray(t)){var o=[];o.push(t),i(o,1)}return{array:r,depth:e}},t.getSearch=function(t){var n=[];try{n=window.location.search.split("?")[1].split("&")}catch(t){}var r={};return n.forEach(function(t){r[t.split("=")[0]]=t.split("=")[1]}),t?/%u/.test(r[t])?unescape(r[t]):r[t]:r},t.toSearch=function(n,r){var e="?";if("object"==typeof n&&Array.isArray(n))n.forEach(function(n,r){e+="["+r+"]="+t.toSearch(n,!0)+"&"});else{if("object"!=typeof n)return n;Object.keys(n).forEach(function(r){if("object"==typeof n[r]&&Array.isArray(n[r]))n[r].forEach(function(n,i){e+=r+"["+i+"]="+t.toSearch(n,!0)+"&"});else if("object"==typeof n[r]&&null!=n[r])e+=t.toSearch(n[r],!0)+"&";else{var i=/[\u3220-\uFA29]/.test(n[r])?escape(n[r]):n[r];e+=r+"="+(i||"")+"&"}})}return r?e.slice(1,-1):e.slice(0,-1)},t.setHash=function(t,n,r){var e=[];try{e=window.location.hash.split("#")[1].split("&")}catch(t){}var i={};$(e).each(function(){i[this.split("=")[0]]=this.split("=")[1]}),"string"==typeof t?(r=r||function(){},i[t]=n):"object"==typeof t&&(r=n||function(){},Object.keys(t).forEach(function(n){i[n]=t[n]}));var o="#";for(tkey in i)o+=tkey+"="+i[tkey]+"&";window.location.hash?window.location.replace(window.location.href.replace(window.location.hash,o.slice(0,-1))):window.location.replace(window.location.href+o.slice(0,-1)),r()},t.getHash=function(t){var n=[];try{n=window.location.hash.split("#")[1].split("&")}catch(t){}var r={};return n.forEach(function(t){r[t.split("=")[0]]=t.split("=")[1]}),t?r[t]:r},t.getLocal=function(t){return n("localStorage",t)},t.setLocal=function(t,n){return r("localStorage",t,n)},t.getSession=function(t){return n("sessionStorage",t)},t.setSession=function(t,n){return r("sessionStorage",t,n)},t.setRandomId=function(t){var n=this.$refs[t],r=t+"-"+(1e5*Math.random()+"").slice(0,5);return n.setAttribute("id",r),r},t.sortorder=function(t){try{if(t.indexOf("asc")>-1)return"asc";if(t.indexOf("desc")>-1)return"desc"}catch(n){return t}},t.GetGuid=function(){var t="";return $.ajaxSetup({async:!1}),this.$get(sysUrl+"/sysfile/getguid",{},function(n,r){t=n}),$.ajaxSetup({async:!0}),t},t.getObjByValue=function(t){var n=null,r=t.arr,e=t.target,i=t.key||"key",o=t.value||"value",u=t.mapkey||i,c=t.mapvalue||o,a=t.add||!1,f={};return"string"==typeof t.target?(r.forEach(function(t){f[escape(t[o])]=t}),n={},a&&(n=clone(f[escape(e)])),n[u]=f[escape(e)][i],n[c]=e):"object"==typeof t.target&&Array.isArray(t.target)&&(n=[],r.forEach(function(t){f[escape(t[o])]=t}),e.forEach(function(t){n.push(f[escape(t)])})),n},t.timeToDate=function(t){return/ /.test(t)?t.split(" ")[0]:t},t.getRandom=function(t){return(Math.random()+"").slice(2,t+2)},t.getTimeStrmp=function(){return(new Date).getTime()},t.floatToPercent=function(t,n,r){var e=100*Number(t);return e>100&&r&&(e=100),e.toFixed(n)+"%"},t.wxPay=function(t,n,r){WeixinJSBridge.invoke("getBrandWCPayRequest",{appId:t.appId,timeStamp:t.timeStamp,nonceStr:t.nonceStr,package:t.package,signType:"MD5",paySign:t.paySign},function(t){"get_brand_wcpay_request:ok"==t.err_msg?(alert("支付成功"),n&&n()):"get_brand_wcpay_request:fail"==t.err_msg?(alert("支付失败，请重试"),r&&r()):"get_brand_wcpay_request:cancel"==t.err_msg?(alert("用户取消支付"),r&&r()):(alert(t.err_msg),r&&r())})},t.downloader=function(t){var n=document.createElement("a");if("download"in n)return n.setAttribute("download",t),n.setAttribute("href",t),n.innerHTML="downloading",document.body.appendChild(n),setTimeout(function(){n.click(),document.body.removeChild(n)},1e3/24),!0;try{var r=document.createElement("iframe");return r.style.display="none",document.body.appendChild(r),r.src=t,setTimeout(function(){document.body.removeChild(r)},333),!0}catch(n){var e=document.createElement("form");return e.setAttribute("method","get"),e.setAttribute("action",t),document.body.appendChild(e),setTimeout(function(){e.submit(),document.body.removeChild(e)},1e3/24),!0}return window.open(url)||confirm("请使用右键-另存为进行下载，完成后点击后退返回当前页面")&&(location.href=url),!0},t.imgToBase64=function(t,n,r){var e=document.createElement("CANVAS"),i=e.getContext("2d"),o=new Image;o.crossOrigin="Anonymous",o.onload=function(){e.height=o.height,e.width=o.width,i.drawImage(o,0,0);var t=e.toDataURL(r||"image/png");n.call(this,t),e=null},o.src=t},t.inheritPrototype=function(t,n){var r=Object.create(n.prototype);r.constructor=t,t.prototype=r},t.loadScript=function(t){if(!t)throw new Error("请指定要加载的js文件路径");var n=document.createElement("script");n.type="text/javascript",n.async=!0,n.src=t;var r=document.getElementsByTagName("script")[0];return r.parentNode.insertBefore(n,r),!0},t.Arabia_to_Chinese=function(t){var n=["角","分"],r=["零","壹","贰","叁","肆","伍","陆","柒","捌","玖"],e=[["元","万","亿"],["","拾","佰","仟"]],i=t<0?"欠":"";t=Math.abs(t);for(var o="",u=0;u<n.length;u++)o+=(r[Math.floor(10*t*Math.pow(10,u))%10]+n[u]).replace(/零./,"");o=o||"整",t=Math.floor(t);for(u=0;u<e[0].length&&t>0;u++){for(var c="",a=0;a<e[1].length&&t>0;a++)c=r[t%10]+e[1][a]+c,t=Math.floor(t/10);o=c.replace(/(零.)*零$/,"").replace(/^$/,"零")+e[0][u]+o}return i+o.replace(/(零.)*零元/,"元").replace(/(零.)+/g,"零").replace(/^整$/,"零元整")},t.mixin=function(t,n,r){return Object.keys(t).forEach(function(e){r?n[e]=t[e]:n[e]||(n[e]=t[e])}),n}}(window)},function(t,n){window.Chain=function(){this.chain_arr=[]},window.Chain.prototype={link:function(t){return"function"==typeof t&&this.chain_arr.push(t),this},run:function(t){var n=this,r=0,e=(t=t,function(){var i=n.chain_arr[r];if(r++,i)return i(t,e)});e()}}},function(t,n){Hasher=function(t){this.Init(t)},Hasher.prototype={$data:{},$watch:{},Init:function(t){var n=this;this.$watch=t.watch;var r=t.data||{};if(this.$data=mixin(this.getHash(),r,!0),this.initListener(this.$data),!("onhashchange"in window&&(void 0===document.documentMode||document.documentMode>=8)))throw new Error("您的浏览器不支持hash监听事件");window.onhashchange=function(t){var r=n.hashWatcher(t);n.initListener(r.add),n.updateData(r.update);var e={};r.del.forEach(function(t){e[t]=""}),n.updateData(e)},t.mounted&&t.mounted.call(this)},push:function(t,n){var r=this.crearNewHref(t,n);return window.location.href=r,r},replace:function(t,n){var r=this.crearNewHref(t,n);return window.location.replace(r),r},toHash:function(t,n,r){var e=this.getHash();"string"==typeof t?(r=r||function(){},e[t]=n):"object"==typeof t&&(r=n||function(){},Object.keys(t).forEach(function(n){e[n]=t[n]}));var i="#";for(tkey in e)"$path"==tkey?i+=e[tkey]+"&":i+=tkey+"="+e[tkey]+"&";return i.slice(0,-1)},crearNewHref:function(t,n){var r=this.toHash(t,n),e=window.location.href;return window.location.hash?e.replace(window.location.hash,r):e+r},getHash:function(){var t=[],n=window.location.hash,r=0,e=n.split("#")[1],i="";if(/\?/.test(n))if(r=1,/^#[^\?=&!]+\?/g.test(n))i=e;else{var o=e.split("?")[0],u=e.split("?")[1];i=(t=o.split("&")).splice(-1,1)+"?"+u}else try{t=n.split("#")[1].split("&")}catch(t){}var c={};return t.forEach(function(t){/=/.test(t)?c[t.split("=")[0]]=t.split("=")[1]:c.$path=t}),r&&(c.$path=i),c},hashWatcher:function(t){var n=this,r=this.getHash(),e={},i={},o=[];return Object.keys(r).forEach(function(t){void 0===n.$data[t]&&void 0!==r[t]?i[t]=r[t]:n.$data[t]!=r[t]&&(e[t]={old:n.$data[t],new:r[t]})}),Object.keys(this.$data).forEach(function(t){void 0!==n.$data[t]&&void 0===r[t]&&o.push(t)}),{update:e,add:i,del:o}},initListener:function(t){var n=this;Object.keys(t).forEach(function(t){Object.defineProperty(n,t,{get:function(){return n.$data[t]},set:function(r){var e=n.$data[t];n.$data[t]=r,n.$watch[t]&&n.$watch[t](r,e)}})})},updateData:function(t){var n=this;Object.keys(t).forEach(function(r){n[r]=t[r].new})}}},function(t,n){ShadeBox=function(t){this.init(t)},ShadeBox.prototype={el:null,animate:300,lock:!1,init:function(t){var n=document.body,r=document.createElement("div"),e={position:"fixed",left:0,right:0,top:0,bottom:0,zIndex:5e3,display:"none",transition:"all",opacity:0};if(this.lock=t.lock,t.animate){var i=t.animate;/s/.test(i)&&(i=1e3*Number(i.split("s")[0])),this.animate=Number(i)}e.transition="all "+this.animate/1e3+"s",mixin(t.style,e),Object.keys(e).forEach(function(t){r.style[t]=e[t]}),r.id="cover__div--"+getRandom(5),r.innerHTML=t.innerHTML||"",n.appendChild(r),this.el=r},show:function(){document.body.style.overflow=this.lock?"hidden":"",this.el.style.display="block",this.el.style.opacity=1},hide:function(){document.body.style.overflow="",this.el.style.opacity=0,setTimeout(function(){this.el.style.display="none"}.bind(this),this.animate)}}},function(t,n){window.ajaxResCheck=function(t,n,r){r=r;2==arguments.length&&(r=n);var e={v:function(){r&&r(t.tdata,t)},pglist:function(){r&&r(t)},valerror:function(){IsNullOrEmpty(t.msg)||ShowMsgBox(t.msg,"error")},"login-index":function(){ShowMsgBox(t.msg,"error",function(){var t=getSession("company"),n=getSession("user");if(sessionStorage.clear(),t)window.top.location.href="/"+t+"/login";else{if("1"==n.userid)return void(window.top.location.href=htmlUrl+"/platlogin.html");window.top.location.href=htmlUrl+"/login.html"}})},"jump-url":function(){ShowMsgBox(t.msg,"info",function(){window.top.location.href=htmlUrl+t.url})}};return e[t.code]?e[t.code]():/^(throw-)/.test(t.code)?(t.code=t.code.split("throw-")[1],void(r&&r(t))):ShowMsgBox(t.msg,"error",function(){throw new Error(JSON.stringify(n))})},window.ShowMsg=function(t,n,r){r=r||function(){},window.top.$vue.$notify({message:t,type:n||"warning",onClose:r})},window.ShowConfirm=function(t,n,r,e){r=r||function(){},e=e||function(){},window.top.$vue.$confirm(t,"提示",{confirmButtonText:"确定",cancelButtonText:"取消",type:n||"warning",showClose:!1,callback:function(t,n){"confirm"==t?r():e()}})}},function(t,n){var r=function(){function t(){if(callback="function"==typeof arguments[arguments.length-1]?arguments[arguments.length-1]:function(){},"string"==typeof arguments[0])callback(arguments[0]);else if("object"==typeof arguments[0]){var t=arguments[0].path,n=arguments[0].query,r="object"==typeof n?t+function(t,n){var r="?";if("object"==typeof t&&Array.isArray(t))t.forEach(function(t,n){r+="["+n+"]="+owner.toSearch(t,!0)+"&"});else{if("object"!=typeof t)return t;Object.keys(t).forEach(function(n){if("object"==typeof t[n]&&Array.isArray(t[n]))t[n].forEach(function(t,e){r+=n+"["+e+"]="+owner.toSearch(t,!0)+"&"});else if("object"==typeof t[n]&&null!=t[n])r+=owner.toSearch(t[n],!0)+"&";else{var e=/[\u3220-\uFA29]/.test(t[n])?escape(t[n]):t[n];r+=n+"="+(e||"")+"&"}})}return n?r.slice(1,-1):r.slice(0,-1)}(n):t;callback(r)}}function n(t,n){for(var r=[],e=0;e<t.length;e++)r.push(t[e]);return r.push(n),r}return{g:function(){t.apply(this,n(arguments,function(t){window.location.href=t}))},r:function(){t.apply(this,n(arguments,function(t){window.location.replace(t)}))}}}();t.exports=r},function(t,n){window.Date.prototype.pattern=function(t){var n={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours()%12==0?12:this.getHours()%12,"H+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var r in/(y+)/.test(t)&&(t=t.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),/(E+)/.test(t)&&(t=t.replace(RegExp.$1,(RegExp.$1.length>1?RegExp.$1.length>2?"/u661f/u671f":"/u5468":"")+{0:"/u65e5",1:"/u4e00",2:"/u4e8c",3:"/u4e09",4:"/u56db",5:"/u4e94",6:"/u516d"}[this.getDay()+""])),n)new RegExp("("+r+")").test(t)&&(t=t.replace(RegExp.$1,1==RegExp.$1.length?n[r]:("00"+n[r]).substr((""+n[r]).length)));return t},window.Date.prototype.Format=function(t){var n={"M+":this.getMonth()+1,"d+":this.getDate(),"H+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var r in/(y+)/.test(t)&&(t=t.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),n)new RegExp("("+r+")").test(t)&&(t=t.replace(RegExp.$1,1==RegExp.$1.length?n[r]:("00"+n[r]).substr((""+n[r]).length)));return t}},function(t,n){window.String.prototype.html=function(t){var n=["&#39;","'","&quot;",'"',"&nbsp;"," ","&gt;",">","&lt;","<","&amp;","&","&yen;","¥","&lsquo;","‘","&rsquo;","’","&hellip;","…","&ldquo;","“","&rdquo;","”","&mdash;","—"];t&&n.reverse();for(var r=0,e=this;r<n.length;r+=2)e=e.replace(new RegExp(n[r],"g"),n[r+1]);return e}},function(t,n){window.Vue?window.$?function(){function n(t){try{$vue.loadingController=!0}catch(t){}var n=clone(t.data);n=t.fztype?JSON.stringify(n):n;var r=t.fztype?"application/json;charset=UTF-8":"application/x-www-form-urlencoded;charset=UTF-8",e=t.callback||function(){};$.ajax({url:/\?/.test(t.url)?t.url+"&random="+getTimeStrmp():t.url+"?random="+getTimeStrmp(),type:t.type||"get",data:n,contentType:r,headers:{pageuser:getSession("user")?getSession("user").userid:""},success:function(n){var r="string"==typeof n&&/{|}/.test(n)?JSON.parse(n):n;try{$vue.loadingController=!1}catch(t){}!function t(n){if("object"==typeof n&&Array.isArray(n))n.forEach(function(n){"string"==typeof n?n=t(n):t(n)});else if("object"==typeof n&&n)Object.keys(n).forEach(function(r){"string"==typeof n[r]?n[r]=t(n[r]):t(n[r])});else if("string"==typeof n)return n.html()}(r),ajaxResCheck.call(this,r,t,e)},complete:function(t,n){try{"login-index"==t.responseJSON.result&&(window.parent!=window?window.top.location.href=htmlUrl+"/login.html":location.href=htmlUrl+"/login.html")}catch(t){}},error:function(n){console.error("ajax-error:"+t.url,n)}})}function r(t){window.$vue=null,t&&this.init(t)}function e(t){return null!=t&&null!=t&&"false"!=t}window.$bus=new Vue({}),Vue.prototype.$get=function(t,r,e,i){var o,u,c,a;o=t,u="",c=c||function(){},a=!1,2==arguments.length&&"function"==typeof r?c=r:2==arguments.length&&"function"!=typeof r?u=r:3==arguments.length?"boolean"==typeof arguments[arguments.length-1]?(u=r,a=e):(u=r,c=e):4==arguments.length&&(u=r,c=e,a=i),n.call(this,{url:o,data:u,type:"get",callback:function(t,n){c.call(this,t,n)}.bind(this),fztype:a})},Vue.prototype.$post=function(t,r,e,i){var o,u,c,a;o=t,u="",c=c||function(){},a=!1,2==arguments.length&&"function"==typeof r?c=r:2==arguments.length&&"function"!=typeof r?u=r:3==arguments.length?"boolean"==typeof arguments[arguments.length-1]?(u=r,a=e):(u=r,c=e):4==arguments.length&&(u=r,c=e,a=i),n.call(this,{url:o,data:u,type:"post",callback:function(t,n){c.call(this,t,n)}.bind(this),fztype:a})},r.prototype={data:{},methods:{},computed:{},watch:{},created:function(){},mounted:function(){},init:function(t){var n=t||this;t&&(n.mounted=n.mounted||function(){},n.created=n.created||function(){}),new Vue({el:"#main_con",data:function(){return n.data},computed:n.computed,watch:n.watch,methods:n.methods,mounted:function(){window.$vue=this,n.mounted.call(this)},created:function(){window.$vue=this,function(){var t=document.querySelectorAll("el-form-item"),n=["string","number","boolean","method","regexp","integer","float","array","object","enum","date","url","hex","email"];typeMap=["字符串","数字","布尔","method","正则","integer","浮点数","数组","对象","enum","日期","url地址","哈希","电子邮件"];for(var r=0;r<t.length;r++){var i=[],o="";if(e(t[r].getAttribute("required"))){var u=["blur"];e(t[r].getAttribute("change"))&&u.push("change"),i.push({required:"true",message:"请输入"+t[r].getAttribute("label"),trigger:u}),t[r].removeAttribute("required"),t[r].removeAttribute("change")}e(t[r].getAttribute("min"))&&(i.push({min:parseInt(t[r].getAttribute("min")),message:"至少输入"+t[r].getAttribute("min")+"个字符",trigger:"blur"}),t[r].removeAttribute("min")),e(t[r].getAttribute("max"))&&(i.push({max:parseInt(t[r].getAttribute("max")),message:"至多输入"+t[r].getAttribute("max")+"个字符",trigger:"blur"}),t[r].removeAttribute("max")),e(t[r].getAttribute("mobile"))&&(o='{ "validator":validatorObj.mobile,"trigger": ["blur", "change"]}',t[r].removeAttribute("mobile")),e(t[r].getAttribute("arrayvalue"))&&(o='{ "validator":validatorObj.arrayvalue,"trigger": ["blur", "change"]}',t[r].removeAttribute("arrayvalue"));for(var c=0;c<n.length;c++)null!=t[r].getAttribute(n[c])&&null!=t[r].getAttribute(n[c])&&"false"!=t[r].getAttribute(n[c])&&i.push({type:n[c],message:"请输入正确的"+typeMap[c]+"格式",trigger:["blur","change"]});var a=t[r].getAttribute(":rules")||"[]",f=JSON.stringify(i).slice(1,-1);function s(t){return t?",":""}var l="["+f+s(f)+o+s(o)+a.slice(1,-1)+"]";l=l.replace(/"/g,"'"),t[r].setAttribute(":rules",l)}}(),this.loadingController=this.loadingController||!1,this.dialogVisible=this.dialogVisible||!1,this.searchKey=this.searchKey||"",this.tableData=this.tableData||[],n.created.call(this)}})},getdata:function(t,r,e,i){if(arguments.length<=3){var o=t;n(o)}else if(4==arguments.length){var o=t;!function(t,r,e,i){n(t)}(o)}}},t.exports=r}():console.error("无法找到$对象"):console.error("无法找到Vue对象")}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYWluVnVlL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9tYWluVnVlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNjYWxlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQub2YuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwid2VicGFjazovL21haW5WdWUvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL3NyYy9saWIvYXBwLmpzIiwid2VicGFjazovL21haW5WdWUvLi9zcmMvbGliL0NoYWluLmpzIiwid2VicGFjazovL21haW5WdWUvLi9zcmMvbGliL0hhc2hlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vc3JjL2xpYi9TaGFkZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vc3JjL2xpYi93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL3NyYy9saWIvd2luLmpzIiwid2VicGFjazovL21haW5WdWUvLi9zcmMvcHJvdG8vRGF0ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vc3JjL3Byb3RvL1N0cmluZy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vc3JjL2xpYi9tYWluVnVlLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwiTWF0aCIsInNlbGYiLCJfX2ciLCJleGVjIiwiZSIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsImEiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsImYiLCJPIiwiQXR0cmlidXRlcyIsInRvSW50ZWdlciIsIm1pbiIsImRlZmluZWQiLCJjcmVhdGVEZXNjIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiU3RyaW5nIiwidGhpcyIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiSU9iamVjdCIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ0b09iamVjdCIsIklFX1BST1RPIiwiT2JqZWN0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwidmVyc2lvbiIsIl9fZSIsImFGdW5jdGlvbiIsImZuIiwidGhhdCIsImIiLCJhcHBseSIsImFyZ3VtZW50cyIsInRvU3RyaW5nIiwic2xpY2UiLCJtZXRob2QiLCJhcmciLCJ2YWx1ZU9mIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJLRVkiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwicmVzIiwiaW5kZXgiLCJyZXN1bHQiLCJwdXNoIiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ09QTiIsImdldEl0ZXJGbiIsIndrcyIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiSXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIkFycmF5UHJvdG8iLCJBcnJheSIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUZpbmQiLCJhcnJheUZpbmRJbmRleCIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluZGV4T2YiLCJhcnJheVZhbHVlcyIsInZhbHVlcyIsImFycmF5S2V5cyIsImtleXMiLCJhcnJheUVudHJpZXMiLCJlbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiYnVmZmVyIiwiRk9SQ0VEX1NFVCIsInNldCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJ2YWxpZGF0ZSIsIkMiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJzdGVwIiwiaXRlcmF0b3IiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwibmV4dCIsImRvbmUiLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwicHJvdG8iLCJjb3B5V2l0aGluIiwic3RhcnQiLCJldmVyeSIsImZpbGwiLCJmaWx0ZXIiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiZm9yRWFjaCIsImluZGV4T2YiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJtYXAiLCJyZXZlcnNlIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCJlbmQiLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiQllURVNfUEVSX0VMRU1FTlQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwic3JjIiwibGVuIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJ3cmFwcGVyIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJCYXNlIiwiVEFDIiwiRk9SQ0VEIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJkYXRhIiwidiIsInJvdW5kIiwic2V0dGVyIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiaXRlciIsImNvbmNhdCIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJmcm9tIiwiTWFwIiwic2hhcmVkIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwia2V5TWV0YWRhdGEiLCJNZXRhZGF0YUtleSIsIm1ldGFkYXRhTWFwIiwiTWV0YWRhdGFWYWx1ZSIsIl8iLCJNRVRBIiwic2V0RGVzYyIsImlkIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIlVOU0NPUEFCTEVTIiwiYml0bWFwIiwicHgiLCJyYW5kb20iLCIka2V5cyIsImVudW1CdWdLZXlzIiwibWF4IiwiZFBzIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJkb2N1bWVudCIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCJDb25zdHJ1Y3RvciIsImZvcmJpZGRlbkZpZWxkIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYWJsZSIsImRlZiIsInN0YXQiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJ0cmltIiwiX3QiLCJjb2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJjb3B5cmlnaHQiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaXNBcnJheSIsIk1BVENIIiwiaXNSZWdFeHAiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJTWU1CT0wiLCJmbnMiLCJzdHJmbiIsInJ4Zm4iLCJEIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZm9yT2YiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsIksiLCJfX2RlZmluZVNldHRlcl9fIiwiQ09MTEVDVElPTiIsIkEiLCJjYiIsIm1hcEZuIiwibmV4dEl0ZW0iLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiY2hhckF0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiY291bnQiLCJzdHIiLCJJbmZpbml0eSIsInNpZ24iLCJ4IiwiJGV4cG0xIiwiZXhwbTEiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJkZXNjcmlwdG9yIiwic2VhcmNoU3RyaW5nIiwicmUiLCIkZGVmaW5lUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsIm9yaWdpbmFsIiwiZW5kUG9zIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwicHJvY2VzcyIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50IiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiUHJvbWlzZSIsImlzTm9kZSIsImhlYWQiLCJsYXN0Iiwibm90aWZ5IiwiZmx1c2giLCJwYXJlbnQiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJzdGFuZGFsb25lIiwicmVzb2x2ZSIsInByb21pc2UiLCJ0aGVuIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIlBST1RPVFlQRSIsIldST05HX0lOREVYIiwiQmFzZUJ1ZmZlciIsImFicyIsInBvdyIsImxvZyIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCJqIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJnIiwiZXZhbCIsIm5hbWVzIiwiZ2V0S2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZ09QUyIsIiRhc3NpZ24iLCJhc3NpZ24iLCJrIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsImZhY3RvcmllcyIsInBhcnRBcmdzIiwiYm91bmQiLCJjb25zdHJ1Y3QiLCJ1biIsIiRwYXJzZUludCIsInBhcnNlSW50IiwiJHRyaW0iLCJ3cyIsImhleCIsInJhZGl4IiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwibXNnIiwiaXNGaW5pdGUiLCJsb2cxcCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwicmV0IiwibWVtbyIsImlzUmlnaHQiLCJ0byIsImluYyIsImZsYWdzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsInN0cm9uZyIsImVudHJ5IiwiZ2V0RW50cnkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJfZiIsIl9sIiwiZGVsZXRlIiwicHJldiIsImFkZCIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwidWZzdG9yZSIsInRtcCIsIiRXZWFrTWFwIiwiZnJlZXplIiwiJGhhcyIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJzcGxpY2UiLCJudW1iZXIiLCJSZWZsZWN0Iiwib3duS2V5cyIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJpc0VudHJpZXMiLCJzY2FsZSIsImluTG93IiwiaW5IaWdoIiwib3V0TG93Iiwib3V0SGlnaCIsIl9iYWJlbFBvbHlmaWxsIiwiRXJyb3IiLCJERUZJTkVfUFJPUEVSVFkiLCJwYWRTdGFydCIsInBhZEVuZCIsIiRmYWlscyIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsInN5bWJvbHMiLCIkZ2V0UHJvdG90eXBlT2YiLCIkZnJlZXplIiwiJHNlYWwiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCIkaXNFeHRlbnNpYmxlIiwieSIsIkZQcm90byIsIm5hbWVSRSIsIm1hdGNoIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJmaXJzdCIsImNvZGUiLCJkaWdpdHMiLCJhTnVtYmVyVmFsdWUiLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwieiIsIngyIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJfaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJjb2xvciIsInNpemUiLCJ1cmwiLCJEYXRlIiwiZ2V0VGltZSIsInRvSlNPTiIsInRvSVNPU3RyaW5nIiwicHYiLCIkdG9JU09TdHJpbmciLCJseiIsIm51bSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIkRhdGVQcm90byIsImhpbnQiLCJjcmVhdGVQcm9wZXJ0eSIsInVwVG8iLCJjbG9uZWQiLCIkc29ydCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiJGZpbHRlciIsIiRzb21lIiwiJGV2ZXJ5IiwiJHJlZHVjZSIsIiRpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIiRmaW5kIiwiZm9yY2VkIiwiJGZsYWdzIiwiJFJlZ0V4cCIsInJlMSIsInJlMiIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsIiRtYXRjaCIsInJlZ2V4cCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsIlNQTElUIiwiJHNwbGl0IiwiX3NwbGl0IiwiJHB1c2giLCJOUENHIiwibGltaXQiLCJzZXBhcmF0b3IyIiwibGFzdEluZGV4IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsImNvbnNvbGUiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsImVycm9yIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwiZXJyIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2F0Y2giLCJjYXBhYmlsaXR5IiwiYWxsIiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsImluaXQiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiZ2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsInNldFByb3RvIiwiJGluY2x1ZGVzIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiZmxhdE1hcCIsImZsYXR0ZW4iLCJkZXB0aEFyZyIsImF0IiwiJHBhZCIsImdldEZsYWdzIiwiUmVnRXhwUHJvdG8iLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJfciIsIm1hdGNoQWxsIiwicngiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsIiR2YWx1ZXMiLCJfX2RlZmluZUdldHRlcl9fIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCJpc0Vycm9yIiwiY2xhbXAiLCJsb3dlciIsInVwcGVyIiwiREVHX1BFUl9SQUQiLCJQSSIsIlJBRF9QRVJfREVHIiwiZGVncmVlcyIsInJhZGlhbnMiLCJmc2NhbGUiLCJpYWRkaCIsIngwIiwieDEiLCJ5MCIsInkxIiwiJHgwIiwiJHkwIiwiaXN1YmgiLCJpbXVsaCIsInUiLCIkdSIsIiR2IiwidTAiLCJ2MCIsInUxIiwidjEiLCJ1bXVsaCIsInNpZ25iaXQiLCJmaW5hbGx5Iiwib25GaW5hbGx5IiwidHJ5IiwibWV0YWRhdGEiLCJ0b01ldGFLZXkiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJkZWxldGVNZXRhZGF0YSIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiU2V0Iiwib3JkaW5hcnlPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm9LZXlzIiwicEtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJnZXRPd25NZXRhZGF0YSIsImdldE93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsImhhc093bk1ldGFkYXRhIiwiJG1ldGFkYXRhIiwiYXNhcCIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJpdGVtcyIsIk9ic2VydmFibGUiLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwb3AiLCJDb250ZXh0IiwicmVzZXQiLCJza2lwVGVtcFJlc2V0Iiwic2VudCIsIl9zZW50IiwiZGVsZWdhdGUiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInN0b3AiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImFmdGVyTG9jIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwic3RhdGUiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwib2JqIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXR1cm4iLCJpbmZvIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiZXNjYXBlIiwiJHJlIiwicmVnRXhwIiwicGFydCIsIndpbiIsIm1haW5WdWUiLCJvd25lciIsImdldFN0b3JhZ2UiLCJwYXJzZSIsInVuZXNjYXBlIiwic2V0U3RvcmFnZSIsIml0ZW0iLCJJc051bGxPckVtcHR5IiwiaW5BdHRyIiwiZW5wdHlfb2JqIiwiSXNOdW1iZXIiLCJjbG9uZSIsImNvcHkiLCJzZXRUaW1lIiwiYXR0ciIsImFyckJ1aWxkVHJlZSIsInRhcmdldEFyciIsInBhcmVudEtleVdvcmQiLCJzZWxmS2V5V29yZCIsImFycl90cmVlIiwiY2hpbGRyZW4iLCJ0cmVlQnJlYWtBcnIiLCJ0YXJnZXRUcmVlIiwiY2hpbGRLZXkiLCJkZWVwIiwiZGVlcExvb3AiLCJ0cmVlIiwibGV2ZWwiLCJhcnJheSIsImdldFNlYXJjaCIsImhhc2giLCJsb2NhdGlvbiIsImhhc2hPYmoiLCJ0b1NlYXJjaCIsImZsYWciLCJzZXRIYXNoIiwiY2FsbGJhY2siLCIkIiwiaGFzaFN0ciIsInRrZXkiLCJocmVmIiwiZ2V0SGFzaCIsImdldExvY2FsIiwic2V0TG9jYWwiLCJnZXRTZXNzaW9uIiwic2V0U2Vzc2lvbiIsInNldFJhbmRvbUlkIiwicmVmIiwiJHJlZnMiLCJyYW5kb21JZCIsInNldEF0dHJpYnV0ZSIsInNvcnRvcmRlciIsIkdldEd1aWQiLCJndWlkIiwiYWpheFNldHVwIiwiJGdldCIsInN5c1VybCIsImdldE9iakJ5VmFsdWUiLCJtYXBrZXkiLCJtYXB2YWx1ZSIsImFyck1hcCIsInRpbWVUb0RhdGUiLCJnZXRSYW5kb20iLCJnZXRUaW1lU3RybXAiLCJmbG9hdFRvUGVyY2VudCIsInJhbmdlIiwiY2FsYyIsInd4UGF5IiwiZXJyY2FsbGJhY2siLCJXZWl4aW5KU0JyaWRnZSIsImFwcElkIiwidGltZVN0YW1wIiwibm9uY2VTdHIiLCJwYWNrYWdlIiwic2lnblR5cGUiLCJwYXlTaWduIiwiZXJyX21zZyIsImFsZXJ0IiwiZG93bmxvYWRlciIsInBhdGgiLCJlbGVBIiwiaW5uZXJIVE1MIiwiYm9keSIsImNsaWNrIiwiZWxlbUlGIiwiZm9ybSIsInN1Ym1pdCIsImNvbmZpcm0iLCJpbWdUb0Jhc2U2NCIsIm91dHB1dEZvcm1hdCIsImNhbnZhcyIsImdldENvbnRleHQiLCJpbWciLCJJbWFnZSIsImNyb3NzT3JpZ2luIiwib25sb2FkIiwiaGVpZ2h0Iiwid2lkdGgiLCJkcmF3SW1hZ2UiLCJkYXRhVVJMIiwidG9EYXRhVVJMIiwiaW5oZXJpdFByb3RvdHlwZSIsInN1YlR5cGUiLCJzdXBlclR5cGUiLCJwcm90b1R5cGUiLCJsb2FkU2NyaXB0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiQXJhYmlhX3RvX0NoaW5lc2UiLCJmcmFjdGlvbiIsImRpZ2l0IiwidW5pdCIsIm1peGluIiwiQ2hhaW4iLCJjaGFpbl9hcnIiLCJsaW5rIiwiZnVuIiwibG9vcCIsInRoaXNfbm9kZSIsIkhhc2hlciIsIkluaXQiLCIkZGF0YSIsIiR3YXRjaCIsIndhdGNoIiwib2JqRGF0YSIsImluaXRMaXN0ZW5lciIsImRvY3VtZW50TW9kZSIsIm9uaGFzaGNoYW5nZSIsImNoYW5nZSIsImhhc2hXYXRjaGVyIiwidXBkYXRlRGF0YSIsInVwZGF0ZSIsImRlbGVkIiwiZGVsIiwibW91bnRlZCIsIm5ld0hyZWYiLCJjcmVhck5ld0hyZWYiLCJ0b0hhc2giLCJoYXNoX3N0ciIsImhhbmRsZVR5cGUiLCJoYXNoX2NvbnRlbnQiLCJoYXNoX3NlYXJjaCIsImJlZm9yZSIsImFmdGVyIiwibmV3SGFzaCIsIm9sZCIsIm5ldyIsIm9sZFZhbCIsIlNoYWRlQm94IiwiYW5pbWF0ZSIsImxvY2siLCJjb3ZlciIsImRlZlN0eWxlIiwicG9zaXRpb24iLCJyaWdodCIsInRvcCIsImJvdHRvbSIsInpJbmRleCIsInRyYW5zaXRpb24iLCJvcGFjaXR5IiwiYW5pIiwic2hvdyIsIm92ZXJmbG93IiwiYWpheFJlc0NoZWNrIiwic2V0dGluZ3MiLCJzd2l0Y2hPYmoiLCJ0ZGF0YSIsInBnbGlzdCIsInZhbGVycm9yIiwiU2hvd01zZ0JveCIsImxvZ2luLWluZGV4IiwiY29tcGFueSIsInVzZXIiLCJzZXNzaW9uU3RvcmFnZSIsInVzZXJpZCIsImh0bWxVcmwiLCJqdW1wLXVybCIsIlNob3dNc2ciLCIkdnVlIiwiJG5vdGlmeSIsIm1lc3NhZ2UiLCJvbkNsb3NlIiwiU2hvd0NvbmZpcm0iLCJjYjEiLCJjYjIiLCIkY29uZmlybSIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsInNob3dDbG9zZSIsImFjdGlvbiIsImFyZ0hhbmRsZXIiLCJxdWVyeSIsImFyZ0FyckJ1aWxkZXIiLCJhcmdBcnIiLCJwYXR0ZXJuIiwiZm10IiwiTSsiLCJnZXRNb250aCIsImQrIiwiZ2V0RGF0ZSIsImgrIiwiZ2V0SG91cnMiLCJIKyIsIm0rIiwiZ2V0TWludXRlcyIsInMrIiwiZ2V0U2Vjb25kcyIsInErIiwiZ2V0TWlsbGlzZWNvbmRzIiwiJDEiLCJnZXRGdWxsWWVhciIsInN1YnN0ciIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCJnZXREYXkiLCJGb3JtYXQiLCJlbmNvZGUiLCJWdWUiLCJBamF4UmVxdWVzdCIsImxvYWRpbmdDb250cm9sbGVyIiwiY19kYXRhIiwiZnp0eXBlIiwiY29udGVudFR5cGUiLCJhamF4IiwiaGVhZGVycyIsInBhZ2V1c2VyIiwic3VjY2VzcyIsImRlY29kZSIsInhociIsInN0YXR1cyIsInJlc3BvbnNlSlNPTiIsIm9wdGlvbiIsImlzRXhpc3QiLCIkYnVzIiwiJHBvc3QiLCJjb21wdXRlZCIsImNyZWF0ZWQiLCJub2RlTGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0eXBlQXJyIiwidHlwZU1hcCIsInJ1bGVzIiwibW9iaWxlVmFsU3RyIiwiZ2V0QXR0cmlidXRlIiwidHJpZ2dlciIsInJlcXVpcmVkIiwicmVtb3ZlQXR0cmlidXRlIiwib2xkUnVsZXMiLCJzbGljZWRSdWxlcyIsImRvdEJ1aWxkZXIiLCJuZXdSdWxlc1N0ciIsImZvcm1WYWxpZGF0ZVRyYW5zIiwiZGlhbG9nVmlzaWJsZSIsInNlYXJjaEtleSIsInRhYmxlRGF0YSIsImdldGRhdGEiLCJhX3VybCIsImExIiwiYjEiLCJjMSIsImQxIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGlCQUFBQyxTQUFBLGlCQUFBQyxPQUNBQSxPQUFBRCxR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QSxHQUFBRCwyQ0MxQkF6QixFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLElBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxF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LFFBQ0QsTUFBQXh5QyxVQUFBbEIsT0FBQSxDQUNKLElBQUEwekMsRUFBQTcxQyxHQUlBLFNBQUE4MUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQTFDLEVBQUF1QyxHQURBLENBSUtELE1BZ0dMMzZDLEVBQUFELFFBQUFzcUMsRUFsVUF2cUMsR0FIQXU1QixRQUFBTSxNQUFBLFdBSkFOLFFBQUFNLE1BQUEiLCJmaWxlIjoiemhfYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwibWFpblZ1ZVwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJtYWluVnVlXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIm1haW5WdWVcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMjUpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXTtcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS43JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcbiAgdmFyIGZucyA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tLRVldKTtcbiAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICB2YXIgcnhmbiA9IGZuc1sxXTtcbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSkpIHtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3OyB9KSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCJ2YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKSB7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcbiIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNjYWxlIHx8IGZ1bmN0aW9uIHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICBpZiAoXG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgeCAhPSB4XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkxvdyAhPSBpbkxvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5IaWdoICE9IGluSGlnaFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0TG93ICE9IG91dExvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0SGlnaCAhPSBvdXRIaWdoXG4gICkgcmV0dXJuIE5hTjtcbiAgaWYgKHggPT09IEluZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkgcmV0dXJuIHg7XG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XG5cbnZhciBERUZJTkVfUFJPUEVSVFkgPSBcImRlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkTGVmdFwiLCBcIlwiLnBhZFN0YXJ0KTtcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcblxuXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XG59KTsiLCJyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5mc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIvLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpIHtcbiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTtcbiIsIi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlKSB7XG4gIC8vIDIxLjEuMy4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSlcbiAgcmV0dXJuIFtmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICB9LCAkcmVwbGFjZV07XG59KTtcbiIsIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gpIHtcbiAgLy8gMjEuMS4zLjE1IFN0cmluZy5wcm90b3R5cGUuc2VhcmNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pO1xuIiwiLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG4gIHZhciBfc3BsaXQgPSAkc3BsaXQ7XG4gIHZhciAkcHVzaCA9IFtdLnB1c2g7XG4gIHZhciAkU1BMSVQgPSAnc3BsaXQnO1xuICB2YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG4gIHZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgdmFyIE5QQ0cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHVuZGVmaW5lZDsgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuIF9zcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTtcbiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgaWYgKCFOUENHKSBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZykpIHtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0dcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgaWYgKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKSBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKykgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBnZXRGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHJlZ2V4cCwgc3RyaW5nKSB7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7XG4gIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogbWF0Y2ggPT09IG51bGwgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCkge1xuICAgIGRlZmluZWQodGhpcyk7XG4gICAgaWYgKCFpc1JlZ0V4cChyZWdleHApKSB0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7XG4gICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgdmFyIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApO1xuICAgIHZhciByeCA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRvTGVuZ3RoKHJlZ2V4cC5sYXN0SW5kZXgpO1xuICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgc2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELmdldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0JywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdTZXQnKSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXIsIE1hdGgubWF4KGxvd2VyLCB4KSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSArICh5MSA+Pj4gMCkgKyAoKCR4MCAmICR5MCB8ICgkeDAgfCAkeTApICYgfigkeDAgKyAkeTAgPj4+IDApKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgUkFEX1BFUl9ERUc6IDE4MCAvIE1hdGguUEkgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2NhbGU6IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+Pj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gbWV0YWRhdGEuc2V0O1xuXG5tZXRhZGF0YS5leHAoeyBkZWZpbmVNZXRhZGF0YTogZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChtZXRhZGF0YU1hcC5zaXplKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9lczYuc2V0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbnZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAoTywgUCkge1xuICB2YXIgb0tleXMgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZiAocGFyZW50ID09PSBudWxsKSByZXR1cm4gb0tleXM7XG4gIHZhciBwS2V5cyA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyICRtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gJG1ldGFkYXRhLnNldDtcblxuJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgcHJvY2VzcyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnByb2Nlc3M7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gbmV3IEFycmF5KGwpOyBpIDwgbDspIGl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IE9ic2VydmFibGU6ICRPYnNlcnZhYmxlIH0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmUgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHsgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpIHsgcmV0dXJuICRyZShpdCk7IH0gfSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcbiIsInJlcXVpcmUoJ0AvbGliL2FwcCcpXHJcbnJlcXVpcmUoJ0AvbGliL0NoYWluJylcclxucmVxdWlyZSgnQC9saWIvSGFzaGVyJylcclxucmVxdWlyZSgnQC9saWIvU2hhZGUnKVxyXG5yZXF1aXJlKCdAL2xpYi93aW5kb3cnKVxyXG53aW5kb3cud2luID0gcmVxdWlyZSgnQC9saWIvd2luJylcclxuXHJcbnJlcXVpcmUoJ0AvcHJvdG8vRGF0ZScpXHJcbnJlcXVpcmUoJ0AvcHJvdG8vU3RyaW5nJylcclxuXHJcbnZhciBtYWluVnVlID0gcmVxdWlyZSgnQC9saWIvbWFpblZ1ZScpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG1haW5WdWVcclxuIiwiKGZ1bmN0aW9uKG93bmVyKSB7XHJcbiAgICAvL+mqjOivgeaYr+WQpuS4uuepulxyXG4gICAgb3duZXIuSXNOdWxsT3JFbXB0eSA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICBpZiAodmFsICE9IHVuZGVmaW5lZCAmJiB2YWwgIT0gbnVsbCAmJiB2YWwgIT0gXCJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIG93bmVyLmluQXR0ciA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgIFx0aWYgKHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09ICd0cnVlJyB8fCB2YWwgPT09ICcnKSB7XHJcbiAgICBcdFx0cmV0dXJuIHRydWU7XHJcbiAgICBcdH0gZWxzZSB7XHJcbiAgICBcdFx0cmV0dXJuIGZhbHNlO1xyXG4gICAgXHR9XHJcbiAgICB9XHJcblxyXG4gICAgLy/muIXnqbrlr7nosaHlhoXlrrlcclxuICAgIG93bmVyLmVucHR5X29iaiA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIFx0T2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgXHRcdG9ialtrZXldID0gbnVsbDtcclxuICAgIFx0fSlcclxuICAgIFx0cmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICAvL+mqjOivgeaYr+WQpuS4uuaVsOWtl1xyXG4gICAgb3duZXIuSXNOdW1iZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIFx0aWYgKGlzTmFOKHZhbHVlKSkge1xyXG4gICAgXHRcdHJldHVybiAwO1xyXG4gICAgXHR9XHJcbiAgICBcdHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvL+Wvueixoea3seaLt+i0nVxyXG4gICAgb3duZXIuY2xvbmUgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICBcdC8vIEhhbmRsZSB0aGUgMyBzaW1wbGUgdHlwZXMsIGFuZCBudWxsIG9yIHVuZGVmaW5lZFxyXG4gICAgXHRpZiAobnVsbCA9PSBvYmogfHwgXCJvYmplY3RcIiAhPSB0eXBlb2Ygb2JqKSByZXR1cm4gb2JqO1xyXG5cclxuICAgIFx0Ly8gSGFuZGxlIERhdGVcclxuICAgIFx0aWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgIFx0XHR2YXIgY29weSA9IG5ldyBEYXRlKCk7XHJcbiAgICBcdFx0Y29weS5zZXRUaW1lKG9iai5nZXRUaW1lKCkpO1xyXG4gICAgXHRcdHJldHVybiBjb3B5O1xyXG4gICAgXHR9XHJcblxyXG4gICAgXHQvLyBIYW5kbGUgQXJyYXlcclxuICAgIFx0aWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICBcdFx0dmFyIGNvcHkgPSBbXTtcclxuICAgIFx0XHRmb3IgKHZhciBpID0gMCwgbGVuID0gb2JqLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICBcdFx0XHRjb3B5W2ldID0gY2xvbmUob2JqW2ldKTtcclxuICAgIFx0XHR9XHJcbiAgICBcdFx0cmV0dXJuIGNvcHk7XHJcbiAgICBcdH1cclxuXHJcbiAgICBcdC8vIEhhbmRsZSBPYmplY3RcclxuICAgIFx0aWYgKG9iaiBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgXHRcdHZhciBjb3B5ID0ge307XHJcbiAgICBcdFx0Zm9yICh2YXIgYXR0ciBpbiBvYmopIHtcclxuICAgIFx0XHRcdGlmIChvYmouaGFzT3duUHJvcGVydHkoYXR0cikpIGNvcHlbYXR0cl0gPSBjbG9uZShvYmpbYXR0cl0pO1xyXG4gICAgXHRcdH1cclxuICAgIFx0XHRyZXR1cm4gY29weTtcclxuICAgIFx0fVxyXG5cclxuICAgIFx0dGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNvcHkgb2JqISBJdHMgdHlwZSBpc24ndCBzdXBwb3J0ZWQuXCIpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKlxyXG4gICAg5pWw57uE5ou85qCRXHJcbiAgICB0YXJnZXRBcnLnm67moIfmlbDnu4RcclxuICAgIHBhcmVudEtleVdvcmTniLbnuqflhbPplK7lrZdcclxuICAgIHNlbGZLZXlXb3Jk6Ieq6Lqr5YWz6ZSu5a2XXHJcbiAgICAqL1xyXG4gICAgb3duZXIuYXJyQnVpbGRUcmVlID0gZnVuY3Rpb24gKHRhcmdldEFyciwgcGFyZW50S2V5V29yZCwgc2VsZktleVdvcmQpIHtcclxuICAgIFx0dmFyIGFycl90cmVlID0gW107XHJcblxyXG4gICAgXHR0YXJnZXRBcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdGl0ZW0uY2hpbGRyZW4gPSBbXTtcclxuICAgIFx0fSlcclxuICAgIFx0dGFyZ2V0QXJyLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIFx0XHRpZiAoIShpdGVtW3BhcmVudEtleVdvcmRdID09PSAwIHx8IGl0ZW1bcGFyZW50S2V5V29yZF0gPT09ICcwJykpIHtcclxuICAgIFx0XHRcdHZhciB0aGF0ID0gaXRlbTtcclxuICAgIFx0XHRcdHRhcmdldEFyci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICBcdFx0XHRcdGlmIChpdGVtW3NlbGZLZXlXb3JkXSA9PSB0aGF0W3BhcmVudEtleVdvcmRdKSB7XHJcbiAgICBcdFx0XHRcdFx0aXRlbS5jaGlsZHJlbi5wdXNoKHRoYXQpO1xyXG4gICAgXHRcdFx0XHR9XHJcbiAgICBcdFx0XHR9KVxyXG4gICAgXHRcdH0gZWxzZSB7XHJcbiAgICBcdFx0XHRhcnJfdHJlZS5wdXNoKGl0ZW0pO1xyXG4gICAgXHRcdH1cclxuICAgIFx0fSk7XHJcbiAgICBcdC8q5riF6ZmkY2hpbGRyZW7kuLrnqbrnmoTpobkqL1xyXG4gICAgXHR0YXJnZXRBcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdGlmIChpdGVtLmNoaWxkcmVuLmxlbmd0aCA9PSAwKSB7XHJcbiAgICBcdFx0XHRkZWxldGUgaXRlbS5jaGlsZHJlblxyXG4gICAgXHRcdH1cclxuICAgIFx0fSlcclxuICAgIFx0cmV0dXJuIGFycl90cmVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qCR57uT5p6E5ouG5pWw57uEXHJcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R8YXJyYXl9IHRhcmdldFRyZWUg5qCR5b2i57uT5p6E5a+56LGh5oiW5pWw57uEXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNoaWxkS2V5ICAg5a2Q6aG557Si5byVa2V5XHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgICAg6L+U5Zue55qE5a+56LGh77yMYXJyYXnkuLrmi4bliIblkI7nmoTmlbDnu4TvvIxkZXB0aOS4uuagkeeahOa3seW6plxyXG4gICAgICovXHJcbiAgICBvd25lci50cmVlQnJlYWtBcnIgPSBmdW5jdGlvbiAodGFyZ2V0VHJlZSwgY2hpbGRLZXkpIHtcclxuICAgIFx0dmFyIGFyciA9IFtdLFxyXG4gICAgXHRcdGRlZXAgPSAwLFxyXG4gICAgXHRcdGNoaWxkS2V5ID0gY2hpbGRLZXkgfHwgJ2NoaWxkcmVuJztcclxuXHJcbiAgICBcdGZ1bmN0aW9uIGRlZXBMb29wKHRyZWUsIGxldmVsKSB7XHJcbiAgICBcdFx0dmFyIGRlcHRoID0gbGV2ZWwgKyAxO1xyXG4gICAgXHRcdGRlZXAgPSAoZGVlcCA+IGxldmVsKSA/IGRlZXAgOiBsZXZlbDtcclxuICAgIFx0XHR0cmVlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIFx0XHRcdGFyci5wdXNoKGl0ZW0pO1xyXG4gICAgXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoaXRlbVtjaGlsZEtleV0pICYmIGl0ZW1bY2hpbGRLZXldLmxlbmd0aCA+IDApIHtcclxuICAgIFx0XHRcdFx0ZGVlcExvb3AoaXRlbVtjaGlsZEtleV0sIGRlcHRoKTtcclxuICAgIFx0XHRcdH1cclxuICAgIFx0XHR9KVxyXG4gICAgXHR9O1xyXG5cclxuICAgIFx0aWYgKHR5cGVvZiB0YXJnZXRUcmVlID09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodGFyZ2V0VHJlZSkpIHtcclxuICAgIFx0XHRkZWVwTG9vcCh0YXJnZXRUcmVlLCAxKTtcclxuICAgIFx0fSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0VHJlZSA9PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh0YXJnZXRUcmVlKSkge1xyXG4gICAgXHRcdHZhciBhID0gW107XHJcbiAgICBcdFx0YS5wdXNoKHRhcmdldFRyZWUpO1xyXG4gICAgXHRcdGRlZXBMb29wKGEsIDEpO1xyXG4gICAgXHR9O1xyXG5cclxuICAgIFx0cmV0dXJuIHtcclxuICAgIFx0XHRhcnJheTogYXJyLFxyXG4gICAgXHRcdGRlcHRoOiBkZWVwXHJcbiAgICBcdH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqKioqXHJcbiAgICDmjqXmlLblnLDlnYDmoI/lj4LmlbBcclxuICAgIGtleTrlj4LmlbDlkI3np7BcclxuICAgICoqKioqKioqKiovXHJcbiAgICBvd25lci5nZXRTZWFyY2ggPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICBcdHZhciBoYXNoID0gW107XHJcbiAgICBcdHRyeSB7XHJcbiAgICBcdFx0aGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3BsaXQoJz8nKVsxXS5zcGxpdChcIiZcIik7XHJcbiAgICBcdH0gY2F0Y2ggKGUpIHt9XHJcbiAgICBcdHZhciBoYXNoT2JqID0ge307XHJcbiAgICBcdGhhc2guZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdGhhc2hPYmpbaXRlbS5zcGxpdChcIj1cIilbMF1dID0gaXRlbS5zcGxpdChcIj1cIilbMV07XHJcbiAgICBcdH0pO1xyXG4gICAgXHRpZiAoISFrZXkpXHJcbiAgICBcdFx0cmV0dXJuIC8ldS8udGVzdChoYXNoT2JqW2tleV0pID8gdW5lc2NhcGUoaGFzaE9ialtrZXldKSA6IGhhc2hPYmpba2V5XTtcclxuICAgIFx0ZWxzZVxyXG4gICAgXHRcdHJldHVybiBoYXNoT2JqO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bCG5a+56LGh6L2s5YyW5oiQc2VhcmNo5a2X56ym5LiyXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiAg5a+56LGh5oiW5pWw57uEXHJcbiAgICAgKiBAcGFyYW0gIHtib29sZWFufSBmbGFnIOaYr+WQpuaQuuW4pic/J1xyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSAgICAgIOi/lOWbnueahOagvOW8j+WMluWQjuWtl+espuS4slxyXG4gICAgICovXHJcbiAgICBvd25lci50b1NlYXJjaCA9IGZ1bmN0aW9uIChvYmosIGZsYWcpIHtcclxuICAgIFx0dmFyIHJlcyA9ICc/J1xyXG4gICAgXHRpZiAodHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KG9iaikpIHtcclxuICAgIFx0XHRvYmouZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuICAgIFx0XHRcdHJlcyArPSAoJ1snICsgaW5kZXggKyAnXT0nICsgb3duZXIudG9TZWFyY2goaXRlbSwgdHJ1ZSkgKyAnJicpO1xyXG4gICAgXHRcdH0pO1xyXG4gICAgXHR9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcpIHtcclxuICAgIFx0XHRPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgXHRcdFx0aWYgKHR5cGVvZiBvYmpba2V5XSA9PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KG9ialtrZXldKSkge1xyXG4gICAgXHRcdFx0XHRvYmpba2V5XS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgXHRcdFx0XHRcdHJlcyArPSAoa2V5ICsgJ1snICsgaW5kZXggKyAnXT0nICsgb3duZXIudG9TZWFyY2goaXRlbSwgdHJ1ZSkgKyAnJicpXHJcbiAgICBcdFx0XHRcdH0pO1xyXG4gICAgXHRcdFx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ29iamVjdCcgJiYgb2JqW2tleV0gIT0gbnVsbCkge1xyXG4gICAgXHRcdFx0XHRyZXMgKz0gKG93bmVyLnRvU2VhcmNoKG9ialtrZXldLCB0cnVlKSArICcmJyk7XHJcbiAgICBcdFx0XHR9IGVsc2Uge1xyXG4gICAgXHRcdFx0XHR2YXIgaXRlbSA9IC9bXFx1MzIyMC1cXHVGQTI5XS8udGVzdChvYmpba2V5XSkgPyBlc2NhcGUob2JqW2tleV0pIDogb2JqW2tleV07XHJcbiAgICBcdFx0XHRcdHJlcyArPSAoa2V5ICsgJz0nICsgKGl0ZW0gfHwgJycpICsgJyYnKTtcclxuICAgIFx0XHRcdH1cclxuXHJcbiAgICBcdFx0fSk7XHJcbiAgICBcdH0gZWxzZSB7XHJcbiAgICBcdFx0cmV0dXJuIG9iajtcclxuICAgIFx0fVxyXG4gICAgXHRyZXR1cm4gISFmbGFnID8gcmVzLnNsaWNlKDEsIC0xKSA6IHJlcy5zbGljZSgwLCAtMSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog55Sf5oiQaGFzaOWAvOW5tuaUvue9ruWmgndpbmRvdy5sb2NhdGlvbi5ocmVmXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAga2V5ICAgICAg6ZSuXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgdmFsdWUgICAg5YC8XHJcbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sg5Zue6LCD5Ye95pWwXHJcbiAgICAgKiBAcmV0dXJuIHtudWxsfSAgICAgICAgICAgIOi/lOWbnuWAvFxyXG4gICAgICovXHJcbiAgICBvd25lci5zZXRIYXNoID0gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgXHR2YXIgaGFzaCA9IFtdO1xyXG4gICAgXHR0cnkge1xyXG4gICAgXHRcdGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zcGxpdCgnIycpWzFdLnNwbGl0KFwiJlwiKTtcclxuICAgIFx0fSBjYXRjaCAoZSkge31cclxuICAgIFx0dmFyIGhhc2hPYmogPSB7fTtcclxuICAgIFx0JChoYXNoKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgIFx0XHRoYXNoT2JqW3RoaXMuc3BsaXQoXCI9XCIpWzBdXSA9IHRoaXMuc3BsaXQoXCI9XCIpWzFdO1xyXG4gICAgXHR9KTtcclxuXHJcbiAgICBcdGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xyXG4gICAgXHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XHJcblxyXG4gICAgXHRcdGhhc2hPYmpba2V5XSA9IHZhbHVlO1xyXG5cclxuICAgIFx0fSBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xyXG4gICAgXHRcdGNhbGxiYWNrID0gdmFsdWUgfHwgZnVuY3Rpb24gKCkge307XHJcbiAgICBcdFx0T2JqZWN0LmtleXMoa2V5KS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICBcdFx0XHRoYXNoT2JqW2l0ZW1dID0ga2V5W2l0ZW1dXHJcbiAgICBcdFx0fSlcclxuICAgIFx0fVxyXG5cclxuICAgIFx0dmFyIGhhc2hTdHIgPSAnIyc7XHJcbiAgICBcdGZvciAodGtleSBpbiBoYXNoT2JqKSB7XHJcbiAgICBcdFx0aGFzaFN0ciArPSAodGtleSArICc9JyArIGhhc2hPYmpbdGtleV0gKyAnJicpO1xyXG4gICAgXHR9O1xyXG4gICAgXHRpZiAoISF3aW5kb3cubG9jYXRpb24uaGFzaCkge1xyXG4gICAgXHRcdHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhhc2gsIGhhc2hTdHIuc2xpY2UoMCwgLTEpKSk7XHJcbiAgICBcdH0gZWxzZSB7XHJcbiAgICBcdFx0d2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYgKyBoYXNoU3RyLnNsaWNlKDAsIC0xKSlcclxuICAgIFx0fVxyXG5cclxuICAgIFx0Y2FsbGJhY2soKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5Z3aW5kb3cubG9jYXRpb24uaGFzaOS4reeJueWumuWAvFxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBrZXkg5b6F6I635Y+W55qEa2V5XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICDojrflj5bliLDnmoTlgLxcclxuICAgICAqL1xyXG4gICAgb3duZXIuZ2V0SGFzaCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIFx0dmFyIGhhc2ggPSBbXTtcclxuICAgIFx0dHJ5IHtcclxuICAgIFx0XHRoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3BsaXQoJyMnKVsxXS5zcGxpdChcIiZcIik7XHJcbiAgICBcdH0gY2F0Y2ggKGUpIHt9XHJcbiAgICBcdHZhciBoYXNoT2JqID0ge307XHJcbiAgICBcdGhhc2guZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdGhhc2hPYmpbaXRlbS5zcGxpdChcIj1cIilbMF1dID0gaXRlbS5zcGxpdChcIj1cIilbMV07XHJcbiAgICBcdH0pO1xyXG4gICAgXHRpZiAoISFrZXkpXHJcbiAgICBcdFx0cmV0dXJuIGhhc2hPYmpba2V5XTtcclxuICAgIFx0ZWxzZVxyXG4gICAgXHRcdHJldHVybiBoYXNoT2JqO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572uc3RvcmFnZeWfuuaWueazlVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSB0eXBlIHNlc3Npb25TdG9yYWdl5oiWbG9jYWxTdG9yYWdlXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGtleSAg6KaB5Y+W55qEa2V5XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8T2JqZWN0fSAgICAgIOWvueW6lOWtmOWCqOeahOaVsOaNrlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRTdG9yYWdlKHR5cGUsIGtleSkge1xyXG4gICAgXHR2YXIgcmVzID0gISFrZXkgP1xyXG4gICAgXHRcdHdpbmRvd1t0eXBlXVtrZXldID9cclxuICAgIFx0XHQoKC97fH18JTdCfCU3RHxcXFt8XFxdfCU1QnwlNUQvLnRlc3Qod2luZG93W3R5cGVdW2tleV0pID9cclxuICAgIFx0XHRcdEpTT04ucGFyc2UodW5lc2NhcGUod2luZG93W3R5cGVdW2tleV0pKSA6XHJcbiAgICBcdFx0XHR1bmVzY2FwZSh3aW5kb3dbdHlwZV1ba2V5XSkpKSA6IHVuZGVmaW5lZCA6XHJcbiAgICBcdFx0d2luZG93W3R5cGVdO1xyXG4gICAgXHRyZXR1cm4gcmVzIHx8IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5ZzdG9yYWdl5Z+65pa55rOVXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAgc2Vzc2lvblN0b3JhZ2XmiJZsb2NhbFN0b3JhZ2VcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0ga2V5ICAg6KaB6K6+572u55qEa2V55oiW5pW05Liq5a+56LGhXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWUg5bey6K6+572u55qE57uT5p6cXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHNldFN0b3JhZ2UodHlwZSwga2V5LCB2YWx1ZSkge1xyXG4gICAgXHRpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcclxuICAgIFx0XHR3aW5kb3dbdHlwZV1ba2V5XSA9ICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSA/IGVzY2FwZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpIDogZXNjYXBlKHZhbHVlKTtcclxuICAgIFx0fSBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xyXG4gICAgXHRcdE9iamVjdC5rZXlzKGtleSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdFx0d2luZG93W3R5cGVdW2l0ZW1dID0gKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gZXNjYXBlKEpTT04uc3RyaW5naWZ5KGtleVtpdGVtXSkpIDogZXNjYXBlKGtleVtpdGVtXSk7XHJcbiAgICBcdFx0fSk7XHJcbiAgICBcdH07XHJcbiAgICBcdHJldHVybiB3aW5kb3dbdHlwZV07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5Zsb2NhbFN0b3JhZ2Xph4znmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30ga2V5IOW+heiOt+WPlueahGtleVxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfE9iamVjdH0g5Y+W5Zue55qE5YC8XHJcbiAgICAgKi9cclxuICAgIG93bmVyLmdldExvY2FsID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgXHRyZXR1cm4gZ2V0U3RvcmFnZSgnbG9jYWxTdG9yYWdlJywga2V5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWwhuWAvOWtmOWFpWxvY2FsU3RvcmFnZVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfE9iamVjdH0ga2V5ICAg5b6F5a2Y5YC855qEa2V55oiWanNvbuWvueixoVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfG9iamVjdH0gdmFsdWUg5b6F5a2Y5YC855qEdmFsdWVcclxuICAgICAqIEByZXR1cm4ge29iamVjdH0gICAgICAg5a2Y5YWl5ZCObG9jYWxTdG9yYWdl5a+56LGhXHJcbiAgICAgKi9cclxuICAgIG93bmVyLnNldExvY2FsID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgIFx0cmV0dXJuIHNldFN0b3JhZ2UoJ2xvY2FsU3RvcmFnZScsIGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+Wc2Vzc2lvblN0b3JhZ2Xph4znmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30ga2V5IOW+heiOt+WPlueahGtleVxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfE9iamVjdH0g5Y+W5Zue55qE5YC8XHJcbiAgICAgKi9cclxuICAgIG93bmVyLmdldFNlc3Npb24gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICBcdHJldHVybiBnZXRTdG9yYWdlKCdzZXNzaW9uU3RvcmFnZScsIGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlsIblgLzlrZjlhaVzZXNzaW9uU3RvcmFnZVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfE9iamVjdH0ga2V5ICAg5b6F5a2Y5YC855qEa2V55oiWanNvbuWvueixoVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfG9iamVjdH0gdmFsdWUg5b6F5a2Y5YC855qEdmFsdWVcclxuICAgICAqIEByZXR1cm4ge29iamVjdH0gICAgICAg5a2Y5YWl5ZCOc2Vzc2lvblN0b3JhZ2Xlr7nosaFcclxuICAgICAqL1xyXG4gICAgb3duZXIuc2V0U2Vzc2lvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICBcdHJldHVybiBzZXRTdG9yYWdlKCdzZXNzaW9uU3RvcmFnZScsIGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zyo55uu5qCHcmVm5LiK55Sf5oiQ5LiA5Liq6ZqP5py6aWRcclxuICAgICAqIEBwYXJhbSAge29ian0gcmVmIHZ1ZeeahOS4gOS4qnJlZuWunuS+i1xyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSAgICAg55Sf5oiQ55qE6ZqP5py6aWRcclxuICAgICAqL1xyXG4gICAgb3duZXIuc2V0UmFuZG9tSWQgPSBmdW5jdGlvbiAocmVmKSB7XHJcbiAgICBcdHZhciB0YXJnZXQgPSB0aGlzLiRyZWZzW3JlZl0sXHJcbiAgICBcdFx0cmFuZG9tID0gKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAgKyAnJykuc2xpY2UoMCwgNSk7XHJcblxyXG4gICAgXHR2YXIgcmFuZG9tSWQgPSByZWYgKyAnLScgKyByYW5kb207XHJcbiAgICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2lkJywgcmFuZG9tSWQpO1xyXG5cclxuICAgIFx0cmV0dXJuIHJhbmRvbUlkO1xyXG4gICAgfVxyXG5cclxuICAgIC8q5qC85byP5YyW5o6S5bqP6aG65bqP5YWz6ZSu5a2XKi9cclxuICAgIG93bmVyLnNvcnRvcmRlciA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIFx0dHJ5IHtcclxuICAgIFx0XHRpZiAoc3RyLmluZGV4T2YoJ2FzYycpID4gLTEpIHtcclxuICAgIFx0XHRcdHJldHVybiAnYXNjJ1xyXG4gICAgXHRcdH0gZWxzZSBpZiAoc3RyLmluZGV4T2YoJ2Rlc2MnKSA+IC0xKSB7XHJcbiAgICBcdFx0XHRyZXR1cm4gJ2Rlc2MnXHJcbiAgICBcdFx0fVxyXG4gICAgXHR9IGNhdGNoIChlKSB7XHJcbiAgICBcdFx0cmV0dXJuIHN0clxyXG4gICAgXHR9XHJcbiAgICB9XHJcblxyXG4gICAgLy/ojrflj5ZmaWxlZ3VpZFxyXG4gICAgb3duZXIuR2V0R3VpZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFx0dmFyIGd1aWQgPSBcIlwiO1xyXG4gICAgXHQkLmFqYXhTZXR1cCh7XHJcbiAgICBcdFx0YXN5bmM6IGZhbHNlXHJcbiAgICBcdH0pO1xyXG4gICAgXHR0aGlzLiRnZXQoc3lzVXJsICsgXCIvc3lzZmlsZS9nZXRndWlkXCIsIHt9LCBmdW5jdGlvbiAoZGF0YSwgcmVzKSB7XHJcbiAgICBcdFx0Z3VpZCA9IGRhdGE7XHJcbiAgICBcdH0pXHJcbiAgICBcdCQuYWpheFNldHVwKHtcclxuICAgIFx0XHRhc3luYzogdHJ1ZVxyXG4gICAgXHR9KTtcclxuICAgIFx0cmV0dXJuIGd1aWQ7XHJcbiAgICB9XHJcblxyXG4gICAgb3duZXIuZ2V0T2JqQnlWYWx1ZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIFx0dmFyIHJlcyA9IG51bGw7XHJcbiAgICBcdHZhciBhcnIgPSBvYmouYXJyLFxyXG4gICAgXHRcdHRhcmdldCA9IG9iai50YXJnZXQsXHJcbiAgICBcdFx0a2V5ID0gb2JqLmtleSB8fCAna2V5JyxcclxuICAgIFx0XHR2YWx1ZSA9IG9iai52YWx1ZSB8fCAndmFsdWUnLFxyXG4gICAgXHRcdG1hcGtleSA9IG9iai5tYXBrZXkgfHwga2V5LFxyXG4gICAgXHRcdG1hcHZhbHVlID0gb2JqLm1hcHZhbHVlIHx8IHZhbHVlLFxyXG4gICAgXHRcdGFkZCA9IG9iai5hZGQgfHwgZmFsc2VcclxuXHJcbiAgICBcdHZhciBhcnJNYXAgPSB7fTtcclxuXHJcbiAgICBcdGlmICh0eXBlb2YgKG9iai50YXJnZXQpID09ICdzdHJpbmcnKSB7XHJcbiAgICBcdFx0YXJyLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIFx0XHRcdGFyck1hcFtlc2NhcGUoaXRlbVt2YWx1ZV0pXSA9IGl0ZW07XHJcbiAgICBcdFx0fSk7XHJcblxyXG4gICAgXHRcdHJlcyA9IHt9O1xyXG4gICAgXHRcdGlmIChhZGQpIHtcclxuICAgIFx0XHRcdHJlcyA9IGNsb25lKGFyck1hcFtlc2NhcGUodGFyZ2V0KV0pO1xyXG4gICAgXHRcdH07XHJcbiAgICBcdFx0cmVzW21hcGtleV0gPSBhcnJNYXBbZXNjYXBlKHRhcmdldCldW2tleV07XHJcbiAgICBcdFx0cmVzW21hcHZhbHVlXSA9IHRhcmdldDtcclxuICAgIFx0fSBlbHNlIGlmICgodHlwZW9mIChvYmoudGFyZ2V0KSA9PSAnb2JqZWN0JykgJiYgQXJyYXkuaXNBcnJheShvYmoudGFyZ2V0KSkge1xyXG4gICAgXHRcdHJlcyA9IFtdO1xyXG4gICAgXHRcdGFyci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICBcdFx0XHRhcnJNYXBbZXNjYXBlKGl0ZW1bdmFsdWVdKV0gPSBpdGVtO1xyXG4gICAgXHRcdH0pO1xyXG5cclxuICAgIFx0XHR0YXJnZXQuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdFx0cmVzLnB1c2goYXJyTWFwW2VzY2FwZShpdGVtKV0pXHJcbiAgICBcdFx0fSlcclxuICAgIFx0fVxyXG5cclxuICAgIFx0cmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIh+WIhnl5eXktTU0tZGQgaGg6bW06c3PmoLzlvI/nmoTlrZfnrKbkuLLmiJB5eXl5LU1NLWRk5qC85byPXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRpbWUg5pe26Ze05qC85byP5a2X56ym5LiyXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAg5pel5pyf5qC85byP5a2X56ym5LiyXHJcbiAgICAgKi9cclxuICAgIG93bmVyLnRpbWVUb0RhdGUgPSBmdW5jdGlvbiAodGltZSkge1xyXG4gICAgXHRpZiAoLyAvLnRlc3QodGltZSkpIHtcclxuICAgIFx0XHRyZXR1cm4gdGltZS5zcGxpdCgnICcpWzBdO1xyXG4gICAgXHR9IGVsc2Uge1xyXG4gICAgXHRcdHJldHVybiB0aW1lXHJcbiAgICBcdH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUn+aIkOafkOmVv+W6pumaj+acuuaVsOWtl+espuS4slxyXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBsZW5ndGgg6ZqP5py65a2X56ym5Liy6ZW/5bqmXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICDpmo/mnLrmlbDlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgb3duZXIuZ2V0UmFuZG9tID0gZnVuY3Rpb24gKGxlbmd0aCkge1xyXG4gICAgXHR2YXIgcmFuZG9tID0gTWF0aC5yYW5kb20oKSArICcnO1xyXG4gICAgXHRyZXR1cm4gcmFuZG9tLnNsaWNlKDIsIGxlbmd0aCArIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog55Sf5oiQ5b2T5YmN5pe26Ze05oizXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IOeUn+aIkOeahOaXtumXtOaIs1xyXG4gICAgICovXHJcbiAgICBvd25lci5nZXRUaW1lU3RybXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcdHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bCP5pWw6L2s55m+5YiG5pWw5a2X56ym5LiyXHJcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG51bSAgICDlsI/mlbBcclxuICAgICAqIEBwYXJhbSAge251bWJlcn0gbGVuZ3RoIOeUn+aIkOeZvuWIhuavlOeahOWwj+aVsOeCueWQjuS9jeaVsFxyXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gcmFuZ2Ug5piv5ZCm5bCG57uT5p6c6ZmQ5Yi25ZyoMC0xMDAlXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICDnmb7liIbmr5TlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgb3duZXIuZmxvYXRUb1BlcmNlbnQgPSBmdW5jdGlvbiAobnVtLCBsZW5ndGgsIHJhbmdlKSB7XHJcbiAgICBcdHZhciBjYWxjID0gKE51bWJlcihudW0pICogMTAwKTtcclxuICAgIFx0aWYgKGNhbGMgPiAxMDAgJiYgISFyYW5nZSkgY2FsYyA9IDEwMDtcclxuICAgIFx0cmV0dXJuIGNhbGMudG9GaXhlZChsZW5ndGgpICsgJyUnO1xyXG4gICAgfVxyXG5cclxuICAgIG93bmVyLnd4UGF5ID0gZnVuY3Rpb24gKG9iaiwgY2FsbGJhY2ssIGVycmNhbGxiYWNrKSB7XHJcbiAgICBcdC8v6LCD6LW35pSv5LuYXHJcbiAgICBcdFdlaXhpbkpTQnJpZGdlLmludm9rZSgnZ2V0QnJhbmRXQ1BheVJlcXVlc3QnLCB7XHJcbiAgICBcdFx0XCJhcHBJZFwiOiBvYmouYXBwSWQsXHJcbiAgICBcdFx0XCJ0aW1lU3RhbXBcIjogb2JqLnRpbWVTdGFtcCxcclxuICAgIFx0XHRcIm5vbmNlU3RyXCI6IG9iai5ub25jZVN0cixcclxuICAgIFx0XHRcInBhY2thZ2VcIjogb2JqLnBhY2thZ2UsXHJcbiAgICBcdFx0XCJzaWduVHlwZVwiOiBcIk1ENVwiLFxyXG4gICAgXHRcdFwicGF5U2lnblwiOiBvYmoucGF5U2lnblxyXG4gICAgXHR9LCBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICBcdFx0Ly/mlK/ku5jmiJDlip9cclxuICAgIFx0XHRpZiAocmVzLmVycl9tc2cgPT0gXCJnZXRfYnJhbmRfd2NwYXlfcmVxdWVzdDpva1wiKSB7XHJcbiAgICBcdFx0XHRhbGVydChcIuaUr+S7mOaIkOWKn1wiKTtcclxuICAgIFx0XHRcdCEhY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcclxuICAgIFx0XHR9IGVsc2UgaWYgKHJlcy5lcnJfbXNnID09IFwiZ2V0X2JyYW5kX3djcGF5X3JlcXVlc3Q6ZmFpbFwiKSB7XHJcbiAgICBcdFx0XHRhbGVydChcIuaUr+S7mOWksei0pe+8jOivt+mHjeivlVwiKTtcclxuICAgIFx0XHRcdCEhZXJyY2FsbGJhY2sgJiYgZXJyY2FsbGJhY2soKTtcclxuICAgIFx0XHR9IGVsc2UgaWYgKHJlcy5lcnJfbXNnID09IFwiZ2V0X2JyYW5kX3djcGF5X3JlcXVlc3Q6Y2FuY2VsXCIpIHtcclxuICAgIFx0XHRcdGFsZXJ0KFwi55So5oi35Y+W5raI5pSv5LuYXCIpO1xyXG4gICAgXHRcdFx0ISFlcnJjYWxsYmFjayAmJiBlcnJjYWxsYmFjaygpO1xyXG4gICAgXHRcdH0gZWxzZSB7XHJcbiAgICBcdFx0XHRhbGVydChyZXMuZXJyX21zZyk7XHJcbiAgICBcdFx0XHQhIWVycmNhbGxiYWNrICYmIGVycmNhbGxiYWNrKCk7XHJcbiAgICBcdFx0fTtcclxuICAgIFx0fSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuIvovb3lip/og71cclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gcGF0aCDpmYTku7bmnI3liqHlmajlrozmlbTlnLDlnYBcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAg57uT5p6cXHJcbiAgICAgKi9cclxuICAgIG93bmVyLmRvd25sb2FkZXIgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgXHR2YXIgZWxlQSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIFx0aWYgKCdkb3dubG9hZCcgaW4gZWxlQSkge1xyXG4gICAgXHRcdGVsZUEuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIHBhdGgpO1xyXG4gICAgXHRcdGVsZUEuc2V0QXR0cmlidXRlKCdocmVmJywgcGF0aCk7XHJcblxyXG4gICAgXHRcdGVsZUEuaW5uZXJIVE1MID0gJ2Rvd25sb2FkaW5nJztcclxuXHJcbiAgICBcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVBKTtcclxuXHJcbiAgICBcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICBcdFx0XHRlbGVBLmNsaWNrKCk7XHJcbiAgICBcdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZUEpO1xyXG4gICAgXHRcdH0sIDEwMDAgLyAyNCk7XHJcbiAgICBcdFx0cmV0dXJuIHRydWU7XHJcbiAgICBcdH07XHJcblxyXG4gICAgXHR0cnkge1xyXG4gICAgXHRcdHZhciBlbGVtSUYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xyXG4gICAgXHRcdGVsZW1JRi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICBcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtSUYpO1xyXG4gICAgXHRcdGVsZW1JRi5zcmMgPSBwYXRoO1xyXG4gICAgXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtSUYpO1xyXG4gICAgXHRcdH0sIDMzMyk7XHJcbiAgICBcdFx0cmV0dXJuIHRydWU7XHJcbiAgICBcdH0gY2F0Y2ggKGUpIHtcclxuICAgIFx0XHR2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcclxuICAgIFx0XHRmb3JtLnNldEF0dHJpYnV0ZSgnbWV0aG9kJywgJ2dldCcpO1xyXG4gICAgXHRcdGZvcm0uc2V0QXR0cmlidXRlKCdhY3Rpb24nLCBwYXRoKTtcclxuICAgIFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xyXG4gICAgXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgXHRcdFx0Zm9ybS5zdWJtaXQoKTtcclxuICAgIFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZm9ybSk7XHJcbiAgICBcdFx0fSwgMTAwMCAvIDI0KTtcclxuICAgIFx0XHRyZXR1cm4gdHJ1ZTtcclxuICAgIFx0fVxyXG5cclxuICAgIFx0aWYgKCF3aW5kb3cub3Blbih1cmwpKSB7IC8vIHBvcHVwIGJsb2NrZWQsIG9mZmVyIGRpcmVjdCBkb3dubG9hZDpcclxuICAgIFx0XHRpZiAoY29uZmlybShcIuivt+S9v+eUqOWPs+mUri3lj6blrZjkuLrov5vooYzkuIvovb3vvIzlrozmiJDlkI7ngrnlh7vlkI7pgIDov5Tlm57lvZPliY3pobXpnaJcIikpIHtcclxuICAgIFx0XHRcdGxvY2F0aW9uLmhyZWYgPSB1cmw7XHJcbiAgICBcdFx0fVxyXG4gICAgXHR9XHJcbiAgICBcdHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zu+54mH6L2sYmFzZTY057yW56CBXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgdXJsICAgICAgICAgIOaWh+S7tuWtmOWCqOi3r+W+hFxyXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrICAgICDlm57osIPlh73mlbBcclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gICBvdXRwdXRGb3JtYXQg5Zu+54mH57yW56CB57G75Z6LXHJcbiAgICAgKiBAcmV0dXJuIHtudWxsfSAgICAgICAgICAgICAgICDov5Tlm57lgLxcclxuICAgICAqL1xyXG4gICAgb3duZXIuaW1nVG9CYXNlNjQgPSBmdW5jdGlvbiAodXJsLCBjYWxsYmFjaywgb3V0cHV0Rm9ybWF0KSB7XHJcbiAgICBcdHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdDQU5WQVMnKSxcclxuICAgIFx0XHRjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcclxuICAgIFx0XHRpbWcgPSBuZXcgSW1hZ2U7XHJcbiAgICBcdGltZy5jcm9zc09yaWdpbiA9ICdBbm9ueW1vdXMnO1xyXG4gICAgXHRpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXHRcdGNhbnZhcy5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xyXG4gICAgXHRcdGNhbnZhcy53aWR0aCA9IGltZy53aWR0aDtcclxuICAgIFx0XHRjdHguZHJhd0ltYWdlKGltZywgMCwgMCk7XHJcbiAgICBcdFx0dmFyIGRhdGFVUkwgPSBjYW52YXMudG9EYXRhVVJMKG91dHB1dEZvcm1hdCB8fCAnaW1hZ2UvcG5nJyk7XHJcbiAgICBcdFx0Y2FsbGJhY2suY2FsbCh0aGlzLCBkYXRhVVJMKTtcclxuICAgIFx0XHRjYW52YXMgPSBudWxsO1xyXG4gICAgXHR9O1xyXG4gICAgXHRpbWcuc3JjID0gdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y6f5Z6L6ZO+57un5om/XHJcbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gc3ViVHlwZSAgIOWtkOexu1xyXG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259IHN1cGVyVHlwZSDniLbnsbtcclxuICAgICAqIEByZXR1cm4ge251bGx9ICAgICAgICAgICDov5Tlm57lgLxcclxuICAgICAqL1xyXG4gICAgb3duZXIuaW5oZXJpdFByb3RvdHlwZSA9IGZ1bmN0aW9uIChzdWJUeXBlLCBzdXBlclR5cGUpIHtcclxuICAgIFx0dmFyIHByb3RvVHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJUeXBlLnByb3RvdHlwZSk7XHJcbiAgICBcdC8vIE9iamVjdC5jcmVhciA9IGZ1bmN0aW9uKHN1cGVyVHlwZSkge1xyXG4gICAgXHQvLyBcdFx0dmFyIEYgPSBmdW5jdGlvbigpIHt9O1xyXG4gICAgXHQvLyBcdFx0Ri5wcm90b3R5cGUgPSBzdXBlclR5cGU7XHJcbiAgICBcdC8vIFx0XHRyZXR1cm4gbmV3IEYoKTtcclxuICAgIFx0Ly8gfVxyXG4gICAgXHRwcm90b1R5cGUuY29uc3RydWN0b3IgPSBzdWJUeXBlO1xyXG4gICAgXHRzdWJUeXBlLnByb3RvdHlwZSA9IHByb3RvVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW8guatpeWKoOi9vWpzXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHNyYyBqc+aWh+S7tui3r+W+hFxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgIOWKoOi9vee7k+aenFxyXG4gICAgICovXHJcbiAgICBvd25lci5sb2FkU2NyaXB0ID0gZnVuY3Rpb24gKHNyYykge1xyXG4gICAgXHRpZiAoIXNyYykge1xyXG4gICAgXHRcdHRocm93IG5ldyBFcnJvcign6K+35oyH5a6a6KaB5Yqg6L2955qEanPmlofku7bot6/lvoQnKTtcclxuICAgIFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgICBcdH07XHJcbiAgICBcdHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICBcdHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgXHRzLmFzeW5jID0gdHJ1ZTtcclxuICAgIFx0cy5zcmMgPSBzcmM7XHJcbiAgICBcdHZhciB4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xyXG4gICAgXHR4LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHMsIHgpO1xyXG4gICAgXHRyZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaVsOWtl+i9rOS4reaWh+mHkeminVxyXG4gICAgICogQHBhcmFtICB7bnVtYmVyfHN0cmluZ30gbiDmlbDlrZfph5Hpop1cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gICAgIOi9rOaNouWQjueahOS4reaWh+mHkeminVxyXG4gICAgICovXHJcbiAgICBvd25lci5BcmFiaWFfdG9fQ2hpbmVzZSA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgdmFyIGZyYWN0aW9uID0gWyfop5InLCAn5YiGJ107XHJcbiAgICAgICAgdmFyIGRpZ2l0ID0gWyfpm7YnLCAn5aO5JywgJ+i0sCcsICflj4EnLCAn6IKGJywgJ+S8jScsICfpmYYnLCAn5p+SJywgJ+aNjCcsICfnjpYnXTtcclxuICAgICAgICB2YXIgdW5pdCA9IFsgWyflhYMnLCAn5LiHJywgJ+S6vyddLCBbJycsICfmi74nLCAn5L2wJywgJ+S7nyddICBdO1xyXG4gICAgICAgIHZhciBoZWFkID0gbiA8IDAgPyAn5qygJzogJyc7XHJcbiAgICAgICAgbiA9IE1hdGguYWJzKG4pO1xyXG5cclxuICAgICAgICB2YXIgcyA9ICcnO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYWN0aW9uLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcyArPSAoZGlnaXRbTWF0aC5mbG9vcihuICogMTAgKiBNYXRoLnBvdygxMCwgaSkpICUgMTBdICsgZnJhY3Rpb25baV0pLnJlcGxhY2UoL+mbti4vLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHMgPSBzIHx8ICfmlbQnO1xyXG4gICAgICAgIG4gPSBNYXRoLmZsb29yKG4pO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRbMF0ubGVuZ3RoICYmIG4gPiAwOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgcCA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHVuaXRbMV0ubGVuZ3RoICYmIG4gPiAwOyBqKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHAgPSBkaWdpdFtuICUgMTBdICsgdW5pdFsxXVtqXSArIHA7XHJcbiAgICAgICAgICAgICAgICBuID0gTWF0aC5mbG9vcihuIC8gMTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHMgPSBwLnJlcGxhY2UoLyjpm7YuKSrpm7YkLywgJycpLnJlcGxhY2UoL14kLywgJ+mbticpICArIHVuaXRbMF1baV0gKyBzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGVhZCArIHMucmVwbGFjZSgvKOmbti4pKumbtuWFgy8sICflhYMnKS5yZXBsYWNlKC8o6Zu2LikrL2csICfpm7YnKS5yZXBsYWNlKC9e5pW0JC8sICfpm7blhYPmlbQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmBjeWOhuWei+Wvueixoea3t+WFpe+8jOWwhm9iaua3t+WFpXRhcmdldFxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvYmogICAg5b6F5re35YWl55qE5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IHRhcmdldCDmt7flhaXnm67moIflr7nosaFcclxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IHN0YXRlICDmmK/lkKbopobnm5bmt7flhaVcclxuICAgICAqIEByZXR1cm4ge29iamVjdH0gICAgICAgIOa3t+WFpeWQjueahOWvueixoVxyXG4gICAgICovXHJcbiAgICBvd25lci5taXhpbiA9IGZ1bmN0aW9uIChvYmosIHRhcmdldCwgc3RhdGUpIHtcclxuICAgIFx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIFx0XHRpZiAoc3RhdGUpIHtcclxuICAgIFx0XHRcdHRhcmdldFtrZXldID0gb2JqW2tleV07XHJcbiAgICBcdFx0fSBlbHNlIHtcclxuICAgIFx0XHRcdGlmICghdGFyZ2V0W2tleV0pXHJcbiAgICBcdFx0XHRcdHRhcmdldFtrZXldID0gb2JqW2tleV07XHJcbiAgICBcdFx0fVxyXG4gICAgXHR9KTtcclxuICAgIFx0cmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxufSkod2luZG93KVxyXG4iLCIvKipcclxuICog6LSj5Lu76ZO+57G7XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxud2luZG93LkNoYWluID0gZnVuY3Rpb24gKCkge1xyXG5cdHRoaXMuY2hhaW5fYXJyID0gW107XHJcbn1cclxud2luZG93LkNoYWluLnByb3RvdHlwZSA9IHtcclxuXHQvKipcclxuXHQgKiDpk77nmoTlhoXlrrlcclxuXHQgKiBAcGFyYW0gIHtmdW5jdGlvbn0gZnVuIOW+heaJp+ihjOWHveaVsO+8jOWMheWQq+S4pOS4quWPguaVsO+8mumAmueUqOWPguaVsOWPiuaJp+ihjOS4i+S4gOeOr+iKgueahOWHveaVsFxyXG5cdCAqIEByZXR1cm4ge3RoaXN9ICAgICDov5Tlm57oh6rouqvvvIzlj6/pk77lvI/osIPnlKhcclxuXHQgKi9cclxuXHRsaW5rOiBmdW5jdGlvbiAoZnVuKSB7XHJcblx0XHR2YXIgdGhhdCA9IHRoaXM7XHJcblx0XHRpZiAodHlwZW9mIChmdW4pID09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0dGhpcy5jaGFpbl9hcnIucHVzaChmdW4pO1xyXG5cdFx0fTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblx0LyoqXHJcblx0ICog5omn6KGM6LSj5Lu76ZO+XHJcblx0ICogQHBhcmFtICB7T2JqZWN0fSBvYmog6LSj5Lu76ZO+5Lit55qE6YCa55So5Y+C5pWwXHJcblx0ICogQHJldHVybiB7bnVsbH0gICAgIFtkZXNjcmlwdGlvbl1cclxuXHQgKi9cclxuXHRydW46IGZ1bmN0aW9uIChvYmopIHtcclxuXHRcdHZhciB0aGF0ID0gdGhpcyxcclxuXHRcdFx0aW5kZXggPSAwLFxyXG5cdFx0XHRvYmogPSBvYmo7XHJcblxyXG5cdFx0dmFyIGxvb3AgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHZhciB0aGlzX25vZGUgPSB0aGF0LmNoYWluX2FycltpbmRleF07XHJcblx0XHRcdGluZGV4Kys7XHJcblx0XHRcdGlmICghIXRoaXNfbm9kZSkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzX25vZGUob2JqLCBsb29wKVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdGxvb3AoKTtcclxuXHR9XHJcbn07XHJcbiIsIi8qKlxyXG4gKiDlr7zoiKrmoI9oYXNo5YC855uR5ZCs5Y+N6aaI57G7XHJcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqIOiuvue9ruWPguaVsHdhdGNo5a+56LGh5Lit5bqU5YyF5ZCr5b6F55uR5ZCs55qEa2V5XHJcbiAqIEByZXR1cm4ge251bGx9ICAgICDov5Tlm57lgLxcclxuICovXHJcbkhhc2hlciA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHR0aGlzLkluaXQob2JqKTtcclxufTtcclxuSGFzaGVyLnByb3RvdHlwZSA9IHtcclxuXHQkZGF0YToge30sXHJcblx0JHdhdGNoOiB7fSxcclxuXHRJbml0OiBmdW5jdGlvbiAob2JqKSB7XHJcblx0XHR2YXIgdGhhdCA9IHRoaXM7XHJcblx0XHQvL3VybOWPmOWMluebkeWQrOWZqFxyXG5cdFx0dGhpcy4kd2F0Y2ggPSBvYmoud2F0Y2g7XHJcblxyXG5cdFx0dmFyIG9iakRhdGEgPSBvYmouZGF0YSB8fCB7fTtcclxuXHRcdHRoaXMuJGRhdGEgPSBtaXhpbih0aGlzLmdldEhhc2goKSwgb2JqRGF0YSwgdHJ1ZSk7XHJcblxyXG5cdFx0dGhpcy5pbml0TGlzdGVuZXIodGhpcy4kZGF0YSk7XHJcblxyXG5cdFx0aWYgKCgnb25oYXNoY2hhbmdlJyBpbiB3aW5kb3cpICYmICgodHlwZW9mIGRvY3VtZW50LmRvY3VtZW50TW9kZSA9PT0gJ3VuZGVmaW5lZCcpIHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+PSA4KSkge1xyXG5cdFx0XHQvLyDmtY/op4jlmajmlK/mjIFvbmhhc2hjaGFuZ2Xkuovku7ZcclxuXHRcdFx0d2luZG93Lm9uaGFzaGNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dmFyIGNoYW5nZSA9IHRoYXQuaGFzaFdhdGNoZXIoZSk7XHJcblxyXG5cdFx0XHRcdHRoYXQuaW5pdExpc3RlbmVyKGNoYW5nZS5hZGQpO1xyXG5cdFx0XHRcdHRoYXQudXBkYXRlRGF0YShjaGFuZ2UudXBkYXRlKTtcclxuXHJcblx0XHRcdFx0dmFyIGRlbGVkID0ge307XHJcblx0XHRcdFx0Y2hhbmdlLmRlbC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcblx0XHRcdFx0XHRkZWxlZFtpdGVtXSA9ICcnO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHRoYXQudXBkYXRlRGF0YShkZWxlZCk7XHJcblx0XHRcdH07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ+aCqOeahOa1j+iniOWZqOS4jeaUr+aMgWhhc2jnm5HlkKzkuovku7YnKTtcclxuXHRcdH07XHJcblxyXG5cdFx0b2JqLm1vdW50ZWQgJiYgb2JqLm1vdW50ZWQuY2FsbCh0aGlzKTtcclxuXHR9LFxyXG5cdC8qKlxyXG5cdCAqIOWPr+i/lOWbnueahOWcqOWvvOiIquS4reWKoOWFpeWPguaVsO+8jOexu+avlGhpc3Rvcnnlr7nosaFwdXNoU3RhdGXmlrnms5VcclxuXHQgKiBAcGFyYW0gIHtzdHJpbmcvT2JqZWN0fSBrZXkgICDplK7miJblr7nosaFcclxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlIOWAvFxyXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gICAgICAg5paw55qE5Zyw5Z2A5YC8XHJcblx0ICovXHJcblx0cHVzaDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuXHRcdHZhciBuZXdIcmVmID0gdGhpcy5jcmVhck5ld0hyZWYoa2V5LCB2YWx1ZSk7XHJcblxyXG5cdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSAobmV3SHJlZik7XHJcblx0XHRyZXR1cm4gbmV3SHJlZjtcclxuXHR9LFxyXG5cdC8qKlxyXG5cdCAqIOS4jeWPr+i/lOWbnueahOWcqOWvvOiIquS4reWKoOWFpeWPguaVsO+8jOexu+avlGhpc3Rvcnnlr7nosaFyZXBsYWNlU3RhdGXmlrnms5VcclxuXHQgKiBAcGFyYW0gIHtzdHJpbmcvT2JqZWN0fSBrZXkgICDplK7miJblr7nosaFcclxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlIOWAvFxyXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gICAgICAg5paw55qE5Zyw5Z2A5YC8XHJcblx0ICovXHJcblx0cmVwbGFjZTogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuXHRcdHZhciBuZXdIcmVmID0gdGhpcy5jcmVhck5ld0hyZWYoa2V5LCB2YWx1ZSk7XHJcblxyXG5cdFx0d2luZG93LmxvY2F0aW9uLnJlcGxhY2UobmV3SHJlZik7XHJcblx0XHRyZXR1cm4gbmV3SHJlZjtcclxuXHR9LFxyXG5cdHRvSGFzaDogZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNhbGxiYWNrKSB7XHJcblx0XHR2YXIgaGFzaE9iaiA9IHRoaXMuZ2V0SGFzaCgpO1xyXG5cclxuXHRcdGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxuXHRcdFx0aGFzaE9ialtrZXldID0gdmFsdWU7XHJcblxyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRjYWxsYmFjayA9IHZhbHVlIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cdFx0XHRPYmplY3Qua2V5cyhrZXkpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuXHRcdFx0XHRoYXNoT2JqW2l0ZW1dID0ga2V5W2l0ZW1dXHJcblx0XHRcdH0pXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGhhc2hTdHIgPSAnIyc7XHJcblx0XHRmb3IgKHRrZXkgaW4gaGFzaE9iaikge1xyXG5cdFx0XHRpZiAodGtleSA9PSAnJHBhdGgnKVxyXG5cdFx0XHRcdGhhc2hTdHIgKz0gKGhhc2hPYmpbdGtleV0gKyAnJicpO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aGFzaFN0ciArPSAodGtleSArICc9JyArIGhhc2hPYmpbdGtleV0gKyAnJicpO1xyXG5cdFx0fTtcclxuXHRcdHJldHVybiBoYXNoU3RyLnNsaWNlKDAsIC0xKTtcclxuXHR9LFxyXG5cdGNyZWFyTmV3SHJlZjogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuXHRcdHZhciBoYXNoID0gdGhpcy50b0hhc2goa2V5LCB2YWx1ZSksXHJcblx0XHRcdGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuXHJcblx0XHRpZiAoISF3aW5kb3cubG9jYXRpb24uaGFzaCkge1xyXG5cdFx0XHRyZXR1cm4gKGhyZWYucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaGFzaCwgaGFzaCkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIChocmVmICsgaGFzaCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ld0hyZWY7XHJcblx0fSxcclxuXHRnZXRIYXNoOiBmdW5jdGlvbiAoKSB7XHJcblx0XHR2YXIgaGFzaCA9IFtdLCBoYXNoX3N0ciA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLCBoYW5kbGVUeXBlID0gMDtcclxuXHRcdHZhciBoYXNoX2NvbnRlbnQgPSBoYXNoX3N0ci5zcGxpdCgnIycpWzFdLCBoYXNoX3NlYXJjaCA9ICcnO1xyXG5cclxuXHRcdGlmKC9cXD8vLnRlc3QoaGFzaF9zdHIpKSB7XHJcblx0XHRcdGhhbmRsZVR5cGUgPSAxO1xyXG5cdFx0XHRpZigvXiNbXlxcPz0mIV0rXFw/L2cudGVzdChoYXNoX3N0cikpIHtcclxuXHRcdFx0XHRoYXNoX3NlYXJjaCA9IGhhc2hfY29udGVudDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YXIgYmVmb3JlID0gaGFzaF9jb250ZW50LnNwbGl0KCc/JylbMF07XHJcblx0XHRcdFx0dmFyIGFmdGVyID0gaGFzaF9jb250ZW50LnNwbGl0KCc/JylbMV07XHJcblx0XHRcdFx0aGFzaCA9IGJlZm9yZS5zcGxpdCgnJicpO1xyXG5cdFx0XHRcdHZhciBsYXN0ID0gaGFzaC5zcGxpY2UoLTEsIDEpO1xyXG5cclxuXHRcdFx0XHRoYXNoX3NlYXJjaCA9IGxhc3QgKyAnPycgKyBhZnRlcjtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRoYXNoID0gaGFzaF9zdHIuc3BsaXQoJyMnKVsxXS5zcGxpdChcIiZcIik7XHJcblx0XHRcdH0gY2F0Y2ggKGUpIHt9XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGhhc2hPYmogPSB7fTtcclxuXHRcdGhhc2guZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG5cdFx0XHRpZiAoLz0vLnRlc3QoaXRlbSkpXHJcblx0XHRcdFx0aGFzaE9ialtpdGVtLnNwbGl0KFwiPVwiKVswXV0gPSBpdGVtLnNwbGl0KFwiPVwiKVsxXTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGhhc2hPYmpbJyRwYXRoJ10gPSBpdGVtO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0aWYoaGFuZGxlVHlwZSkge1xyXG5cdFx0XHRoYXNoT2JqWyckcGF0aCddID0gaGFzaF9zZWFyY2g7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGhhc2hPYmo7XHJcblx0fSxcclxuXHRoYXNoV2F0Y2hlcjogZnVuY3Rpb24gKGUpIHtcclxuXHRcdHZhciB0aGF0ID0gdGhpcztcclxuXHRcdHZhciBuZXdIYXNoID0gdGhpcy5nZXRIYXNoKCk7XHJcblx0XHR2YXIgdXBkYXRlID0ge30sXHJcblx0XHRcdGFkZCA9IHt9LFxyXG5cdFx0XHRkZWwgPSBbXTtcclxuXHJcblx0XHRPYmplY3Qua2V5cyhuZXdIYXNoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuXHRcdFx0aWYgKHRoYXQuJGRhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmIG5ld0hhc2hba2V5XSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0YWRkW2tleV0gPSBuZXdIYXNoW2tleV07XHJcblx0XHRcdH0gZWxzZSBpZiAodGhhdC4kZGF0YVtrZXldICE9IG5ld0hhc2hba2V5XSkge1xyXG5cdFx0XHRcdHVwZGF0ZVtrZXldID0ge1xyXG5cdFx0XHRcdFx0b2xkOiB0aGF0LiRkYXRhW2tleV0sXHJcblx0XHRcdFx0XHRuZXc6IG5ld0hhc2hba2V5XVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0T2JqZWN0LmtleXModGhpcy4kZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcblx0XHRcdGlmICh0aGF0LiRkYXRhW2tleV0gIT09IHVuZGVmaW5lZCAmJiBuZXdIYXNoW2tleV0gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdGRlbC5wdXNoKGtleSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHVwZGF0ZTogdXBkYXRlLFxyXG5cdFx0XHRhZGQ6IGFkZCxcclxuXHRcdFx0ZGVsOiBkZWxcclxuXHRcdH1cclxuXHR9LFxyXG5cdGluaXRMaXN0ZW5lcjogZnVuY3Rpb24gKG9iaikge1xyXG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xyXG5cdFx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoYXQsIGtleSwge1xyXG5cdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoYXQuJGRhdGFba2V5XTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHNldDogZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHRcdHZhciBvbGRWYWwgPSB0aGF0LiRkYXRhW2tleV07XHJcblx0XHRcdFx0XHR0aGF0LiRkYXRhW2tleV0gPSBlO1xyXG5cdFx0XHRcdFx0aWYgKCEhdGhhdC4kd2F0Y2hba2V5XSlcclxuXHRcdFx0XHRcdFx0dGhhdC4kd2F0Y2hba2V5XShlLCBvbGRWYWwpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0dXBkYXRlRGF0YTogZnVuY3Rpb24gKG9iaikge1xyXG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xyXG5cdFx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuXHRcdFx0dGhhdFtrZXldID0gb2JqW2tleV0ubmV3O1xyXG5cdFx0fSlcclxuXHR9XHJcbn07XHJcbiIsIi8qKlxyXG4gKiDpga7nvanlsYLnsbtcclxuICogQHBhcmFtICAgICAgIHtPYmplY3R9IG9iaiDorr7nva5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5TaGFkZUJveCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHRoaXMuaW5pdChvYmopO1xyXG59O1xyXG5TaGFkZUJveC5wcm90b3R5cGUgPSB7XHJcbiAgICBlbDogbnVsbCxcclxuICAgIGFuaW1hdGU6IDMwMCxcclxuICAgIGxvY2s6IGZhbHNlLFxyXG4gICAgLyoqXHJcbiAgICAgKiDpga7nvanlsYLmnoTpgKDlh73mlbDvvIxib2R55pyr5bC+5Yib6YCg5LiA5Liq6ZqQ6JeP55qE5YWo5bGPZGl2XHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiDnm7jlhbPorr7nva7vvJp7XHJcbiAgICAgKiBzdHlsZTrpga7nvanlsYLmoLflvI8sXHJcbiAgICAgKiBhbmltYXRlOiDliqjnlLvmlYjmnpzmjIHnu63ml7bpl7Tpu5jorqQzMDBtcyxcclxuICAgICAqIGxvY2s6IOaYvuekuumBrue9qeaXtu+8jOaYr+WQpumUgeWummJvZHnnpoHmraLmu5rliqgsXHJcbiAgICAgKiBpbm5lckhUTUw6IOmBrue9qeWxguWGhWRvbeWtl+espuS4sn1cclxuICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH0gICAgIOaXoOi/lOWbnuWAvFxyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5LFxyXG4gICAgICAgICAgICBjb3ZlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxyXG4gICAgICAgICAgICBkZWZTdHlsZSA9IHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcclxuICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxyXG4gICAgICAgICAgICAgICAgekluZGV4OiA1MDAwLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogJ2FsbCcsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB0aGlzLmxvY2sgPSBvYmoubG9jaztcclxuXHJcbiAgICAgICAgaWYgKCEhb2JqLmFuaW1hdGUpIHtcclxuICAgICAgICAgICAgdmFyIGFuaSA9IG9iai5hbmltYXRlO1xyXG4gICAgICAgICAgICBpZiAoL3MvLnRlc3QoYW5pKSkge1xyXG4gICAgICAgICAgICAgICAgYW5pID0gTnVtYmVyKGFuaS5zcGxpdCgncycpWzBdKSAqIDEwMDA7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSA9IE51bWJlcihhbmkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWZTdHlsZS50cmFuc2l0aW9uID0gJ2FsbCAnICsgKHRoaXMuYW5pbWF0ZSAvIDEwMDApICsgJ3MnO1xyXG5cclxuICAgICAgICBtaXhpbihvYmouc3R5bGUsIGRlZlN0eWxlKTtcclxuICAgICAgICBPYmplY3Qua2V5cyhkZWZTdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGNvdmVyLnN0eWxlW2tleV0gPSBkZWZTdHlsZVtrZXldO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb3Zlci5pZCA9ICdjb3Zlcl9fZGl2LS0nICsgZ2V0UmFuZG9tKDUpO1xyXG5cclxuICAgICAgICBjb3Zlci5pbm5lckhUTUwgPSBvYmouaW5uZXJIVE1MIHx8ICcnO1xyXG5cclxuICAgICAgICBib2R5LmFwcGVuZENoaWxkKGNvdmVyKTtcclxuICAgICAgICB0aGlzLmVsID0gY292ZXI7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiDmmL7npLrpga7nvanlsYJcclxuICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH0g5peg6L+U5Zue5YC8XHJcbiAgICAgKi9cclxuICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5sb2NrID8gJ2hpZGRlbicgOiAnJztcclxuICAgICAgICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIHRoaXMuZWwuc3R5bGUub3BhY2l0eSA9IDE7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiDpmpDol4/pga7nvanlsYJcclxuICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH0g5peg6L+U5Zue5YC8XHJcbiAgICAgKi9cclxuICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJyc7XHJcbiAgICAgICAgdGhpcy5lbC5zdHlsZS5vcGFjaXR5ID0gMDtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSwgdGhpcy5hbmltYXRlKTtcclxuICAgIH1cclxufTtcclxuIiwiLyoqXHJcbiAqIGFqYXggY29kZeafpeivolxyXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgb2JqICAgICAg6L+U5Zue55qE5a+56LGhXHJcbiAqIEBwYXJhbSAge09iamVjdH0gICBzZXR0aW5ncyDmjqXlj6Pnm7jlhbPmtYvor5XvvIjpnZ7lv4XpobvvvIlcclxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIOWbnuiwg+WHveaVsFxyXG4gKiBAcmV0dXJuIHtudWxsfSAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cclxuICovXHJcbndpbmRvdy5hamF4UmVzQ2hlY2sgPSBmdW5jdGlvbiAob2JqLCBzZXR0aW5ncywgY2FsbGJhY2spIHtcclxuXHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XHJcblx0XHRjYWxsYmFjayA9IHNldHRpbmdzO1xyXG5cdH1cclxuXHJcblx0dmFyIHN3aXRjaE9iaiA9IHtcclxuXHRcdCd2JzogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHQhIWNhbGxiYWNrICYmIGNhbGxiYWNrKG9iai50ZGF0YSwgb2JqKTtcclxuXHRcdH0sXHJcblx0XHQncGdsaXN0JzogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHQhIWNhbGxiYWNrICYmIGNhbGxiYWNrKG9iaik7XHJcblx0XHR9LFxyXG5cdFx0J3ZhbGVycm9yJzogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAoIUlzTnVsbE9yRW1wdHkob2JqLm1zZykpIHtcclxuXHRcdFx0XHRTaG93TXNnQm94KG9iai5tc2csIFwiZXJyb3JcIik7XHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cdFx0J2xvZ2luLWluZGV4JzogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRTaG93TXNnQm94KG9iai5tc2csICdlcnJvcicsIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR2YXIgY29tcGFueSA9IGdldFNlc3Npb24oJ2NvbXBhbnknKSxcclxuXHRcdFx0XHRcdHVzZXIgPSBnZXRTZXNzaW9uKCd1c2VyJyk7XHJcblx0XHRcdFx0c2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcclxuXHRcdFx0XHRpZiAoIWNvbXBhbnkpIHtcclxuXHRcdFx0XHRcdGlmICh1c2VyLnVzZXJpZCA9PSAnMScpIHtcclxuXHRcdFx0XHRcdFx0d2luZG93LnRvcC5sb2NhdGlvbi5ocmVmID0gKGh0bWxVcmwgKyBcIi9wbGF0bG9naW4uaHRtbFwiKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0d2luZG93LnRvcC5sb2NhdGlvbi5ocmVmID0gKGh0bWxVcmwgKyBcIi9sb2dpbi5odG1sXCIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR3aW5kb3cudG9wLmxvY2F0aW9uLmhyZWYgPSAoJy8nICsgY29tcGFueSArIFwiL2xvZ2luXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cdFx0J2p1bXAtdXJsJzogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRTaG93TXNnQm94KG9iai5tc2csICdpbmZvJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHdpbmRvdy50b3AubG9jYXRpb24uaHJlZiA9IChodG1sVXJsICsgb2JqLnVybCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuICEhc3dpdGNoT2JqW29iai5jb2RlXSA/IHN3aXRjaE9ialtvYmouY29kZV0oKSA6ICgvXih0aHJvdy0pLy50ZXN0KG9iai5jb2RlKSA/IChmdW5jdGlvbigpe1xyXG5cdFx0b2JqLmNvZGUgPSBvYmouY29kZS5zcGxpdCgndGhyb3ctJylbMV07XHJcblx0XHRjYWxsYmFjayAmJiBjYWxsYmFjayhvYmopO1xyXG5cdH0oKSkgOiBTaG93TXNnQm94KG9iai5tc2csICdlcnJvcicsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeShzZXR0aW5ncykpO1xyXG5cdH0pKTtcclxuXHJcbn1cclxuXHJcbi8qKioqKioqKioqKioqKioqKipcclxuICoqKiBOb3RpZmljYXRpb24g5raI5oGv6YCa55+lXHJcbiAqKiogbXNnIOaPkOekuuS/oeaBr1xyXG4gKioqIHR5cGUg5raI5oGv57G75Z6LXHJcbiAqKioqKioqKioqKioqKioqKiovXHJcbndpbmRvdy5TaG93TXNnID0gZnVuY3Rpb24gKG1zZywgdHlwZSwgY2FsbGJhY2spIHtcclxuXHRjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cdHdpbmRvdy50b3AuJHZ1ZS4kbm90aWZ5KHtcclxuXHRcdG1lc3NhZ2U6IG1zZyxcclxuXHRcdHR5cGU6IHR5cGUgfHwgXCJ3YXJuaW5nXCIsXHJcblx0XHRvbkNsb3NlOiBjYWxsYmFja1xyXG5cdH0pO1xyXG5cdC8vJG1lc3NhZ2UoeyBzaG93Q2xvc2U6IHRydWUsIG1lc3NhZ2U6IG1zZywgdHlwZTogdHlwZSB8fCBcIndhcm5pbmdcIiwgZHVyYXRpb246IDE1MDAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBjb25maXJt56Gu6K6k6YCJ5oup5qGGXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbXNnICDmj5DnpLrkv6Hmga9cclxuICogQHBhcmFtICB7c3RyaW5nfSB0eXBlIOaPkOekuuexu+Wei1xyXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gY2IxICDnoa7orqTlm57osINcclxuICogQHBhcmFtICB7RnVuY3Rpb259IGNiMiAg5Y+W5raI5Zue6LCDXHJcbiAqIEByZXR1cm4ge251bGx9ICAgICAg5peg6L+U5Zue5YC8XHJcbiAqL1xyXG53aW5kb3cuU2hvd0NvbmZpcm0gPSBmdW5jdGlvbiAobXNnLCB0eXBlLCBjYjEsIGNiMikge1xyXG5cdGNiMSA9IGNiMSB8fCBmdW5jdGlvbiAoKSB7fTtcclxuXHRjYjIgPSBjYjIgfHwgZnVuY3Rpb24gKCkge307XHJcblx0d2luZG93LnRvcC4kdnVlLiRjb25maXJtKG1zZywgJ+aPkOekuicsIHtcclxuXHRcdGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJyxcclxuXHRcdGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLFxyXG5cdFx0dHlwZTogdHlwZSB8fCAnd2FybmluZycsXHJcblx0XHRzaG93Q2xvc2U6IGZhbHNlLFxyXG5cdFx0Y2FsbGJhY2s6IGZ1bmN0aW9uIChhY3Rpb24sIGluc3RhbmNlKSB7XHJcblx0XHRcdGlmIChhY3Rpb24gPT0gJ2NvbmZpcm0nKSB7XHJcblx0XHRcdFx0Y2IxKCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2IyKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KVxyXG59XHJcbiIsInZhciB3aW4gPSAoZnVuY3Rpb24oKSB7XHJcblx0ZnVuY3Rpb24gdG9TZWFyY2gob2JqLCBmbGFnKSB7XHJcblx0XHR2YXIgcmVzID0gJz8nXHJcblx0XHRpZiAodHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KG9iaikpIHtcclxuXHRcdFx0b2JqLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdFx0cmVzICs9ICgnWycgKyBpbmRleCArICddPScgKyBvd25lci50b1NlYXJjaChpdGVtLCB0cnVlKSArICcmJyk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqID09ICdvYmplY3QnKSB7XHJcblx0XHRcdE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBvYmpba2V5XSA9PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KG9ialtrZXldKSkge1xyXG5cdFx0XHRcdFx0b2JqW2tleV0uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuXHRcdFx0XHRcdFx0cmVzICs9IChrZXkgKyAnWycgKyBpbmRleCArICddPScgKyBvd25lci50b1NlYXJjaChpdGVtLCB0cnVlKSArICcmJylcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIG9ialtrZXldID09ICdvYmplY3QnICYmIG9ialtrZXldICE9IG51bGwpIHtcclxuXHRcdFx0XHRcdHJlcyArPSAob3duZXIudG9TZWFyY2gob2JqW2tleV0sIHRydWUpICsgJyYnKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dmFyIGl0ZW0gPSAvW1xcdTMyMjAtXFx1RkEyOV0vLnRlc3Qob2JqW2tleV0pID8gZXNjYXBlKG9ialtrZXldKSA6IG9ialtrZXldO1xyXG5cdFx0XHRcdFx0cmVzICs9IChrZXkgKyAnPScgKyAoaXRlbSB8fCAnJykgKyAnJicpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIG9iajtcclxuXHRcdH1cclxuXHRcdHJldHVybiAhIWZsYWcgPyByZXMuc2xpY2UoMSwgLTEpIDogcmVzLnNsaWNlKDAsIC0xKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGFyZ0hhbmRsZXIoKSB7XHJcblx0XHRjYWxsYmFjayA9ICh0eXBlb2YoYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV0pPT09J2Z1bmN0aW9uJykgPyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXSA6IGZ1bmN0aW9uKCkge307XHJcblx0XHRpZih0eXBlb2YoYXJndW1lbnRzWzBdKSA9PT0gJ3N0cmluZycpe1xyXG5cdFx0XHRjYWxsYmFjayhhcmd1bWVudHNbMF0pXHJcblx0XHR9ZWxzZSBpZih0eXBlb2YoYXJndW1lbnRzWzBdKSA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0dmFyIHBhdGggPSBhcmd1bWVudHNbMF0ucGF0aCxcclxuXHRcdFx0XHRxdWVyeSA9IGFyZ3VtZW50c1swXS5xdWVyeTtcclxuXHJcblx0XHRcdHZhciB1cmwgPSAodHlwZW9mKHF1ZXJ5KSA9PT0gJ29iamVjdCcpID8gKHBhdGggKyB0b1NlYXJjaChxdWVyeSkpIDogcGF0aDtcclxuXHRcdFx0Y2FsbGJhY2sodXJsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBhcmdBcnJCdWlsZGVyKGFyZywgY2FsbGJhY2spIHtcclxuXHRcdHZhciBhcmdBcnIgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBhcmcubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRhcmdBcnIucHVzaChhcmdbaV0pO1xyXG5cdFx0fVxyXG5cdFx0YXJnQXJyLnB1c2goY2FsbGJhY2spO1xyXG5cdFx0cmV0dXJuIGFyZ0FycjtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0ZzogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGFyZ0hhbmRsZXIuYXBwbHkodGhpcywgYXJnQXJyQnVpbGRlcihhcmd1bWVudHMsIGZ1bmN0aW9uKHVybCkge1xyXG5cdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xyXG5cdFx0XHR9KSk7XHJcblx0XHR9LFxyXG5cdFx0cjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGFyZ0hhbmRsZXIuYXBwbHkodGhpcywgYXJnQXJyQnVpbGRlcihhcmd1bWVudHMsIGZ1bmN0aW9uKHVybCkge1xyXG5cdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHVybCk7XHJcblx0XHRcdH0pKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKClcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gd2luXHJcbiIsIi8qKlxyXG4gKiDlr7lEYXRl55qE5omp5bGV77yM5bCGIERhdGUg6L2s5YyW5Li65oyH5a6a5qC85byP55qEU3RyaW5nXHJcbiAqIOaciChNKeOAgeaXpShkKeOAgTEy5bCP5pe2KGgp44CBMjTlsI/ml7YoSCnjgIHliIYobSnjgIHnp5IocynjgIHlkagoRSnjgIHlraPluqYocSkg5Y+v5Lul55SoIDEtMiDkuKrljaDkvY3nrKZcclxuICog5bm0KHkp5Y+v5Lul55SoIDEtNCDkuKrljaDkvY3nrKbvvIzmr6vnp5IoUynlj6rog73nlKggMSDkuKrljaDkvY3nrKYo5pivIDEtMyDkvY3nmoTmlbDlrZcpXHJcbiAqIGVnOlxyXG4gKiAobmV3IERhdGUoKSkucGF0dGVybihcInl5eXktTU0tZGQgaGg6bW06c3MuU1wiKSA9PT4gMjAwNi0wNy0wMiAwODowOTowNC40MjNcclxuICogKG5ldyBEYXRlKCkpLnBhdHRlcm4oXCJ5eXl5LU1NLWRkIEUgSEg6bW06c3NcIikgPT0+IDIwMDktMDMtMTAg5LqMIDIwOjA5OjA0XHJcbiAqIChuZXcgRGF0ZSgpKS5wYXR0ZXJuKFwieXl5eS1NTS1kZCBFRSBoaDptbTpzc1wiKSA9PT4gMjAwOS0wMy0xMCDlkajkuowgMDg6MDk6MDRcclxuICogKG5ldyBEYXRlKCkpLnBhdHRlcm4oXCJ5eXl5LU1NLWRkIEVFRSBoaDptbTpzc1wiKSA9PT4gMjAwOS0wMy0xMCDmmJ/mnJ/kuowgMDg6MDk6MDRcclxuICogKG5ldyBEYXRlKCkpLnBhdHRlcm4oXCJ5eXl5LU0tZCBoOm06cy5TXCIpID09PiAyMDA2LTctMiA4Ojk6NC4xOFxyXG7kvb/nlKjvvJooZXZhbCh2YWx1ZS5yZXBsYWNlKC9cXC9EYXRlXFwoKFxcZCspXFwpXFwvL2dpLCBcIm5ldyBEYXRlKCQxKVwiKSkpLnBhdHRlcm4oXCJ5eXl5LU0tZCBoOm06cy5TXCIpO1xyXG4gKi9cclxud2luZG93LkRhdGUucHJvdG90eXBlLnBhdHRlcm4gPSBmdW5jdGlvbiAoZm10KSB7XHJcblx0dmFyIG8gPSB7XHJcblx0XHRcIk0rXCI6IHRoaXMuZ2V0TW9udGgoKSArIDEsIC8v5pyI5Lu9XHJcblx0XHRcImQrXCI6IHRoaXMuZ2V0RGF0ZSgpLCAvL+aXpVxyXG5cdFx0XCJoK1wiOiB0aGlzLmdldEhvdXJzKCkgJSAxMiA9PSAwID8gMTIgOiB0aGlzLmdldEhvdXJzKCkgJSAxMiwgLy/lsI/ml7ZcclxuXHRcdFwiSCtcIjogdGhpcy5nZXRIb3VycygpLCAvL+Wwj+aXtlxyXG5cdFx0XCJtK1wiOiB0aGlzLmdldE1pbnV0ZXMoKSwgLy/liIZcclxuXHRcdFwicytcIjogdGhpcy5nZXRTZWNvbmRzKCksIC8v56eSXHJcblx0XHRcInErXCI6IE1hdGguZmxvb3IoKHRoaXMuZ2V0TW9udGgoKSArIDMpIC8gMyksIC8v5a2j5bqmXHJcblx0XHRcIlNcIjogdGhpcy5nZXRNaWxsaXNlY29uZHMoKSAvL+avq+enklxyXG5cdH07XHJcblx0dmFyIHdlZWsgPSB7XHJcblx0XHRcIjBcIjogXCIvdTY1ZTVcIixcclxuXHRcdFwiMVwiOiBcIi91NGUwMFwiLFxyXG5cdFx0XCIyXCI6IFwiL3U0ZThjXCIsXHJcblx0XHRcIjNcIjogXCIvdTRlMDlcIixcclxuXHRcdFwiNFwiOiBcIi91NTZkYlwiLFxyXG5cdFx0XCI1XCI6IFwiL3U0ZTk0XCIsXHJcblx0XHRcIjZcIjogXCIvdTUxNmRcIlxyXG5cdH07XHJcblx0aWYgKC8oeSspLy50ZXN0KGZtdCkpIHtcclxuXHRcdGZtdCA9IGZtdC5yZXBsYWNlKFJlZ0V4cC4kMSwgKHRoaXMuZ2V0RnVsbFllYXIoKSArIFwiXCIpLnN1YnN0cig0IC0gUmVnRXhwLiQxLmxlbmd0aCkpO1xyXG5cdH1cclxuXHRpZiAoLyhFKykvLnRlc3QoZm10KSkge1xyXG5cdFx0Zm10ID0gZm10LnJlcGxhY2UoUmVnRXhwLiQxLCAoKFJlZ0V4cC4kMS5sZW5ndGggPiAxKSA/IChSZWdFeHAuJDEubGVuZ3RoID4gMiA/IFwiL3U2NjFmL3U2NzFmXCIgOiBcIi91NTQ2OFwiKSA6IFwiXCIpICsgd2Vla1t0aGlzLmdldERheSgpICsgXCJcIl0pO1xyXG5cdH1cclxuXHRmb3IgKHZhciBrIGluIG8pIHtcclxuXHRcdGlmIChuZXcgUmVnRXhwKFwiKFwiICsgayArIFwiKVwiKS50ZXN0KGZtdCkpIHtcclxuXHRcdFx0Zm10ID0gZm10LnJlcGxhY2UoUmVnRXhwLiQxLCAoUmVnRXhwLiQxLmxlbmd0aCA9PSAxKSA/IChvW2tdKSA6ICgoXCIwMFwiICsgb1trXSkuc3Vic3RyKChcIlwiICsgb1trXSkubGVuZ3RoKSkpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gZm10O1xyXG59XHJcblxyXG53aW5kb3cuRGF0ZS5wcm90b3R5cGUuRm9ybWF0ID0gZnVuY3Rpb24gKGZtdCkgeyAvL2F1dGhvcjogbWVpenpcclxuXHR2YXIgbyA9IHtcclxuXHRcdFwiTStcIjogdGhpcy5nZXRNb250aCgpICsgMSwgLy/mnIjku71cclxuXHRcdFwiZCtcIjogdGhpcy5nZXREYXRlKCksIC8v5pelXHJcblx0XHRcIkgrXCI6IHRoaXMuZ2V0SG91cnMoKSwgLy/lsI/ml7ZcclxuXHRcdFwibStcIjogdGhpcy5nZXRNaW51dGVzKCksIC8v5YiGXHJcblx0XHRcInMrXCI6IHRoaXMuZ2V0U2Vjb25kcygpLCAvL+enklxyXG5cdFx0XCJxK1wiOiBNYXRoLmZsb29yKCh0aGlzLmdldE1vbnRoKCkgKyAzKSAvIDMpLCAvL+Wto+W6plxyXG5cdFx0XCJTXCI6IHRoaXMuZ2V0TWlsbGlzZWNvbmRzKCkgLy/mr6vnp5JcclxuXHR9O1xyXG5cdGlmICgvKHkrKS8udGVzdChmbXQpKSBmbXQgPSBmbXQucmVwbGFjZShSZWdFeHAuJDEsICh0aGlzLmdldEZ1bGxZZWFyKCkgKyBcIlwiKS5zdWJzdHIoNCAtIFJlZ0V4cC4kMS5sZW5ndGgpKTtcclxuXHRmb3IgKHZhciBrIGluIG8pXHJcblx0XHRpZiAobmV3IFJlZ0V4cChcIihcIiArIGsgKyBcIilcIikudGVzdChmbXQpKSBmbXQgPSBmbXQucmVwbGFjZShSZWdFeHAuJDEsIChSZWdFeHAuJDEubGVuZ3RoID09IDEpID8gKG9ba10pIDogKChcIjAwXCIgKyBvW2tdKS5zdWJzdHIoKFwiXCIgKyBvW2tdKS5sZW5ndGgpKSk7XHJcblx0cmV0dXJuIGZtdDtcclxufVxyXG4iLCIvKipcclxuICog54m55q6K5a2X56ym6L2s5LmJ5Y+K5Y+N6L2s5LmJXHJcbiAqIEBwYXJhbSAge0Jvb2xlYW59IGVuY29kZSDnsbvlnot0cnVl5Li66L2s5LmJZmFsc2XkuLrlj43ovazkuYlcclxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAg57uT5p6c5a2X56ym5LiyXHJcbiAqL1xyXG53aW5kb3cuU3RyaW5nLnByb3RvdHlwZS5odG1sID0gZnVuY3Rpb24gKGVuY29kZSkge1xyXG5cdHZhciByZXBsYWNlID0gW1wiJiMzOTtcIiwgXCInXCIsXHJcblx0XHRcIiZxdW90O1wiLCAnXCInLFxyXG5cdFx0XCImbmJzcDtcIiwgXCIgXCIsXHJcblx0XHRcIiZndDtcIiwgXCI+XCIsXHJcblx0XHRcIiZsdDtcIiwgXCI8XCIsXHJcblx0XHRcIiZhbXA7XCIsIFwiJlwiLFxyXG5cdFx0XCImeWVuO1wiLCBcIsKlXCIsXHJcblx0XHRcIiZsc3F1bztcIiwgXCLigJhcIixcclxuXHRcdFwiJnJzcXVvO1wiLCBcIuKAmVwiLFxyXG5cdFx0XCImaGVsbGlwO1wiLCBcIuKAplwiLFxyXG5cdFx0XCImbGRxdW87XCIsIFwi4oCcXCIsXHJcblx0XHRcIiZyZHF1bztcIiwgXCLigJ1cIixcclxuXHRcdFwiJm1kYXNoO1wiLCBcIuKAlFwiXHJcblx0XTtcclxuXHRpZiAoZW5jb2RlKSB7XHJcblx0XHRyZXBsYWNlLnJldmVyc2UoKTtcclxuXHR9XHJcblx0Zm9yICh2YXIgaSA9IDAsIHN0ciA9IHRoaXM7IGkgPCByZXBsYWNlLmxlbmd0aDsgaSArPSAyKSB7XHJcblx0XHRzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKHJlcGxhY2VbaV0sICdnJyksIHJlcGxhY2VbaSArIDFdKTtcclxuXHR9XHJcblx0cmV0dXJuIHN0cjtcclxufTtcclxuIiwiKGZ1bmN0aW9uKGZhY3RvcnkpIHtcclxuICAgIGlmKCF3aW5kb3cuVnVlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcign5peg5rOV5om+5YiwVnVl5a+56LGhJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYoIXdpbmRvdy4kKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcign5peg5rOV5om+5YiwJOWvueixoScpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGZhY3RvcnkoKTtcclxufSkoZnVuY3Rpb24oKSB7XHJcbiAgICAvL+W3peWFt+e7hOS7tmJ1c1xyXG5cdHdpbmRvdy4kYnVzID0gbmV3IFZ1ZSh7XHJcblxyXG5cdH0pO1xyXG5cclxuXHRWdWUucHJvdG90eXBlLiRnZXQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xyXG5cdFx0dmFyIHVybCwgZGF0YSwgY2FsbGJhY2ssIGZ6dHlwZTtcclxuXHJcblx0XHR1cmwgPSBhO1xyXG5cdFx0ZGF0YSA9ICcnO1xyXG5cdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcclxuXHRcdGZ6dHlwZSA9IGZhbHNlO1xyXG5cclxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIgJiYgdHlwZW9mIChiKSA9PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdGNhbGxiYWNrID0gYjtcclxuXHRcdH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyICYmIHR5cGVvZiAoYikgIT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRkYXRhID0gYjtcclxuXHRcdH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAzKSB7XHJcblx0XHRcdGlmICh0eXBlb2YgKGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0pID09ICdib29sZWFuJykge1xyXG5cdFx0XHRcdGRhdGEgPSBiO1xyXG5cdFx0XHRcdGZ6dHlwZSA9IGM7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGF0YSA9IGI7XHJcblx0XHRcdFx0Y2FsbGJhY2sgPSBjO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gNCkge1xyXG5cdFx0XHRkYXRhID0gYjtcclxuXHRcdFx0Y2FsbGJhY2sgPSBjO1xyXG5cdFx0XHRmenR5cGUgPSBkO1xyXG5cdFx0fVxyXG5cclxuXHRcdEFqYXhSZXF1ZXN0LmNhbGwodGhpcywge1xyXG5cdFx0XHR1cmw6IHVybCxcclxuXHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0dHlwZTogJ2dldCcsXHJcblx0XHRcdGNhbGxiYWNrOiBmdW5jdGlvbiAoZGF0YSwgcmVzKSB7XHJcblx0XHRcdFx0Y2FsbGJhY2suY2FsbCh0aGlzLCBkYXRhLCByZXMpXHJcblx0XHRcdH0uYmluZCh0aGlzKSxcclxuXHRcdFx0Znp0eXBlOiBmenR5cGVcclxuXHRcdH0pXHJcblx0fVxyXG5cclxuXHRWdWUucHJvdG90eXBlLiRwb3N0ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcclxuXHRcdHZhciB1cmwsIGRhdGEsIGNhbGxiYWNrLCBmenR5cGU7XHJcblxyXG5cdFx0dXJsID0gYTtcclxuXHRcdGRhdGEgPSAnJztcclxuXHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XHJcblx0XHRmenR5cGUgPSBmYWxzZTtcclxuXHJcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyICYmIHR5cGVvZiAoYikgPT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRjYWxsYmFjayA9IGI7XHJcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMiAmJiB0eXBlb2YgKGIpICE9ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0ZGF0YSA9IGI7XHJcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMykge1xyXG5cdFx0XHRpZiAodHlwZW9mIChhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdKSA9PSAnYm9vbGVhbicpIHtcclxuXHRcdFx0XHRkYXRhID0gYjtcclxuXHRcdFx0XHRmenR5cGUgPSBjO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRhdGEgPSBiO1xyXG5cdFx0XHRcdGNhbGxiYWNrID0gYztcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDQpIHtcclxuXHRcdFx0ZGF0YSA9IGI7XHJcblx0XHRcdGNhbGxiYWNrID0gYztcclxuXHRcdFx0Znp0eXBlID0gZDtcclxuXHRcdH1cclxuXHJcblx0XHRBamF4UmVxdWVzdC5jYWxsKHRoaXMsIHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdHR5cGU6ICdwb3N0JyxcclxuXHRcdFx0Y2FsbGJhY2s6IGZ1bmN0aW9uIChkYXRhLCByZXMpIHtcclxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKHRoaXMsIGRhdGEsIHJlcylcclxuXHRcdFx0fS5iaW5kKHRoaXMpLFxyXG5cdFx0XHRmenR5cGU6IGZ6dHlwZVxyXG5cdFx0fSlcclxuXHR9XHJcblxyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cdCAqKirlj5HpgIFhamF46K+35rGCXHJcblx0ICoqKiB1cmwg6K+35rGCdXJsLy9hXHJcblx0ICoqKiBkYXRhIOaPkOS6pOaVsOaNri8vYlxyXG5cdCAqKiogdHlwZSDor7fmsYLnsbvlnosvL2NcclxuXHQgKioqKioqIGNhbGxiYWNrIOivt+axguaIkOWKn+Wbnuiwgy8vY1xcZFxyXG5cdCAqZnp0eXBlIOaYr+WQpuWkjeadguWbnuiwg1xyXG5cdCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblx0ZnVuY3Rpb24gQWpheFJlcXVlc3Qoc2V0dGluZ3MpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdCR2dWUubG9hZGluZ0NvbnRyb2xsZXIgPSB0cnVlO1xyXG5cdFx0fSBjYXRjaCAoZSkge31cclxuXHJcblx0XHR2YXIgY19kYXRhID0gY2xvbmUoc2V0dGluZ3MuZGF0YSk7XHJcblxyXG5cdFx0Y19kYXRhID0gISFzZXR0aW5ncy5menR5cGUgPyBKU09OLnN0cmluZ2lmeShjX2RhdGEpIDogY19kYXRhO1xyXG5cdFx0dmFyIGNvbnRlbnRUeXBlID0gISFzZXR0aW5ncy5menR5cGUgPyAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JyA6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCc7XHJcblx0XHR2YXIgY2FsbGJhY2sgPSBzZXR0aW5ncy5jYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fVxyXG5cclxuXHRcdCQuYWpheCh7XHJcblx0XHRcdHVybDogL1xcPy8udGVzdChzZXR0aW5ncy51cmwpID8gc2V0dGluZ3MudXJsICsgJyZyYW5kb209JyArIGdldFRpbWVTdHJtcCgpIDogc2V0dGluZ3MudXJsICsgJz9yYW5kb209JyArIGdldFRpbWVTdHJtcCgpLFxyXG5cdFx0XHR0eXBlOiBzZXR0aW5ncy50eXBlIHx8ICdnZXQnLFxyXG5cdFx0XHRkYXRhOiBjX2RhdGEsXHJcblx0XHRcdGNvbnRlbnRUeXBlOiBjb250ZW50VHlwZSxcclxuXHRcdFx0aGVhZGVyczoge1xyXG5cdFx0XHRcdHBhZ2V1c2VyOiBnZXRTZXNzaW9uKCd1c2VyJykgPyBnZXRTZXNzaW9uKCd1c2VyJykudXNlcmlkIDogJydcclxuXHRcdFx0fSxcclxuXHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcblx0XHRcdFx0dmFyIG9iaiA9ICh0eXBlb2YgKGRhdGEpID09ICdzdHJpbmcnICYmIC97fH0vLnRlc3QoZGF0YSkpID8gSlNPTi5wYXJzZShkYXRhKSA6IGRhdGE7XHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdCR2dWUubG9hZGluZ0NvbnRyb2xsZXIgPSBmYWxzZTtcclxuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxyXG5cclxuXHRcdFx0XHQvL+WPjee8lueggVxyXG5cdFx0XHRcdGZ1bmN0aW9uIGRlY29kZSh0YXJnZXQpIHtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0ID09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xyXG5cdFx0XHRcdFx0XHR0YXJnZXQuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgaXRlbSA9PSAnc3RyaW5nJykgaXRlbSA9IGRlY29kZShpdGVtKTtcclxuXHRcdFx0XHRcdFx0XHRlbHNlIGRlY29kZShpdGVtKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXQgPT0gJ29iamVjdCcgJiYgISF0YXJnZXQpIHtcclxuXHRcdFx0XHRcdFx0T2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIHRhcmdldFtrZXldID09ICdzdHJpbmcnKSB0YXJnZXRba2V5XSA9IGRlY29kZSh0YXJnZXRba2V5XSk7XHJcblx0XHRcdFx0XHRcdFx0ZWxzZSBkZWNvZGUodGFyZ2V0W2tleV0pO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0Lmh0bWwoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZGVjb2RlKG9iaik7XHJcblxyXG5cclxuXHRcdFx0XHRhamF4UmVzQ2hlY2suY2FsbCh0aGlzLCBvYmosIHNldHRpbmdzLCBjYWxsYmFjayk7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vQUpBWOivt+axgue7k+adn+WQju+8jFxyXG5cdFx0XHRjb21wbGV0ZTogZnVuY3Rpb24gKHhociwgc3RhdHVzKSB7XHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdGlmICh4aHIucmVzcG9uc2VKU09OLnJlc3VsdCA9PSBcImxvZ2luLWluZGV4XCIpIHtcclxuXHRcdFx0XHRcdFx0aWYgKHdpbmRvdy5wYXJlbnQgIT0gd2luZG93KSB7XHJcblx0XHRcdFx0XHRcdFx0d2luZG93LnRvcC5sb2NhdGlvbi5ocmVmID0gaHRtbFVybCArIFwiL2xvZ2luLmh0bWxcIjtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRsb2NhdGlvbi5ocmVmID0gaHRtbFVybCArIFwiL2xvZ2luLmh0bWxcIjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRcdC8vIFRPRE86IGhhbmRsZSBleGNlcHRpb25cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdhamF4LWVycm9yOicgKyBzZXR0aW5ncy51cmwsIGVycm9yKVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcbiAgICAvL+WIm+W7um1haW5WdWVcclxuXHRmdW5jdGlvbiBtYWluVnVlKG9wdGlvbikge1xyXG5cdFx0d2luZG93LiR2dWUgPSBudWxsO1xyXG5cclxuXHRcdGlmICghIW9wdGlvbikge1xyXG5cdFx0XHR0aGlzLmluaXQob3B0aW9uKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG1haW5WdWUucHJvdG90eXBlID0ge1xyXG5cdFx0ZGF0YToge30sXHJcblx0XHRtZXRob2RzOiB7fSxcclxuXHRcdGNvbXB1dGVkOiB7fSxcclxuXHRcdHdhdGNoOiB7fSxcclxuXHRcdGNyZWF0ZWQ6IGZ1bmN0aW9uICgpIHt9LFxyXG5cdFx0bW91bnRlZDogZnVuY3Rpb24gKCkge30sXHJcblxyXG5cdFx0aW5pdDogZnVuY3Rpb24gKG9iaikge1xyXG5cdFx0XHR2YXIgb2JqZWN0ID0gISFvYmogPyBvYmogOiB0aGlzO1xyXG5cclxuXHRcdFx0aWYgKCEhb2JqKSB7XHJcblx0XHRcdFx0b2JqZWN0Lm1vdW50ZWQgPSBvYmplY3QubW91bnRlZCB8fCBmdW5jdGlvbiAoKSB7fTtcclxuXHRcdFx0XHRvYmplY3QuY3JlYXRlZCA9IG9iamVjdC5jcmVhdGVkIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRuZXcgVnVlKHtcclxuXHRcdFx0XHRlbDogXCIjbWFpbl9jb25cIixcclxuXHRcdFx0XHRkYXRhOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gb2JqZWN0LmRhdGFcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGNvbXB1dGVkOiBvYmplY3QuY29tcHV0ZWQsXHJcblx0XHRcdFx0d2F0Y2g6IG9iamVjdC53YXRjaCxcclxuXHRcdFx0XHRtZXRob2RzOiBvYmplY3QubWV0aG9kcyxcclxuXHRcdFx0XHRtb3VudGVkOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHR3aW5kb3cuJHZ1ZSA9IHRoaXM7XHJcblx0XHRcdFx0XHRvYmplY3QubW91bnRlZC5jYWxsKHRoaXMpO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0Y3JlYXRlZDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0d2luZG93LiR2dWUgPSB0aGlzO1xyXG5cdFx0XHRcdFx0Zm9ybVZhbGlkYXRlVHJhbnMoKTtcclxuXHJcblx0XHRcdFx0XHR0aGlzLmxvYWRpbmdDb250cm9sbGVyID0gdGhpcy5sb2FkaW5nQ29udHJvbGxlciB8fCBmYWxzZTtcclxuXHRcdFx0XHRcdHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRoaXMuZGlhbG9nVmlzaWJsZSB8fCBmYWxzZTtcclxuXHRcdFx0XHRcdHRoaXMuc2VhcmNoS2V5ID0gdGhpcy5zZWFyY2hLZXkgfHwgJyc7XHJcblx0XHRcdFx0XHR0aGlzLnRhYmxlRGF0YSA9IHRoaXMudGFibGVEYXRhIHx8IFtdO1xyXG5cclxuXHRcdFx0XHRcdG9iamVjdC5jcmVhdGVkLmNhbGwodGhpcyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0ZGF0YTogZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcclxuXHRcdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMykge1xyXG5cdFx0XHRcdHZhciBhX3VybCA9IGEsXHJcblx0XHRcdFx0XHRhX2RhdGFfb2JqID0gYixcclxuXHRcdFx0XHRcdHN1Y2Nlc3NfY2FsbGJhY2sgPSBjIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cdFx0XHRcdChmdW5jdGlvbiAoYTEsIGIxLCBjMSkge1xyXG5cdFx0XHRcdFx0QWpheFJlcXVlc3QoYTEsIGIxLCBcImdldFwiLCBmdW5jdGlvbiAoZGF0YSwgcmVzKSB7XHJcblx0XHRcdFx0XHRcdGMxKGRhdGEsIHJlcyk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH0pKGFfdXJsLCBhX2RhdGFfb2JqLCBzdWNjZXNzX2NhbGxiYWNrKVxyXG5cdFx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gNCkge1xyXG5cdFx0XHRcdHZhciBhX3VybCA9IGEsXHJcblx0XHRcdFx0XHRhX2RhdGFfb2JqID0gYixcclxuXHRcdFx0XHRcdGFfdHlwZSA9IGMsXHJcblx0XHRcdFx0XHRzdWNjZXNzX2NhbGxiYWNrID0gZCB8fCBmdW5jdGlvbiAoKSB7fTtcclxuXHRcdFx0XHQoZnVuY3Rpb24gKGExLCBiMSwgYzEsIGQxKSB7XHJcblx0XHRcdFx0XHRBamF4UmVxdWVzdChhMSwgYjEsIGMxLCBmdW5jdGlvbiAoZGF0YSwgcmVzKSB7XHJcblx0XHRcdFx0XHRcdGQxKGRhdGEsIHJlcyk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH0pKGFfdXJsLCBhX2RhdGFfb2JqLCBhX3R5cGUsIHN1Y2Nlc3NfY2FsbGJhY2spXHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0fTtcclxuXHJcbiAgICAvKipcclxuXHQgKiDpqozor4HlsZ7mgKfmmK/lkKblrZjlnKjvvIzkuLp0cnVl5oiWJydcclxuXHQgKiBAcGFyYW0gIHtzdHJ9ICB0YXJnZXQg5b6F6aqM6K+B55uu5qCHXHJcblx0ICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgIOi/lOWbnuWAvO+8jOWtmOWcqOacqnRydWXvvIzlj43kuYtmYWxzZVxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIGlzRXhpc3QodGFyZ2V0KSB7XHJcblx0XHRpZiAodGFyZ2V0ICE9IG51bGwgJiYgdGFyZ2V0ICE9IHVuZGVmaW5lZCAmJiB0YXJnZXQgIT0gJ2ZhbHNlJykge1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8v6KGo5Y2V6aqM6K+B6aKE5aSE55CGXHJcblx0ZnVuY3Rpb24gZm9ybVZhbGlkYXRlVHJhbnMoKSB7XHJcblxyXG5cdFx0dmFyIG5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZWwtZm9ybS1pdGVtJyksXHJcblx0XHRcdHR5cGVBcnIgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbicsICdtZXRob2QnLCAncmVnZXhwJywgJ2ludGVnZXInLCAnZmxvYXQnLCAnYXJyYXknLCAnb2JqZWN0JywgJ2VudW0nLCAnZGF0ZScsICd1cmwnLCAnaGV4JywgJ2VtYWlsJ107XHJcblx0XHRcdHR5cGVNYXAgPSBbJ+Wtl+espuS4sicsICfmlbDlrZcnLCAn5biD5bCUJywgJ21ldGhvZCcsICfmraPliJknLCAnaW50ZWdlcicsICfmta7ngrnmlbAnLCAn5pWw57uEJywgJ+WvueixoScsICdlbnVtJywgJ+aXpeacnycsICd1cmzlnLDlnYAnLCAn5ZOI5biMJywgJ+eUteWtkOmCruS7tiddO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIHJ1bGVzID0gW10sXHJcblx0XHRcdFx0bW9iaWxlVmFsU3RyID0gJyc7XHJcblxyXG5cdFx0XHRpZiAoaXNFeGlzdChub2RlTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJykpKSB7XHJcblx0XHRcdFx0dmFyIHRyaWdnZXIgPSBbJ2JsdXInXVxyXG5cdFx0XHRcdGlmIChpc0V4aXN0KG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSgnY2hhbmdlJykpKSB7XHJcblx0XHRcdFx0XHR0cmlnZ2VyLnB1c2goXCJjaGFuZ2VcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJ1bGVzLnB1c2goe1xyXG5cdFx0XHRcdFx0J3JlcXVpcmVkJzogJ3RydWUnLFxyXG5cdFx0XHRcdFx0J21lc3NhZ2UnOiAn6K+36L6T5YWlJyArIG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSgnbGFiZWwnKSxcclxuXHRcdFx0XHRcdCd0cmlnZ2VyJzogdHJpZ2dlclxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0bm9kZUxpc3RbaV0ucmVtb3ZlQXR0cmlidXRlKCdyZXF1aXJlZCcpO1xyXG5cdFx0XHRcdG5vZGVMaXN0W2ldLnJlbW92ZUF0dHJpYnV0ZSgnY2hhbmdlJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChpc0V4aXN0KG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSgnbWluJykpKSB7XHJcblx0XHRcdFx0cnVsZXMucHVzaCh7XHJcblx0XHRcdFx0XHQnbWluJzogcGFyc2VJbnQobm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdtaW4nKSksXHJcblx0XHRcdFx0XHQnbWVzc2FnZSc6ICfoh7PlsJHovpPlhaUnICsgbm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdtaW4nKSArICfkuKrlrZfnrKYnLFxyXG5cdFx0XHRcdFx0J3RyaWdnZXInOiAnYmx1cidcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdG5vZGVMaXN0W2ldLnJlbW92ZUF0dHJpYnV0ZSgnbWluJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChpc0V4aXN0KG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSgnbWF4JykpKSB7XHJcblx0XHRcdFx0cnVsZXMucHVzaCh7XHJcblx0XHRcdFx0XHQnbWF4JzogcGFyc2VJbnQobm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdtYXgnKSksXHJcblx0XHRcdFx0XHQnbWVzc2FnZSc6ICfoh7PlpJrovpPlhaUnICsgbm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdtYXgnKSArICfkuKrlrZfnrKYnLFxyXG5cdFx0XHRcdFx0J3RyaWdnZXInOiAnYmx1cidcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdG5vZGVMaXN0W2ldLnJlbW92ZUF0dHJpYnV0ZSgnbWF4Jyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChpc0V4aXN0KG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSgnbW9iaWxlJykpKSB7XHJcblx0XHRcdFx0bW9iaWxlVmFsU3RyID0gJ3sgXCJ2YWxpZGF0b3JcIjp2YWxpZGF0b3JPYmoubW9iaWxlLFwidHJpZ2dlclwiOiBbXCJibHVyXCIsIFwiY2hhbmdlXCJdfSc7XHJcblx0XHRcdFx0bm9kZUxpc3RbaV0ucmVtb3ZlQXR0cmlidXRlKCdtb2JpbGUnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoaXNFeGlzdChub2RlTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ2FycmF5dmFsdWUnKSkpIHtcclxuXHRcdFx0XHRtb2JpbGVWYWxTdHIgPSAneyBcInZhbGlkYXRvclwiOnZhbGlkYXRvck9iai5hcnJheXZhbHVlLFwidHJpZ2dlclwiOiBbXCJibHVyXCIsIFwiY2hhbmdlXCJdfSc7XHJcblx0XHRcdFx0bm9kZUxpc3RbaV0ucmVtb3ZlQXR0cmlidXRlKCdhcnJheXZhbHVlJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgdHlwZUFyci5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGlmIChub2RlTGlzdFtpXS5nZXRBdHRyaWJ1dGUodHlwZUFycltqXSkgIT0gbnVsbCAmJiBub2RlTGlzdFtpXS5nZXRBdHRyaWJ1dGUodHlwZUFycltqXSkgIT0gdW5kZWZpbmVkICYmIG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSh0eXBlQXJyW2pdKSAhPSAnZmFsc2UnKSB7XHJcblx0XHRcdFx0XHRydWxlcy5wdXNoKHtcclxuXHRcdFx0XHRcdFx0J3R5cGUnOiB0eXBlQXJyW2pdLFxyXG5cdFx0XHRcdFx0XHQnbWVzc2FnZSc6ICfor7fovpPlhaXmraPnoa7nmoQnICsgdHlwZU1hcFtqXSArICfmoLzlvI8nLFxyXG5cdFx0XHRcdFx0XHQndHJpZ2dlcic6IFsnYmx1cicsICdjaGFuZ2UnXVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblxyXG5cclxuXHRcdFx0dmFyIG9sZFJ1bGVzID0gbm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCc6cnVsZXMnKSB8fCAnW10nLFxyXG5cdFx0XHRcdHNsaWNlZFJ1bGVzID0gSlNPTi5zdHJpbmdpZnkocnVsZXMpLnNsaWNlKDEsIC0xKTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGRvdEJ1aWxkZXIoc3RyKSB7XHJcblx0XHRcdFx0cmV0dXJuICEhc3RyID8gJywnIDogJydcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIG5ld1J1bGVzU3RyID0gJ1snICsgc2xpY2VkUnVsZXMgKyBkb3RCdWlsZGVyKHNsaWNlZFJ1bGVzKSArIG1vYmlsZVZhbFN0ciArIGRvdEJ1aWxkZXIobW9iaWxlVmFsU3RyKSArIG9sZFJ1bGVzLnNsaWNlKDEsIC0xKSArICddJztcclxuXHRcdFx0bmV3UnVsZXNTdHIgPSBuZXdSdWxlc1N0ci5yZXBsYWNlKC9cIi9nLCBcIidcIik7XHJcblx0XHRcdG5vZGVMaXN0W2ldLnNldEF0dHJpYnV0ZSgnOnJ1bGVzJywgbmV3UnVsZXNTdHIpO1xyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBtYWluVnVlO1xyXG59KVxyXG4iXSwic291cmNlUm9vdCI6IiJ9