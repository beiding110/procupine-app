!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("mainVue",[],n):"object"==typeof exports?exports.mainVue=n():t.mainVue=n()}(window,function(){return function(t){var n={};function r(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)r.d(e,i,function(n){return t[n]}.bind(null,i));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=125)}([function(t,n,r){var e=r(2),i=r(18),o=r(11),u=r(12),c=r(19),a=function(t,n,r){var f,s,l,h,p=t&a.F,v=t&a.G,d=t&a.S,g=t&a.P,y=t&a.B,m=v?e:d?e[n]||(e[n]={}):(e[n]||{}).prototype,w=v?i:i[n]||(i[n]={}),b=w.prototype||(w.prototype={});for(f in v&&(r=n),r)l=((s=!p&&m&&void 0!==m[f])?m:r)[f],h=y&&s?c(l,e):g&&"function"==typeof l?c(Function.call,l):l,m&&u(m,f,l,t&a.U),w[f]!=l&&o(w,f,h),g&&b[f]!=l&&(b[f]=l)};e.core=i,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,r){var e=r(4);t.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},function(t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,r){var e=r(49)("wks"),i=r(33),o=r(2).Symbol,u="function"==typeof o;(t.exports=function(t){return e[t]||(e[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=e},function(t,n,r){t.exports=!r(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,r){var e=r(1),i=r(91),o=r(22),u=Object.defineProperty;n.f=r(6)?Object.defineProperty:function(t,n,r){if(e(t),n=o(n,!0),e(r),i)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},function(t,n,r){var e=r(24),i=Math.min;t.exports=function(t){return t>0?i(e(t),9007199254740991):0}},function(t,n,r){var e=r(23);t.exports=function(t){return Object(e(t))}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,r){var e=r(7),i=r(32);t.exports=r(6)?function(t,n,r){return e.f(t,n,i(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n,r){var e=r(2),i=r(11),o=r(14),u=r(33)("src"),c=Function.toString,a=(""+c).split("toString");r(18).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,r,c){var f="function"==typeof r;f&&(o(r,"name")||i(r,"name",n)),t[n]!==r&&(f&&(o(r,u)||i(r,u,t[n]?""+t[n]:a.join(String(n)))),t===e?t[n]=r:c?t[n]?t[n]=r:i(t,n,r):(delete t[n],i(t,n,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n,r){var e=r(0),i=r(3),o=r(23),u=/"/g,c=function(t,n,r,e){var i=String(o(t)),c="<"+n;return""!==r&&(c+=" "+r+'="'+String(e).replace(u,"&quot;")+'"'),c+">"+i+"</"+n+">"};t.exports=function(t,n){var r={};r[t]=n(c),e(e.P+e.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",r)}},function(t,n){var r={}.hasOwnProperty;t.exports=function(t,n){return r.call(t,n)}},function(t,n,r){var e=r(46),i=r(23);t.exports=function(t){return e(i(t))}},function(t,n,r){var e=r(47),i=r(32),o=r(15),u=r(22),c=r(14),a=r(91),f=Object.getOwnPropertyDescriptor;n.f=r(6)?f:function(t,n){if(t=o(t),n=u(n,!0),a)try{return f(t,n)}catch(t){}if(c(t,n))return i(!e.f.call(t,n),t[n])}},function(t,n,r){var e=r(14),i=r(9),o=r(66)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),e(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n){var r=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=r)},function(t,n,r){var e=r(10);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,i){return t.call(n,r,e,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,n,r){"use strict";var e=r(3);t.exports=function(t,n){return!!t&&e(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,r){var e=r(4);t.exports=function(t,n){if(!e(t))return t;var r,i;if(n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!e(i=r.call(t)))return i;if(!n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n){var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},function(t,n,r){var e=r(0),i=r(18),o=r(3);t.exports=function(t,n){var r=(i.Object||{})[t]||Object[t],u={};u[t]=n(r),e(e.S+e.F*o(function(){r(1)}),"Object",u)}},function(t,n,r){var e=r(19),i=r(46),o=r(9),u=r(8),c=r(83);t.exports=function(t,n){var r=1==t,a=2==t,f=3==t,s=4==t,l=6==t,h=5==t||l,p=n||c;return function(n,c,v){for(var d,g,y=o(n),m=i(y),w=e(c,v,3),b=u(m.length),S=0,x=r?p(n,b):a?p(n,0):void 0;b>S;S++)if((h||S in m)&&(g=w(d=m[S],S,y),t))if(r)x[S]=g;else if(g)switch(t){case 3:return!0;case 5:return d;case 6:return S;case 2:x.push(d)}else if(s)return!1;return l?-1:f||s?s:x}}},function(t,n,r){"use strict";if(r(6)){var e=r(30),i=r(2),o=r(3),u=r(0),c=r(60),a=r(89),f=r(19),s=r(39),l=r(32),h=r(11),p=r(41),v=r(24),d=r(8),g=r(117),y=r(35),m=r(22),w=r(14),b=r(48),S=r(4),x=r(9),_=r(80),E=r(36),O=r(17),M=r(37).f,A=r(82),j=r(33),P=r(5),F=r(26),N=r(50),k=r(57),I=r(85),T=r(44),R=r(54),L=r(38),C=r(84),D=r(107),$=r(7),W=r(16),B=$.f,V=W.f,U=i.RangeError,G=i.TypeError,H=i.Uint8Array,z=Array.prototype,q=a.ArrayBuffer,J=a.DataView,Y=F(0),K=F(2),X=F(3),Z=F(4),Q=F(5),tt=F(6),nt=N(!0),rt=N(!1),et=I.values,it=I.keys,ot=I.entries,ut=z.lastIndexOf,ct=z.reduce,at=z.reduceRight,ft=z.join,st=z.sort,lt=z.slice,ht=z.toString,pt=z.toLocaleString,vt=P("iterator"),dt=P("toStringTag"),gt=j("typed_constructor"),yt=j("def_constructor"),mt=c.CONSTR,wt=c.TYPED,bt=c.VIEW,St=F(1,function(t,n){return Mt(k(t,t[yt]),n)}),xt=o(function(){return 1===new H(new Uint16Array([1]).buffer)[0]}),_t=!!H&&!!H.prototype.set&&o(function(){new H(1).set({})}),Et=function(t,n){var r=v(t);if(r<0||r%n)throw U("Wrong offset!");return r},Ot=function(t){if(S(t)&&wt in t)return t;throw G(t+" is not a typed array!")},Mt=function(t,n){if(!(S(t)&&gt in t))throw G("It is not a typed array constructor!");return new t(n)},At=function(t,n){return jt(k(t,t[yt]),n)},jt=function(t,n){for(var r=0,e=n.length,i=Mt(t,e);e>r;)i[r]=n[r++];return i},Pt=function(t,n,r){B(t,n,{get:function(){return this._d[r]}})},Ft=function(t){var n,r,e,i,o,u,c=x(t),a=arguments.length,s=a>1?arguments[1]:void 0,l=void 0!==s,h=A(c);if(null!=h&&!_(h)){for(u=h.call(c),e=[],n=0;!(o=u.next()).done;n++)e.push(o.value);c=e}for(l&&a>2&&(s=f(s,arguments[2],2)),n=0,r=d(c.length),i=Mt(this,r);r>n;n++)i[n]=l?s(c[n],n):c[n];return i},Nt=function(){for(var t=0,n=arguments.length,r=Mt(this,n);n>t;)r[t]=arguments[t++];return r},kt=!!H&&o(function(){pt.call(new H(1))}),It=function(){return pt.apply(kt?lt.call(Ot(this)):Ot(this),arguments)},Tt={copyWithin:function(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return C.apply(Ot(this),arguments)},filter:function(t){return At(this,K(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Y(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ft.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return St(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,r=Math.floor(n/2),e=0;e<r;)t=this[e],this[e++]=this[--n],this[n]=t;return this},some:function(t){return X(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return st.call(Ot(this),t)},subarray:function(t,n){var r=Ot(this),e=r.length,i=y(t,e);return new(k(r,r[yt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,d((void 0===n?e:y(n,e))-i))}},Rt=function(t,n){return At(this,lt.call(Ot(this),t,n))},Lt=function(t){Ot(this);var n=Et(arguments[1],1),r=this.length,e=x(t),i=d(e.length),o=0;if(i+n>r)throw U("Wrong length!");for(;o<i;)this[n+o]=e[o++]},Ct={entries:function(){return ot.call(Ot(this))},keys:function(){return it.call(Ot(this))},values:function(){return et.call(Ot(this))}},Dt=function(t,n){return S(t)&&t[wt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},$t=function(t,n){return Dt(t,n=m(n,!0))?l(2,t[n]):V(t,n)},Wt=function(t,n,r){return!(Dt(t,n=m(n,!0))&&S(r)&&w(r,"value"))||w(r,"get")||w(r,"set")||r.configurable||w(r,"writable")&&!r.writable||w(r,"enumerable")&&!r.enumerable?B(t,n,r):(t[n]=r.value,t)};mt||(W.f=$t,$.f=Wt),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:$t,defineProperty:Wt}),o(function(){ht.call({})})&&(ht=pt=function(){return ft.call(this)});var Bt=p({},Tt);p(Bt,Ct),h(Bt,vt,Ct.values),p(Bt,{slice:Rt,set:Lt,constructor:function(){},toString:ht,toLocaleString:It}),Pt(Bt,"buffer","b"),Pt(Bt,"byteOffset","o"),Pt(Bt,"byteLength","l"),Pt(Bt,"length","e"),B(Bt,dt,{get:function(){return this[wt]}}),t.exports=function(t,n,r,a){var f=t+((a=!!a)?"Clamped":"")+"Array",l="get"+t,p="set"+t,v=i[f],y=v||{},m=v&&O(v),w=!v||!c.ABV,x={},_=v&&v.prototype,A=function(t,r){B(t,r,{get:function(){return function(t,r){var e=t._d;return e.v[l](r*n+e.o,xt)}(this,r)},set:function(t){return function(t,r,e){var i=t._d;a&&(e=(e=Math.round(e))<0?0:e>255?255:255&e),i.v[p](r*n+i.o,e,xt)}(this,r,t)},enumerable:!0})};w?(v=r(function(t,r,e,i){s(t,v,f,"_d");var o,u,c,a,l=0,p=0;if(S(r)){if(!(r instanceof q||"ArrayBuffer"==(a=b(r))||"SharedArrayBuffer"==a))return wt in r?jt(v,r):Ft.call(v,r);o=r,p=Et(e,n);var y=r.byteLength;if(void 0===i){if(y%n)throw U("Wrong length!");if((u=y-p)<0)throw U("Wrong length!")}else if((u=d(i)*n)+p>y)throw U("Wrong length!");c=u/n}else c=g(r),o=new q(u=c*n);for(h(t,"_d",{b:o,o:p,l:u,e:c,v:new J(o)});l<c;)A(t,l++)}),_=v.prototype=E(Bt),h(_,"constructor",v)):o(function(){v(1)})&&o(function(){new v(-1)})&&R(function(t){new v,new v(null),new v(1.5),new v(t)},!0)||(v=r(function(t,r,e,i){var o;return s(t,v,f),S(r)?r instanceof q||"ArrayBuffer"==(o=b(r))||"SharedArrayBuffer"==o?void 0!==i?new y(r,Et(e,n),i):void 0!==e?new y(r,Et(e,n)):new y(r):wt in r?jt(v,r):Ft.call(v,r):new y(g(r))}),Y(m!==Function.prototype?M(y).concat(M(m)):M(y),function(t){t in v||h(v,t,y[t])}),v.prototype=_,e||(_.constructor=v));var j=_[vt],P=!!j&&("values"==j.name||null==j.name),F=Ct.values;h(v,gt,!0),h(_,wt,f),h(_,bt,!0),h(_,yt,v),(a?new v(1)[dt]==f:dt in _)||B(_,dt,{get:function(){return f}}),x[f]=v,u(u.G+u.W+u.F*(v!=y),x),u(u.S,f,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*o(function(){y.of.call(v,1)}),f,{from:Ft,of:Nt}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",n),u(u.P,f,Tt),L(f),u(u.P+u.F*_t,f,{set:Lt}),u(u.P+u.F*!P,f,Ct),e||_.toString==ht||(_.toString=ht),u(u.P+u.F*o(function(){new v(1).slice()}),f,{slice:Rt}),u(u.P+u.F*(o(function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()})||!o(function(){_.toLocaleString.call([1,2])})),f,{toLocaleString:It}),T[f]=P?j:F,e||P||h(_,vt,F)}}else t.exports=function(){}},function(t,n,r){var e=r(112),i=r(0),o=r(49)("metadata"),u=o.store||(o.store=new(r(115))),c=function(t,n,r){var i=u.get(t);if(!i){if(!r)return;u.set(t,i=new e)}var o=i.get(n);if(!o){if(!r)return;i.set(n,o=new e)}return o};t.exports={store:u,map:c,has:function(t,n,r){var e=c(n,r,!1);return void 0!==e&&e.has(t)},get:function(t,n,r){var e=c(n,r,!1);return void 0===e?void 0:e.get(t)},set:function(t,n,r,e){c(r,e,!0).set(t,n)},keys:function(t,n){var r=c(t,n,!1),e=[];return r&&r.forEach(function(t,n){e.push(n)}),e},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},function(t,n,r){var e=r(33)("meta"),i=r(4),o=r(14),u=r(7).f,c=0,a=Object.isExtensible||function(){return!0},f=!r(3)(function(){return a(Object.preventExtensions({}))}),s=function(t){u(t,e,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,e)){if(!a(t))return"F";if(!n)return"E";s(t)}return t[e].i},getWeak:function(t,n){if(!o(t,e)){if(!a(t))return!0;if(!n)return!1;s(t)}return t[e].w},onFreeze:function(t){return f&&l.NEED&&a(t)&&!o(t,e)&&s(t),t}}},function(t,n){t.exports=!1},function(t,n,r){var e=r(5)("unscopables"),i=Array.prototype;null==i[e]&&r(11)(i,e,{}),t.exports=function(t){i[e][t]=!0}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var r=0,e=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+e).toString(36))}},function(t,n,r){var e=r(93),i=r(67);t.exports=Object.keys||function(t){return e(t,i)}},function(t,n,r){var e=r(24),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=e(t))<0?i(t+n,0):o(t,n)}},function(t,n,r){var e=r(1),i=r(94),o=r(67),u=r(66)("IE_PROTO"),c=function(){},a=function(){var t,n=r(64)("iframe"),e=o.length;for(n.style.display="none",r(68).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;e--;)delete a.prototype[o[e]];return a()};t.exports=Object.create||function(t,n){var r;return null!==t?(c.prototype=e(t),r=new c,c.prototype=null,r[u]=t):r=a(),void 0===n?r:i(r,n)}},function(t,n,r){var e=r(93),i=r(67).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return e(t,i)}},function(t,n,r){"use strict";var e=r(2),i=r(7),o=r(6),u=r(5)("species");t.exports=function(t){var n=e[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,r,e){if(!(t instanceof n)||void 0!==e&&e in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,n,r){var e=r(19),i=r(105),o=r(80),u=r(1),c=r(8),a=r(82),f={},s={};(n=t.exports=function(t,n,r,l,h){var p,v,d,g,y=h?function(){return t}:a(t),m=e(r,l,n?2:1),w=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(o(y)){for(p=c(t.length);p>w;w++)if((g=n?m(u(v=t[w])[0],v[1]):m(t[w]))===f||g===s)return g}else for(d=y.call(t);!(v=d.next()).done;)if((g=i(d,m,v.value,n))===f||g===s)return g}).BREAK=f,n.RETURN=s},function(t,n,r){var e=r(12);t.exports=function(t,n,r){for(var i in n)e(t,i,n[i],r);return t}},function(t,n,r){var e=r(7).f,i=r(14),o=r(5)("toStringTag");t.exports=function(t,n,r){t&&!i(t=r?t:t.prototype,o)&&e(t,o,{configurable:!0,value:n})}},function(t,n,r){var e=r(0),i=r(23),o=r(3),u=r(70),c="["+u+"]",a=RegExp("^"+c+c+"*"),f=RegExp(c+c+"*$"),s=function(t,n,r){var i={},c=o(function(){return!!u[t]()||"​"!="​"[t]()}),a=i[t]=c?n(l):u[t];r&&(i[r]=a),e(e.P+e.F*c,"String",i)},l=s.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(a,"")),2&n&&(t=t.replace(f,"")),t};t.exports=s},function(t,n){t.exports={}},function(t,n,r){var e=r(4);t.exports=function(t,n){if(!e(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,r){var e=r(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,r){var e=r(20),i=r(5)("toStringTag"),o="Arguments"==e(function(){return arguments}());t.exports=function(t){var n,r,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?r:o?e(n):"Object"==(u=e(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,r){var e=r(18),i=r(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:e.version,mode:r(30)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,n,r){var e=r(15),i=r(8),o=r(35);t.exports=function(t){return function(n,r,u){var c,a=e(n),f=i(a.length),s=o(u,f);if(t&&r!=r){for(;f>s;)if((c=a[s++])!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===r)return t||s||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,r){var e=r(20);t.exports=Array.isArray||function(t){return"Array"==e(t)}},function(t,n,r){var e=r(4),i=r(20),o=r(5)("match");t.exports=function(t){var n;return e(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,r){var e=r(5)("iterator"),i=!1;try{var o=[7][e]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var r=!1;try{var o=[7],u=o[e]();u.next=function(){return{done:r=!0}},o[e]=function(){return u},t(o)}catch(t){}return r}},function(t,n,r){"use strict";var e=r(1);t.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,r){"use strict";var e=r(11),i=r(12),o=r(3),u=r(23),c=r(5);t.exports=function(t,n,r){var a=c(t),f=r(u,a,""[t]),s=f[0],l=f[1];o(function(){var n={};return n[a]=function(){return 7},7!=""[t](n)})&&(i(String.prototype,t,s),e(RegExp.prototype,a,2==n?function(t,n){return l.call(t,this,n)}:function(t){return l.call(t,this)}))}},function(t,n,r){var e=r(1),i=r(10),o=r(5)("species");t.exports=function(t,n){var r,u=e(t).constructor;return void 0===u||null==(r=e(u)[o])?n:i(r)}},function(t,n,r){var e=r(2).navigator;t.exports=e&&e.userAgent||""},function(t,n,r){"use strict";var e=r(2),i=r(0),o=r(12),u=r(41),c=r(29),a=r(40),f=r(39),s=r(4),l=r(3),h=r(54),p=r(42),v=r(71);t.exports=function(t,n,r,d,g,y){var m=e[t],w=m,b=g?"set":"add",S=w&&w.prototype,x={},_=function(t){var n=S[t];o(S,t,"delete"==t?function(t){return!(y&&!s(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!s(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!s(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,r){return n.call(this,0===t?0:t,r),this})};if("function"==typeof w&&(y||S.forEach&&!l(function(){(new w).entries().next()}))){var E=new w,O=E[b](y?{}:-0,1)!=E,M=l(function(){E.has(1)}),A=h(function(t){new w(t)}),j=!y&&l(function(){for(var t=new w,n=5;n--;)t[b](n,n);return!t.has(-0)});A||((w=n(function(n,r){f(n,w,t);var e=v(new m,n,w);return null!=r&&a(r,g,e[b],e),e})).prototype=S,S.constructor=w),(M||j)&&(_("delete"),_("has"),g&&_("get")),(j||O)&&_(b),y&&S.clear&&delete S.clear}else w=d.getConstructor(n,t,g,b),u(w.prototype,r),c.NEED=!0;return p(w,t),x[t]=w,i(i.G+i.W+i.F*(w!=m),x),y||d.setStrong(w,t,g),w}},function(t,n,r){for(var e,i=r(2),o=r(11),u=r(33),c=u("typed_array"),a=u("view"),f=!(!i.ArrayBuffer||!i.DataView),s=f,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(e=i[h[l++]])?(o(e.prototype,c,!0),o(e.prototype,a,!0)):s=!1;t.exports={ABV:f,CONSTR:s,TYPED:c,VIEW:a}},function(t,n,r){"use strict";t.exports=r(30)||!r(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete r(2)[t]})},function(t,n,r){"use strict";var e=r(0);t.exports=function(t){e(e.S,t,{of:function(){for(var t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},function(t,n,r){"use strict";var e=r(0),i=r(10),o=r(19),u=r(40);t.exports=function(t){e(e.S,t,{from:function(t){var n,r,e,c,a=arguments[1];return i(this),(n=void 0!==a)&&i(a),null==t?new this:(r=[],n?(e=0,c=o(a,arguments[2],2),u(t,!1,function(t){r.push(c(t,e++))})):u(t,!1,r.push,r),new this(r))}})}},function(t,n,r){var e=r(4),i=r(2).document,o=e(i)&&e(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,r){var e=r(2),i=r(18),o=r(30),u=r(92),c=r(7).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:e.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,r){var e=r(49)("keys"),i=r(33);t.exports=function(t){return e[t]||(e[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,r){var e=r(2).document;t.exports=e&&e.documentElement},function(t,n,r){var e=r(4),i=r(1),o=function(t,n){if(i(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,e){try{(e=r(19)(Function.call,r(16).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,r){return o(t,r),n?t.__proto__=r:e(t,r),t}}({},!1):void 0),check:o}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,r){var e=r(4),i=r(69).set;t.exports=function(t,n,r){var o,u=n.constructor;return u!==r&&"function"==typeof u&&(o=u.prototype)!==r.prototype&&e(o)&&i&&i(t,o),t}},function(t,n,r){"use strict";var e=r(24),i=r(23);t.exports=function(t){var n=String(i(this)),r="",o=e(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(r+=n);return r}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,n,r){var e=r(24),i=r(23);t.exports=function(t){return function(n,r){var o,u,c=String(i(n)),a=e(r),f=c.length;return a<0||a>=f?t?"":void 0:(o=c.charCodeAt(a))<55296||o>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):o:t?c.slice(a,a+2):u-56320+(o-55296<<10)+65536}}},function(t,n,r){"use strict";var e=r(30),i=r(0),o=r(12),u=r(11),c=r(44),a=r(77),f=r(42),s=r(17),l=r(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,r,v,d,g,y){a(r,n,v);var m,w,b,S=function(t){if(!h&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},x=n+" Iterator",_="values"==d,E=!1,O=t.prototype,M=O[l]||O["@@iterator"]||d&&O[d],A=M||S(d),j=d?_?S("entries"):A:void 0,P="Array"==n&&O.entries||M;if(P&&(b=s(P.call(new t)))!==Object.prototype&&b.next&&(f(b,x,!0),e||"function"==typeof b[l]||u(b,l,p)),_&&M&&"values"!==M.name&&(E=!0,A=function(){return M.call(this)}),e&&!y||!h&&!E&&O[l]||u(O,l,A),c[n]=A,c[x]=p,d)if(m={values:_?A:S("values"),keys:g?A:S("keys"),entries:j},y)for(w in m)w in O||o(O,w,m[w]);else i(i.P+i.F*(h||E),n,m);return m}},function(t,n,r){"use strict";var e=r(36),i=r(32),o=r(42),u={};r(11)(u,r(5)("iterator"),function(){return this}),t.exports=function(t,n,r){t.prototype=e(u,{next:i(1,r)}),o(t,n+" Iterator")}},function(t,n,r){var e=r(53),i=r(23);t.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},function(t,n,r){var e=r(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(r){try{return n[e]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,r){var e=r(44),i=r(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(e.Array===t||o[i]===t)}},function(t,n,r){"use strict";var e=r(7),i=r(32);t.exports=function(t,n,r){n in t?e.f(t,n,i(0,r)):t[n]=r}},function(t,n,r){var e=r(48),i=r(5)("iterator"),o=r(44);t.exports=r(18).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[e(t)]}},function(t,n,r){var e=r(218);t.exports=function(t,n){return new(e(t))(n)}},function(t,n,r){"use strict";var e=r(9),i=r(35),o=r(8);t.exports=function(t){for(var n=e(this),r=o(n.length),u=arguments.length,c=i(u>1?arguments[1]:void 0,r),a=u>2?arguments[2]:void 0,f=void 0===a?r:i(a,r);f>c;)n[c++]=t;return n}},function(t,n,r){"use strict";var e=r(31),i=r(108),o=r(44),u=r(15);t.exports=r(76)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?r:"values"==n?t[r]:[r,t[r]])},"values"),o.Arguments=o.Array,e("keys"),e("values"),e("entries")},function(t,n,r){var e,i,o,u=r(19),c=r(98),a=r(68),f=r(64),s=r(2),l=s.process,h=s.setImmediate,p=s.clearImmediate,v=s.MessageChannel,d=s.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var n=y[t];delete y[t],n()}},w=function(t){m.call(t.data)};h&&p||(h=function(t){for(var n=[],r=1;arguments.length>r;)n.push(arguments[r++]);return y[++g]=function(){c("function"==typeof t?t:Function(t),n)},e(g),g},p=function(t){delete y[t]},"process"==r(20)(l)?e=function(t){l.nextTick(u(m,t,1))}:d&&d.now?e=function(t){d.now(u(m,t,1))}:v?(o=(i=new v).port2,i.port1.onmessage=w,e=u(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(e=function(t){s.postMessage(t+"","*")},s.addEventListener("message",w,!1)):e="onreadystatechange"in f("script")?function(t){a.appendChild(f("script")).onreadystatechange=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,r){var e=r(2),i=r(86).set,o=e.MutationObserver||e.WebKitMutationObserver,u=e.process,c=e.Promise,a="process"==r(20)(u);t.exports=function(){var t,n,r,f=function(){var e,i;for(a&&(e=u.domain)&&e.exit();t;){i=t.fn,t=t.next;try{i()}catch(e){throw t?r():n=void 0,e}}n=void 0,e&&e.enter()};if(a)r=function(){u.nextTick(f)};else if(!o||e.navigator&&e.navigator.standalone)if(c&&c.resolve){var s=c.resolve(void 0);r=function(){s.then(f)}}else r=function(){i.call(e,f)};else{var l=!0,h=document.createTextNode("");new o(f).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(e){var i={fn:e,next:void 0};n&&(n.next=i),t||(t=i,r()),n=i}}},function(t,n,r){"use strict";var e=r(10);function i(t){var n,r;this.promise=new t(function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e}),this.resolve=e(n),this.reject=e(r)}t.exports.f=function(t){return new i(t)}},function(t,n,r){"use strict";var e=r(2),i=r(6),o=r(30),u=r(60),c=r(11),a=r(41),f=r(3),s=r(39),l=r(24),h=r(8),p=r(117),v=r(37).f,d=r(7).f,g=r(84),y=r(42),m="prototype",w="Wrong index!",b=e.ArrayBuffer,S=e.DataView,x=e.Math,_=e.RangeError,E=e.Infinity,O=b,M=x.abs,A=x.pow,j=x.floor,P=x.log,F=x.LN2,N=i?"_b":"buffer",k=i?"_l":"byteLength",I=i?"_o":"byteOffset";function T(t,n,r){var e,i,o,u=new Array(r),c=8*r-n-1,a=(1<<c)-1,f=a>>1,s=23===n?A(2,-24)-A(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=M(t))!=t||t===E?(i=t!=t?1:0,e=a):(e=j(P(t)/F),t*(o=A(2,-e))<1&&(e--,o*=2),(t+=e+f>=1?s/o:s*A(2,1-f))*o>=2&&(e++,o/=2),e+f>=a?(i=0,e=a):e+f>=1?(i=(t*o-1)*A(2,n),e+=f):(i=t*A(2,f-1)*A(2,n),e=0));n>=8;u[l++]=255&i,i/=256,n-=8);for(e=e<<n|i,c+=n;c>0;u[l++]=255&e,e/=256,c-=8);return u[--l]|=128*h,u}function R(t,n,r){var e,i=8*r-n-1,o=(1<<i)-1,u=o>>1,c=i-7,a=r-1,f=t[a--],s=127&f;for(f>>=7;c>0;s=256*s+t[a],a--,c-=8);for(e=s&(1<<-c)-1,s>>=-c,c+=n;c>0;e=256*e+t[a],a--,c-=8);if(0===s)s=1-u;else{if(s===o)return e?NaN:f?-E:E;e+=A(2,n),s-=u}return(f?-1:1)*e*A(2,s-n)}function L(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function C(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function $(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function W(t){return T(t,52,8)}function B(t){return T(t,23,4)}function V(t,n,r){d(t[m],n,{get:function(){return this[r]}})}function U(t,n,r,e){var i=p(+r);if(i+n>t[k])throw _(w);var o=t[N]._b,u=i+t[I],c=o.slice(u,u+n);return e?c:c.reverse()}function G(t,n,r,e,i,o){var u=p(+r);if(u+n>t[k])throw _(w);for(var c=t[N]._b,a=u+t[I],f=e(+i),s=0;s<n;s++)c[a+s]=f[o?s:n-s-1]}if(u.ABV){if(!f(function(){b(1)})||!f(function(){new b(-1)})||f(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var H,z=(b=function(t){return s(this,b),new O(p(t))})[m]=O[m],q=v(O),J=0;q.length>J;)(H=q[J++])in b||c(b,H,O[H]);o||(z.constructor=b)}var Y=new S(new b(2)),K=S[m].setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||a(S[m],{setInt8:function(t,n){K.call(this,t,n<<24>>24)},setUint8:function(t,n){K.call(this,t,n<<24>>24)}},!0)}else b=function(t){s(this,b,"ArrayBuffer");var n=p(t);this._b=g.call(new Array(n),0),this[k]=n},S=function(t,n,r){s(this,S,"DataView"),s(t,b,"DataView");var e=t[k],i=l(n);if(i<0||i>e)throw _("Wrong offset!");if(i+(r=void 0===r?e-i:h(r))>e)throw _("Wrong length!");this[N]=t,this[I]=i,this[k]=r},i&&(V(b,"byteLength","_l"),V(S,"buffer","_b"),V(S,"byteLength","_l"),V(S,"byteOffset","_o")),a(S[m],{getInt8:function(t){return U(this,1,t)[0]<<24>>24},getUint8:function(t){return U(this,1,t)[0]},getInt16:function(t){var n=U(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=U(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return L(U(this,4,t,arguments[1]))},getUint32:function(t){return L(U(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(U(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(U(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){G(this,1,t,C,n)},setUint8:function(t,n){G(this,1,t,C,n)},setInt16:function(t,n){G(this,2,t,D,n,arguments[2])},setUint16:function(t,n){G(this,2,t,D,n,arguments[2])},setInt32:function(t,n){G(this,4,t,$,n,arguments[2])},setUint32:function(t,n){G(this,4,t,$,n,arguments[2])},setFloat32:function(t,n){G(this,4,t,B,n,arguments[2])},setFloat64:function(t,n){G(this,8,t,W,n,arguments[2])}});y(b,"ArrayBuffer"),y(S,"DataView"),c(S[m],u.VIEW,!0),n.ArrayBuffer=b,n.DataView=S},function(t,n){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,n,r){t.exports=!r(6)&&!r(3)(function(){return 7!=Object.defineProperty(r(64)("div"),"a",{get:function(){return 7}}).a})},function(t,n,r){n.f=r(5)},function(t,n,r){var e=r(14),i=r(15),o=r(50)(!1),u=r(66)("IE_PROTO");t.exports=function(t,n){var r,c=i(t),a=0,f=[];for(r in c)r!=u&&e(c,r)&&f.push(r);for(;n.length>a;)e(c,r=n[a++])&&(~o(f,r)||f.push(r));return f}},function(t,n,r){var e=r(7),i=r(1),o=r(34);t.exports=r(6)?Object.defineProperties:function(t,n){i(t);for(var r,u=o(n),c=u.length,a=0;c>a;)e.f(t,r=u[a++],n[r]);return t}},function(t,n,r){var e=r(15),i=r(37).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(e(t))}},function(t,n,r){"use strict";var e=r(34),i=r(51),o=r(47),u=r(9),c=r(46),a=Object.assign;t.exports=!a||r(3)(function(){var t={},n={},r=Symbol(),e="abcdefghijklmnopqrst";return t[r]=7,e.split("").forEach(function(t){n[t]=t}),7!=a({},t)[r]||Object.keys(a({},n)).join("")!=e})?function(t,n){for(var r=u(t),a=arguments.length,f=1,s=i.f,l=o.f;a>f;)for(var h,p=c(arguments[f++]),v=s?e(p).concat(s(p)):e(p),d=v.length,g=0;d>g;)l.call(p,h=v[g++])&&(r[h]=p[h]);return r}:a},function(t,n,r){"use strict";var e=r(10),i=r(4),o=r(98),u=[].slice,c={};t.exports=Function.bind||function(t){var n=e(this),r=u.call(arguments,1),a=function(){var e=r.concat(u.call(arguments));return this instanceof a?function(t,n,r){if(!(n in c)){for(var e=[],i=0;i<n;i++)e[i]="a["+i+"]";c[n]=Function("F,a","return new F("+e.join(",")+")")}return c[n](t,r)}(n,e.length,e):o(n,e,t)};return i(n.prototype)&&(a.prototype=n.prototype),a}},function(t,n){t.exports=function(t,n,r){var e=void 0===r;switch(n.length){case 0:return e?t():t.call(r);case 1:return e?t(n[0]):t.call(r,n[0]);case 2:return e?t(n[0],n[1]):t.call(r,n[0],n[1]);case 3:return e?t(n[0],n[1],n[2]):t.call(r,n[0],n[1],n[2]);case 4:return e?t(n[0],n[1],n[2],n[3]):t.call(r,n[0],n[1],n[2],n[3])}return t.apply(r,n)}},function(t,n,r){var e=r(2).parseInt,i=r(43).trim,o=r(70),u=/^[-+]?0[xX]/;t.exports=8!==e(o+"08")||22!==e(o+"0x16")?function(t,n){var r=i(String(t),3);return e(r,n>>>0||(u.test(r)?16:10))}:e},function(t,n,r){var e=r(2).parseFloat,i=r(43).trim;t.exports=1/e(r(70)+"-0")!=-1/0?function(t){var n=i(String(t),3),r=e(n);return 0===r&&"-"==n.charAt(0)?-0:r}:e},function(t,n,r){var e=r(20);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=e(t))throw TypeError(n);return+t}},function(t,n,r){var e=r(4),i=Math.floor;t.exports=function(t){return!e(t)&&isFinite(t)&&i(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,r){var e=r(73),i=Math.pow,o=i(2,-52),u=i(2,-23),c=i(2,127)*(2-u),a=i(2,-126);t.exports=Math.fround||function(t){var n,r,i=Math.abs(t),f=e(t);return i<a?f*(i/a/u+1/o-1/o)*a*u:(r=(n=(1+u/o)*i)-(n-i))>c||r!=r?f*(1/0):f*r}},function(t,n,r){var e=r(1);t.exports=function(t,n,r,i){try{return i?n(e(r)[0],r[1]):n(r)}catch(n){var o=t.return;throw void 0!==o&&e(o.call(t)),n}}},function(t,n,r){var e=r(10),i=r(9),o=r(46),u=r(8);t.exports=function(t,n,r,c,a){e(n);var f=i(t),s=o(f),l=u(f.length),h=a?l-1:0,p=a?-1:1;if(r<2)for(;;){if(h in s){c=s[h],h+=p;break}if(h+=p,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=p)h in s&&(c=n(c,s[h],h,f));return c}},function(t,n,r){"use strict";var e=r(9),i=r(35),o=r(8);t.exports=[].copyWithin||function(t,n){var r=e(this),u=o(r.length),c=i(t,u),a=i(n,u),f=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===f?u:i(f,u))-a,u-c),l=1;for(a<c&&c<a+s&&(l=-1,a+=s-1,c+=s-1);s-- >0;)a in r?r[c]=r[a]:delete r[c],c+=l,a+=l;return r}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,r){r(6)&&"g"!=/./g.flags&&r(7).f(RegExp.prototype,"flags",{configurable:!0,get:r(55)})},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,r){var e=r(1),i=r(4),o=r(88);t.exports=function(t,n){if(e(t),i(n)&&n.constructor===t)return n;var r=o.f(t);return(0,r.resolve)(n),r.promise}},function(t,n,r){"use strict";var e=r(113),i=r(45);t.exports=r(59)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=e.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return e.def(i(this,"Map"),0===t?0:t,n)}},e,!0)},function(t,n,r){"use strict";var e=r(7).f,i=r(36),o=r(41),u=r(19),c=r(39),a=r(40),f=r(76),s=r(108),l=r(38),h=r(6),p=r(29).fastKey,v=r(45),d=h?"_s":"size",g=function(t,n){var r,e=p(n);if("F"!==e)return t._i[e];for(r=t._f;r;r=r.n)if(r.k==n)return r};t.exports={getConstructor:function(t,n,r,f){var s=t(function(t,e){c(t,s,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[d]=0,null!=e&&a(e,r,t[f],t)});return o(s.prototype,{clear:function(){for(var t=v(this,n),r=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete r[e.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var r=v(this,n),e=g(r,t);if(e){var i=e.n,o=e.p;delete r._i[e.i],e.r=!0,o&&(o.n=i),i&&(i.p=o),r._f==e&&(r._f=i),r._l==e&&(r._l=o),r[d]--}return!!e},forEach:function(t){v(this,n);for(var r,e=u(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(e(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(v(this,n),t)}}),h&&e(s.prototype,"size",{get:function(){return v(this,n)[d]}}),s},def:function(t,n,r){var e,i,o=g(t,n);return o?o.v=r:(t._l=o={i:i=p(n,!0),k:n,v:r,p:e=t._l,n:void 0,r:!1},t._f||(t._f=o),e&&(e.n=o),t[d]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,r){f(t,n,function(t,r){this._t=v(t,n),this._k=r,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?s(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,s(1))},r?"entries":"values",!r,!0),l(n)}}},function(t,n,r){"use strict";var e=r(113),i=r(45);t.exports=r(59)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return e.def(i(this,"Set"),t=0===t?0:t,t)}},e)},function(t,n,r){"use strict";var e,i=r(26)(0),o=r(12),u=r(29),c=r(96),a=r(116),f=r(4),s=r(3),l=r(45),h=u.getWeak,p=Object.isExtensible,v=a.ufstore,d={},g=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(f(t)){var n=h(t);return!0===n?v(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return a.def(l(this,"WeakMap"),t,n)}},m=t.exports=r(59)("WeakMap",g,y,a,!0,!0);s(function(){return 7!=(new m).set((Object.freeze||Object)(d),7).get(d)})&&(c((e=a.getConstructor(g,"WeakMap")).prototype,y),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=m.prototype,r=n[t];o(n,t,function(n,i){if(f(n)&&!p(n)){this._f||(this._f=new e);var o=this._f[t](n,i);return"set"==t?this:o}return r.call(this,n,i)})}))},function(t,n,r){"use strict";var e=r(41),i=r(29).getWeak,o=r(1),u=r(4),c=r(39),a=r(40),f=r(26),s=r(14),l=r(45),h=f(5),p=f(6),v=0,d=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,n){return h(t.a,function(t){return t[0]===n})};g.prototype={get:function(t){var n=y(this,t);if(n)return n[1]},has:function(t){return!!y(this,t)},set:function(t,n){var r=y(this,t);r?r[1]=n:this.a.push([t,n])},delete:function(t){var n=p(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,r,o){var f=t(function(t,e){c(t,f,n,"_i"),t._t=n,t._i=v++,t._l=void 0,null!=e&&a(e,r,t[o],t)});return e(f.prototype,{delete:function(t){if(!u(t))return!1;var r=i(t);return!0===r?d(l(this,n)).delete(t):r&&s(r,this._i)&&delete r[this._i]},has:function(t){if(!u(t))return!1;var r=i(t);return!0===r?d(l(this,n)).has(t):r&&s(r,this._i)}}),f},def:function(t,n,r){var e=i(o(n),!0);return!0===e?d(t).set(n,r):e[t._i]=r,t},ufstore:d}},function(t,n,r){var e=r(24),i=r(8);t.exports=function(t){if(void 0===t)return 0;var n=e(t),r=i(n);if(n!==r)throw RangeError("Wrong length!");return r}},function(t,n,r){var e=r(37),i=r(51),o=r(1),u=r(2).Reflect;t.exports=u&&u.ownKeys||function(t){var n=e.f(o(t)),r=i.f;return r?n.concat(r(t)):n}},function(t,n,r){"use strict";var e=r(52),i=r(4),o=r(8),u=r(19),c=r(5)("isConcatSpreadable");t.exports=function t(n,r,a,f,s,l,h,p){for(var v,d,g=s,y=0,m=!!h&&u(h,p,3);y<f;){if(y in a){if(v=m?m(a[y],y,r):a[y],d=!1,i(v)&&(d=void 0!==(d=v[c])?!!d:e(v)),d&&l>0)g=t(n,r,v,o(v.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();n[g]=v}g++}y++}return g}},function(t,n,r){var e=r(8),i=r(72),o=r(23);t.exports=function(t,n,r,u){var c=String(o(t)),a=c.length,f=void 0===r?" ":String(r),s=e(n);if(s<=a||""==f)return c;var l=s-a,h=i.call(f,Math.ceil(l/f.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},function(t,n,r){var e=r(34),i=r(15),o=r(47).f;t.exports=function(t){return function(n){for(var r,u=i(n),c=e(u),a=c.length,f=0,s=[];a>f;)o.call(u,r=c[f++])&&s.push(t?[r,u[r]]:u[r]);return s}}},function(t,n,r){var e=r(48),i=r(123);t.exports=function(t){return function(){if(e(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,n,r){var e=r(40);t.exports=function(t,n){var r=[];return e(t,!1,r.push,r,n),r}},function(t,n){t.exports=Math.scale||function(t,n,r,e,i){return 0===arguments.length||t!=t||n!=n||r!=r||e!=e||i!=i?NaN:t===1/0||t===-1/0?t:(t-n)*(i-e)/(r-n)+e}},function(t,n,r){r(126),t.exports=r(328)},function(t,n,r){"use strict";(function(t){if(r(127),r(324),r(325),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var n="defineProperty";function e(t,r,e){t[r]||Object[n](t,r,{writable:!0,configurable:!0,value:e})}e(String.prototype,"padLeft","".padStart),e(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&e(Array,t,Function.call.bind([][t]))})}).call(this,r(90))},function(t,n,r){r(128),r(130),r(131),r(132),r(133),r(134),r(135),r(136),r(137),r(138),r(139),r(140),r(141),r(142),r(143),r(144),r(146),r(147),r(148),r(149),r(150),r(151),r(152),r(153),r(154),r(155),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(174),r(175),r(176),r(177),r(178),r(179),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(208),r(209),r(211),r(212),r(213),r(214),r(215),r(216),r(217),r(219),r(220),r(221),r(222),r(223),r(224),r(225),r(226),r(227),r(228),r(229),r(230),r(231),r(85),r(232),r(233),r(109),r(234),r(235),r(236),r(237),r(238),r(112),r(114),r(115),r(239),r(240),r(241),r(242),r(243),r(244),r(245),r(246),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(255),r(256),r(257),r(258),r(259),r(260),r(261),r(262),r(263),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),r(276),r(277),r(278),r(279),r(280),r(281),r(282),r(283),r(284),r(285),r(286),r(287),r(288),r(289),r(290),r(291),r(292),r(293),r(294),r(295),r(296),r(297),r(298),r(299),r(300),r(301),r(302),r(303),r(304),r(305),r(306),r(307),r(308),r(309),r(310),r(311),r(312),r(313),r(314),r(315),r(316),r(317),r(318),r(319),r(320),r(321),r(322),r(323),t.exports=r(18)},function(t,n,r){"use strict";var e=r(2),i=r(14),o=r(6),u=r(0),c=r(12),a=r(29).KEY,f=r(3),s=r(49),l=r(42),h=r(33),p=r(5),v=r(92),d=r(65),g=r(129),y=r(52),m=r(1),w=r(4),b=r(15),S=r(22),x=r(32),_=r(36),E=r(95),O=r(16),M=r(7),A=r(34),j=O.f,P=M.f,F=E.f,N=e.Symbol,k=e.JSON,I=k&&k.stringify,T=p("_hidden"),R=p("toPrimitive"),L={}.propertyIsEnumerable,C=s("symbol-registry"),D=s("symbols"),$=s("op-symbols"),W=Object.prototype,B="function"==typeof N,V=e.QObject,U=!V||!V.prototype||!V.prototype.findChild,G=o&&f(function(){return 7!=_(P({},"a",{get:function(){return P(this,"a",{value:7}).a}})).a})?function(t,n,r){var e=j(W,n);e&&delete W[n],P(t,n,r),e&&t!==W&&P(W,n,e)}:P,H=function(t){var n=D[t]=_(N.prototype);return n._k=t,n},z=B&&"symbol"==typeof N.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof N},q=function(t,n,r){return t===W&&q($,n,r),m(t),n=S(n,!0),m(r),i(D,n)?(r.enumerable?(i(t,T)&&t[T][n]&&(t[T][n]=!1),r=_(r,{enumerable:x(0,!1)})):(i(t,T)||P(t,T,x(1,{})),t[T][n]=!0),G(t,n,r)):P(t,n,r)},J=function(t,n){m(t);for(var r,e=g(n=b(n)),i=0,o=e.length;o>i;)q(t,r=e[i++],n[r]);return t},Y=function(t){var n=L.call(this,t=S(t,!0));return!(this===W&&i(D,t)&&!i($,t))&&(!(n||!i(this,t)||!i(D,t)||i(this,T)&&this[T][t])||n)},K=function(t,n){if(t=b(t),n=S(n,!0),t!==W||!i(D,n)||i($,n)){var r=j(t,n);return!r||!i(D,n)||i(t,T)&&t[T][n]||(r.enumerable=!0),r}},X=function(t){for(var n,r=F(b(t)),e=[],o=0;r.length>o;)i(D,n=r[o++])||n==T||n==a||e.push(n);return e},Z=function(t){for(var n,r=t===W,e=F(r?$:b(t)),o=[],u=0;e.length>u;)!i(D,n=e[u++])||r&&!i(W,n)||o.push(D[n]);return o};B||(c((N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(r){this===W&&n.call($,r),i(this,T)&&i(this[T],t)&&(this[T][t]=!1),G(this,t,x(1,r))};return o&&U&&G(W,t,{configurable:!0,set:n}),H(t)}).prototype,"toString",function(){return this._k}),O.f=K,M.f=q,r(37).f=E.f=X,r(47).f=Y,r(51).f=Z,o&&!r(30)&&c(W,"propertyIsEnumerable",Y,!0),v.f=function(t){return H(p(t))}),u(u.G+u.W+u.F*!B,{Symbol:N});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var nt=A(p.store),rt=0;nt.length>rt;)d(nt[rt++]);u(u.S+u.F*!B,"Symbol",{for:function(t){return i(C,t+="")?C[t]:C[t]=N(t)},keyFor:function(t){if(!z(t))throw TypeError(t+" is not a symbol!");for(var n in C)if(C[n]===t)return n},useSetter:function(){U=!0},useSimple:function(){U=!1}}),u(u.S+u.F*!B,"Object",{create:function(t,n){return void 0===n?_(t):J(_(t),n)},defineProperty:q,defineProperties:J,getOwnPropertyDescriptor:K,getOwnPropertyNames:X,getOwnPropertySymbols:Z}),k&&u(u.S+u.F*(!B||f(function(){var t=N();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))})),"JSON",{stringify:function(t){for(var n,r,e=[t],i=1;arguments.length>i;)e.push(arguments[i++]);if(r=n=e[1],(w(n)||void 0!==t)&&!z(t))return y(n)||(n=function(t,n){if("function"==typeof r&&(n=r.call(this,t,n)),!z(n))return n}),e[1]=n,I.apply(k,e)}}),N.prototype[R]||r(11)(N.prototype,R,N.prototype.valueOf),l(N,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},function(t,n,r){var e=r(34),i=r(51),o=r(47);t.exports=function(t){var n=e(t),r=i.f;if(r)for(var u,c=r(t),a=o.f,f=0;c.length>f;)a.call(t,u=c[f++])&&n.push(u);return n}},function(t,n,r){var e=r(0);e(e.S,"Object",{create:r(36)})},function(t,n,r){var e=r(0);e(e.S+e.F*!r(6),"Object",{defineProperty:r(7).f})},function(t,n,r){var e=r(0);e(e.S+e.F*!r(6),"Object",{defineProperties:r(94)})},function(t,n,r){var e=r(15),i=r(16).f;r(25)("getOwnPropertyDescriptor",function(){return function(t,n){return i(e(t),n)}})},function(t,n,r){var e=r(9),i=r(17);r(25)("getPrototypeOf",function(){return function(t){return i(e(t))}})},function(t,n,r){var e=r(9),i=r(34);r(25)("keys",function(){return function(t){return i(e(t))}})},function(t,n,r){r(25)("getOwnPropertyNames",function(){return r(95).f})},function(t,n,r){var e=r(4),i=r(29).onFreeze;r(25)("freeze",function(t){return function(n){return t&&e(n)?t(i(n)):n}})},function(t,n,r){var e=r(4),i=r(29).onFreeze;r(25)("seal",function(t){return function(n){return t&&e(n)?t(i(n)):n}})},function(t,n,r){var e=r(4),i=r(29).onFreeze;r(25)("preventExtensions",function(t){return function(n){return t&&e(n)?t(i(n)):n}})},function(t,n,r){var e=r(4);r(25)("isFrozen",function(t){return function(n){return!e(n)||!!t&&t(n)}})},function(t,n,r){var e=r(4);r(25)("isSealed",function(t){return function(n){return!e(n)||!!t&&t(n)}})},function(t,n,r){var e=r(4);r(25)("isExtensible",function(t){return function(n){return!!e(n)&&(!t||t(n))}})},function(t,n,r){var e=r(0);e(e.S+e.F,"Object",{assign:r(96)})},function(t,n,r){var e=r(0);e(e.S,"Object",{is:r(145)})},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,r){var e=r(0);e(e.S,"Object",{setPrototypeOf:r(69).set})},function(t,n,r){"use strict";var e=r(48),i={};i[r(5)("toStringTag")]="z",i+""!="[object z]"&&r(12)(Object.prototype,"toString",function(){return"[object "+e(this)+"]"},!0)},function(t,n,r){var e=r(0);e(e.P,"Function",{bind:r(97)})},function(t,n,r){var e=r(7).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||r(6)&&e(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,n,r){"use strict";var e=r(4),i=r(17),o=r(5)("hasInstance"),u=Function.prototype;o in u||r(7).f(u,o,{value:function(t){if("function"!=typeof this||!e(t))return!1;if(!e(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,r){var e=r(0),i=r(99);e(e.G+e.F*(parseInt!=i),{parseInt:i})},function(t,n,r){var e=r(0),i=r(100);e(e.G+e.F*(parseFloat!=i),{parseFloat:i})},function(t,n,r){"use strict";var e=r(2),i=r(14),o=r(20),u=r(71),c=r(22),a=r(3),f=r(37).f,s=r(16).f,l=r(7).f,h=r(43).trim,p=e.Number,v=p,d=p.prototype,g="Number"==o(r(36)(d)),y="trim"in String.prototype,m=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){var r,e,i,o=(n=y?n.trim():h(n,3)).charCodeAt(0);if(43===o||45===o){if(88===(r=n.charCodeAt(2))||120===r)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:e=2,i=49;break;case 79:case 111:e=8,i=55;break;default:return+n}for(var u,a=n.slice(2),f=0,s=a.length;f<s;f++)if((u=a.charCodeAt(f))<48||u>i)return NaN;return parseInt(a,e)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,r=this;return r instanceof p&&(g?a(function(){d.valueOf.call(r)}):"Number"!=o(r))?u(new v(m(n)),r,p):m(n)};for(var w,b=r(6)?f(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;b.length>S;S++)i(v,w=b[S])&&!i(p,w)&&l(p,w,s(v,w));p.prototype=d,d.constructor=p,r(12)(e,"Number",p)}},function(t,n,r){"use strict";var e=r(0),i=r(24),o=r(101),u=r(72),c=1..toFixed,a=Math.floor,f=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",l=function(t,n){for(var r=-1,e=n;++r<6;)e+=t*f[r],f[r]=e%1e7,e=a(e/1e7)},h=function(t){for(var n=6,r=0;--n>=0;)r+=f[n],f[n]=a(r/t),r=r%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==f[t]){var r=String(f[t]);n=""===n?r:n+u.call("0",7-r.length)+r}return n},v=function(t,n,r){return 0===n?r:n%2==1?v(t,n-1,r*t):v(t*t,n/2,r)};e(e.P+e.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(3)(function(){c.call({})})),"Number",{toFixed:function(t){var n,r,e,c,a=o(this,s),f=i(t),d="",g="0";if(f<0||f>20)throw RangeError(s);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(d="-",a=-a),a>1e-21)if(r=(n=function(t){for(var n=0,r=t;r>=4096;)n+=12,r/=4096;for(;r>=2;)n+=1,r/=2;return n}(a*v(2,69,1))-69)<0?a*v(2,-n,1):a/v(2,n,1),r*=4503599627370496,(n=52-n)>0){for(l(0,r),e=f;e>=7;)l(1e7,0),e-=7;for(l(v(10,e,1),0),e=n-1;e>=23;)h(1<<23),e-=23;h(1<<e),l(1,1),h(2),g=p()}else l(0,r),l(1<<-n,0),g=p()+u.call("0",f);return g=f>0?d+((c=g.length)<=f?"0."+u.call("0",f-c)+g:g.slice(0,c-f)+"."+g.slice(c-f)):d+g}})},function(t,n,r){"use strict";var e=r(0),i=r(3),o=r(101),u=1..toPrecision;e(e.P+e.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,r){var e=r(0);e(e.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,r){var e=r(0),i=r(2).isFinite;e(e.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,n,r){var e=r(0);e(e.S,"Number",{isInteger:r(102)})},function(t,n,r){var e=r(0);e(e.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,r){var e=r(0),i=r(102),o=Math.abs;e(e.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,n,r){var e=r(0);e(e.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,r){var e=r(0);e(e.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,r){var e=r(0),i=r(100);e(e.S+e.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,n,r){var e=r(0),i=r(99);e(e.S+e.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,n,r){var e=r(0),i=r(103),o=Math.sqrt,u=Math.acosh;e(e.S+e.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,n,r){var e=r(0),i=Math.asinh;e(e.S+e.F*!(i&&1/i(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,r){var e=r(0),i=Math.atanh;e(e.S+e.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,r){var e=r(0),i=r(73);e(e.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,r){var e=r(0),i=Math.exp;e(e.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,n,r){var e=r(0),i=r(74);e(e.S+e.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,n,r){var e=r(0);e(e.S,"Math",{fround:r(104)})},function(t,n,r){var e=r(0),i=Math.abs;e(e.S,"Math",{hypot:function(t,n){for(var r,e,o=0,u=0,c=arguments.length,a=0;u<c;)a<(r=i(arguments[u++]))?(o=o*(e=a/r)*e+1,a=r):o+=r>0?(e=r/a)*e:r;return a===1/0?1/0:a*Math.sqrt(o)}})},function(t,n,r){var e=r(0),i=Math.imul;e(e.S+e.F*r(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var r=+t,e=+n,i=65535&r,o=65535&e;return 0|i*o+((65535&r>>>16)*o+i*(65535&e>>>16)<<16>>>0)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,r){var e=r(0);e(e.S,"Math",{log1p:r(103)})},function(t,n,r){var e=r(0);e(e.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,r){var e=r(0);e(e.S,"Math",{sign:r(73)})},function(t,n,r){var e=r(0),i=r(74),o=Math.exp;e(e.S+e.F*r(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,n,r){var e=r(0),i=r(74),o=Math.exp;e(e.S,"Math",{tanh:function(t){var n=i(t=+t),r=i(-t);return n==1/0?1:r==1/0?-1:(n-r)/(o(t)+o(-t))}})},function(t,n,r){var e=r(0);e(e.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,r){var e=r(0),i=r(35),o=String.fromCharCode,u=String.fromCodePoint;e(e.S+e.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,r=[],e=arguments.length,u=0;e>u;){if(n=+arguments[u++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");r.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return r.join("")}})},function(t,n,r){var e=r(0),i=r(15),o=r(8);e(e.S,"String",{raw:function(t){for(var n=i(t.raw),r=o(n.length),e=arguments.length,u=[],c=0;r>c;)u.push(String(n[c++])),c<e&&u.push(String(arguments[c]));return u.join("")}})},function(t,n,r){"use strict";r(43)("trim",function(t){return function(){return t(this,3)}})},function(t,n,r){"use strict";var e=r(75)(!0);r(76)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,r=this._i;return r>=n.length?{value:void 0,done:!0}:(t=e(n,r),this._i+=t.length,{value:t,done:!1})})},function(t,n,r){"use strict";var e=r(0),i=r(75)(!1);e(e.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,n,r){"use strict";var e=r(0),i=r(8),o=r(78),u="".endsWith;e(e.P+e.F*r(79)("endsWith"),"String",{endsWith:function(t){var n=o(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,e=i(n.length),c=void 0===r?e:Math.min(i(r),e),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},function(t,n,r){"use strict";var e=r(0),i=r(78);e(e.P+e.F*r(79)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,r){var e=r(0);e(e.P,"String",{repeat:r(72)})},function(t,n,r){"use strict";var e=r(0),i=r(8),o=r(78),u="".startsWith;e(e.P+e.F*r(79)("startsWith"),"String",{startsWith:function(t){var n=o(this,t,"startsWith"),r=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),e=String(t);return u?u.call(n,e,r):n.slice(r,r+e.length)===e}})},function(t,n,r){"use strict";r(13)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,r){"use strict";r(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,r){"use strict";r(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,r){"use strict";r(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,r){"use strict";r(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,r){"use strict";r(13)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,r){"use strict";r(13)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,r){"use strict";r(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,r){"use strict";r(13)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,r){"use strict";r(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,r){"use strict";r(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,r){"use strict";r(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,r){"use strict";r(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,r){var e=r(0);e(e.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(22);e(e.P+e.F*r(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),r=o(n);return"number"!=typeof r||isFinite(r)?n.toISOString():null}})},function(t,n,r){var e=r(0),i=r(207);e(e.P+e.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,n,r){"use strict";var e=r(3),i=Date.prototype.getTime,o=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=e(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!e(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),r=t.getUTCMilliseconds(),e=n<0?"-":n>9999?"+":"";return e+("00000"+Math.abs(n)).slice(e?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(r>99?r:"0"+u(r))+"Z"}:o},function(t,n,r){var e=Date.prototype,i=e.toString,o=e.getTime;new Date(NaN)+""!="Invalid Date"&&r(12)(e,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,r){var e=r(5)("toPrimitive"),i=Date.prototype;e in i||r(11)(i,e,r(210))},function(t,n,r){"use strict";var e=r(1),i=r(22);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(e(this),"number"!=t)}},function(t,n,r){var e=r(0);e(e.S,"Array",{isArray:r(52)})},function(t,n,r){"use strict";var e=r(19),i=r(0),o=r(9),u=r(105),c=r(80),a=r(8),f=r(81),s=r(82);i(i.S+i.F*!r(54)(function(t){Array.from(t)}),"Array",{from:function(t){var n,r,i,l,h=o(t),p="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,g=void 0!==d,y=0,m=s(h);if(g&&(d=e(d,v>2?arguments[2]:void 0,2)),null==m||p==Array&&c(m))for(r=new p(n=a(h.length));n>y;y++)f(r,y,g?d(h[y],y):h[y]);else for(l=m.call(h),r=new p;!(i=l.next()).done;y++)f(r,y,g?u(l,d,[i.value,y],!0):i.value);return r.length=y,r}})},function(t,n,r){"use strict";var e=r(0),i=r(81);e(e.S+e.F*r(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,r=new("function"==typeof this?this:Array)(n);n>t;)i(r,t,arguments[t++]);return r.length=n,r}})},function(t,n,r){"use strict";var e=r(0),i=r(15),o=[].join;e(e.P+e.F*(r(46)!=Object||!r(21)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,n,r){"use strict";var e=r(0),i=r(68),o=r(20),u=r(35),c=r(8),a=[].slice;e(e.P+e.F*r(3)(function(){i&&a.call(i)}),"Array",{slice:function(t,n){var r=c(this.length),e=o(this);if(n=void 0===n?r:n,"Array"==e)return a.call(this,t,n);for(var i=u(t,r),f=u(n,r),s=c(f-i),l=new Array(s),h=0;h<s;h++)l[h]="String"==e?this.charAt(i+h):this[i+h];return l}})},function(t,n,r){"use strict";var e=r(0),i=r(10),o=r(9),u=r(3),c=[].sort,a=[1,2,3];e(e.P+e.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!r(21)(c)),"Array",{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},function(t,n,r){"use strict";var e=r(0),i=r(26)(0),o=r(21)([].forEach,!0);e(e.P+e.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,r){var e=r(4),i=r(52),o=r(5)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),e(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,r){"use strict";var e=r(0),i=r(26)(1);e(e.P+e.F*!r(21)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(26)(2);e(e.P+e.F*!r(21)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(26)(3);e(e.P+e.F*!r(21)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(26)(4);e(e.P+e.F*!r(21)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(106);e(e.P+e.F*!r(21)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,n,r){"use strict";var e=r(0),i=r(106);e(e.P+e.F*!r(21)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,n,r){"use strict";var e=r(0),i=r(50)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;e(e.P+e.F*(u||!r(21)(o)),"Array",{indexOf:function(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),i=r(15),o=r(24),u=r(8),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;e(e.P+e.F*(a||!r(21)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=i(this),r=u(n.length),e=r-1;for(arguments.length>1&&(e=Math.min(e,o(arguments[1]))),e<0&&(e=r+e);e>=0;e--)if(e in n&&n[e]===t)return e||0;return-1}})},function(t,n,r){var e=r(0);e(e.P,"Array",{copyWithin:r(107)}),r(31)("copyWithin")},function(t,n,r){var e=r(0);e(e.P,"Array",{fill:r(84)}),r(31)("fill")},function(t,n,r){"use strict";var e=r(0),i=r(26)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),e(e.P+e.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("find")},function(t,n,r){"use strict";var e=r(0),i=r(26)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),e(e.P+e.F*u,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)(o)},function(t,n,r){r(38)("Array")},function(t,n,r){var e=r(2),i=r(71),o=r(7).f,u=r(37).f,c=r(53),a=r(55),f=e.RegExp,s=f,l=f.prototype,h=/a/g,p=/a/g,v=new f(h)!==h;if(r(6)&&(!v||r(3)(function(){return p[r(5)("match")]=!1,f(h)!=h||f(p)==p||"/a/i"!=f(h,"i")}))){f=function(t,n){var r=this instanceof f,e=c(t),o=void 0===n;return!r&&e&&t.constructor===f&&o?t:i(v?new s(e&&!o?t.source:t,n):s((e=t instanceof f)?t.source:t,e&&o?a.call(t):n),r?this:l,f)};for(var d=function(t){t in f||o(f,t,{configurable:!0,get:function(){return s[t]},set:function(n){s[t]=n}})},g=u(s),y=0;g.length>y;)d(g[y++]);l.constructor=f,f.prototype=l,r(12)(e,"RegExp",f)}r(38)("RegExp")},function(t,n,r){"use strict";r(109);var e=r(1),i=r(55),o=r(6),u=/./.toString,c=function(t){r(12)(RegExp.prototype,"toString",t,!0)};r(3)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function(){var t=e(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&c(function(){return u.call(this)})},function(t,n,r){r(56)("match",1,function(t,n,r){return[function(r){"use strict";var e=t(this),i=null==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},function(t,n,r){r(56)("replace",2,function(t,n,r){return[function(e,i){"use strict";var o=t(this),u=null==e?void 0:e[n];return void 0!==u?u.call(e,o,i):r.call(String(o),e,i)},r]})},function(t,n,r){r(56)("search",1,function(t,n,r){return[function(r){"use strict";var e=t(this),i=null==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},function(t,n,r){r(56)("split",2,function(t,n,e){"use strict";var i=r(53),o=e,u=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var c=void 0===/()??/.exec("")[1];e=function(t,n){var r=String(this);if(void 0===t&&0===n)return[];if(!i(t))return o.call(r,t,n);var e,a,f,s,l,h=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),v=0,d=void 0===n?4294967295:n>>>0,g=new RegExp(t.source,p+"g");for(c||(e=new RegExp("^"+g.source+"$(?!\\s)",p));(a=g.exec(r))&&!((f=a.index+a[0].length)>v&&(h.push(r.slice(v,a.index)),!c&&a.length>1&&a[0].replace(e,function(){for(l=1;l<arguments.length-2;l++)void 0===arguments[l]&&(a[l]=void 0)}),a.length>1&&a.index<r.length&&u.apply(h,a.slice(1)),s=a[0].length,v=f,h.length>=d));)g.lastIndex===a.index&&g.lastIndex++;return v===r.length?!s&&g.test("")||h.push(""):h.push(r.slice(v)),h.length>d?h.slice(0,d):h}}else"0".split(void 0,0).length&&(e=function(t,n){return void 0===t&&0===n?[]:o.call(this,t,n)});return[function(r,i){var o=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,o,i):e.call(String(o),r,i)},e]})},function(t,n,r){"use strict";var e,i,o,u,c=r(30),a=r(2),f=r(19),s=r(48),l=r(0),h=r(4),p=r(10),v=r(39),d=r(40),g=r(57),y=r(86).set,m=r(87)(),w=r(88),b=r(110),S=r(58),x=r(111),_=a.TypeError,E=a.process,O=E&&E.versions,M=O&&O.v8||"",A=a.Promise,j="process"==s(E),P=function(){},F=i=w.f,N=!!function(){try{var t=A.resolve(1),n=(t.constructor={})[r(5)("species")]=function(t){t(P,P)};return(j||"function"==typeof PromiseRejectionEvent)&&t.then(P)instanceof n&&0!==M.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(t){}}(),k=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},I=function(t,n){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var e=t._v,i=1==t._s,o=0,u=function(n){var r,o,u,c=i?n.ok:n.fail,a=n.resolve,f=n.reject,s=n.domain;try{c?(i||(2==t._h&&L(t),t._h=1),!0===c?r=e:(s&&s.enter(),r=c(e),s&&(s.exit(),u=!0)),r===n.promise?f(_("Promise-chain cycle")):(o=k(r))?o.call(r,a,f):a(r)):f(e)}catch(t){s&&!u&&s.exit(),f(t)}};r.length>o;)u(r[o++]);t._c=[],t._n=!1,n&&!t._h&&T(t)})}},T=function(t){y.call(a,function(){var n,r,e,i=t._v,o=R(t);if(o&&(n=b(function(){j?E.emit("unhandledRejection",i,t):(r=a.onunhandledrejection)?r({promise:t,reason:i}):(e=a.console)&&e.error&&e.error("Unhandled promise rejection",i)}),t._h=j||R(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){y.call(a,function(){var n;j?E.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})})},C=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),I(n,!0))},D=function(t){var n,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw _("Promise can't be resolved itself");(n=k(t))?m(function(){var e={_w:r,_d:!1};try{n.call(t,f(D,e,1),f(C,e,1))}catch(t){C.call(e,t)}}):(r._v=t,r._s=1,I(r,!1))}catch(t){C.call({_w:r,_d:!1},t)}}};N||(A=function(t){v(this,A,"Promise","_h"),p(t),e.call(this);try{t(f(D,this,1),f(C,this,1))}catch(t){C.call(this,t)}},(e=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(41)(A.prototype,{then:function(t,n){var r=F(g(this,A));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=j?E.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&I(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new e;this.promise=t,this.resolve=f(D,t,1),this.reject=f(C,t,1)},w.f=F=function(t){return t===A||t===u?new o(t):i(t)}),l(l.G+l.W+l.F*!N,{Promise:A}),r(42)(A,"Promise"),r(38)("Promise"),u=r(18).Promise,l(l.S+l.F*!N,"Promise",{reject:function(t){var n=F(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!N),"Promise",{resolve:function(t){return x(c&&this===u?A:this,t)}}),l(l.S+l.F*!(N&&r(54)(function(t){A.all(t).catch(P)})),"Promise",{all:function(t){var n=this,r=F(n),e=r.resolve,i=r.reject,o=b(function(){var r=[],o=0,u=1;d(t,!1,function(t){var c=o++,a=!1;r.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,r[c]=t,--u||e(r))},i)}),--u||e(r)});return o.e&&i(o.v),r.promise},race:function(t){var n=this,r=F(n),e=r.reject,i=b(function(){d(t,!1,function(t){n.resolve(t).then(r.resolve,e)})});return i.e&&e(i.v),r.promise}})},function(t,n,r){"use strict";var e=r(116),i=r(45);r(59)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return e.def(i(this,"WeakSet"),t,!0)}},e,!1,!0)},function(t,n,r){"use strict";var e=r(0),i=r(60),o=r(89),u=r(1),c=r(35),a=r(8),f=r(4),s=r(2).ArrayBuffer,l=r(57),h=o.ArrayBuffer,p=o.DataView,v=i.ABV&&s.isView,d=h.prototype.slice,g=i.VIEW;e(e.G+e.W+e.F*(s!==h),{ArrayBuffer:h}),e(e.S+e.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||f(t)&&g in t}}),e(e.P+e.U+e.F*r(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==d&&void 0===n)return d.call(u(this),t);for(var r=u(this).byteLength,e=c(t,r),i=c(void 0===n?r:n,r),o=new(l(this,h))(a(i-e)),f=new p(this),s=new p(o),v=0;e<i;)s.setUint8(v++,f.getUint8(e++));return o}}),r(38)("ArrayBuffer")},function(t,n,r){var e=r(0);e(e.G+e.W+e.F*!r(60).ABV,{DataView:r(89).DataView})},function(t,n,r){r(27)("Int8",1,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Uint8",1,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Uint8",1,function(t){return function(n,r,e){return t(this,n,r,e)}},!0)},function(t,n,r){r(27)("Int16",2,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Uint16",2,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Int32",4,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Uint32",4,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Float32",4,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){r(27)("Float64",8,function(t){return function(n,r,e){return t(this,n,r,e)}})},function(t,n,r){var e=r(0),i=r(10),o=r(1),u=(r(2).Reflect||{}).apply,c=Function.apply;e(e.S+e.F*!r(3)(function(){u(function(){})}),"Reflect",{apply:function(t,n,r){var e=i(t),a=o(r);return u?u(e,n,a):c.call(e,n,a)}})},function(t,n,r){var e=r(0),i=r(36),o=r(10),u=r(1),c=r(4),a=r(3),f=r(97),s=(r(2).Reflect||{}).construct,l=a(function(){function t(){}return!(s(function(){},[],t)instanceof t)}),h=!a(function(){s(function(){})});e(e.S+e.F*(l||h),"Reflect",{construct:function(t,n){o(t),u(n);var r=arguments.length<3?t:o(arguments[2]);if(h&&!l)return s(t,n,r);if(t==r){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var e=[null];return e.push.apply(e,n),new(f.apply(t,e))}var a=r.prototype,p=i(c(a)?a:Object.prototype),v=Function.apply.call(t,p,n);return c(v)?v:p}})},function(t,n,r){var e=r(7),i=r(0),o=r(1),u=r(22);i(i.S+i.F*r(3)(function(){Reflect.defineProperty(e.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,r){o(t),n=u(n,!0),o(r);try{return e.f(t,n,r),!0}catch(t){return!1}}})},function(t,n,r){var e=r(0),i=r(16).f,o=r(1);e(e.S,"Reflect",{deleteProperty:function(t,n){var r=i(o(t),n);return!(r&&!r.configurable)&&delete t[n]}})},function(t,n,r){"use strict";var e=r(0),i=r(1),o=function(t){this._t=i(t),this._i=0;var n,r=this._k=[];for(n in t)r.push(n)};r(77)(o,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),e(e.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,n,r){var e=r(16),i=r(17),o=r(14),u=r(0),c=r(4),a=r(1);u(u.S,"Reflect",{get:function t(n,r){var u,f,s=arguments.length<3?n:arguments[2];return a(n)===s?n[r]:(u=e.f(n,r))?o(u,"value")?u.value:void 0!==u.get?u.get.call(s):void 0:c(f=i(n))?t(f,r,s):void 0}})},function(t,n,r){var e=r(16),i=r(0),o=r(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return e.f(o(t),n)}})},function(t,n,r){var e=r(0),i=r(17),o=r(1);e(e.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,n,r){var e=r(0);e(e.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,r){var e=r(0),i=r(1),o=Object.isExtensible;e(e.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,n,r){var e=r(0);e(e.S,"Reflect",{ownKeys:r(118)})},function(t,n,r){var e=r(0),i=r(1),o=Object.preventExtensions;e(e.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,n,r){var e=r(7),i=r(16),o=r(17),u=r(14),c=r(0),a=r(32),f=r(1),s=r(4);c(c.S,"Reflect",{set:function t(n,r,c){var l,h,p=arguments.length<4?n:arguments[3],v=i.f(f(n),r);if(!v){if(s(h=o(n)))return t(h,r,c,p);v=a(0)}if(u(v,"value")){if(!1===v.writable||!s(p))return!1;if(l=i.f(p,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=c,e.f(p,r,l)}else e.f(p,r,a(0,c));return!0}return void 0!==v.set&&(v.set.call(p,c),!0)}})},function(t,n,r){var e=r(0),i=r(69);i&&e(e.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},function(t,n,r){"use strict";var e=r(0),i=r(50)(!0);e(e.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("includes")},function(t,n,r){"use strict";var e=r(0),i=r(119),o=r(9),u=r(8),c=r(10),a=r(83);e(e.P,"Array",{flatMap:function(t){var n,r,e=o(this);return c(t),n=u(e.length),r=a(e,0),i(r,e,e,n,0,1,t,arguments[1]),r}}),r(31)("flatMap")},function(t,n,r){"use strict";var e=r(0),i=r(119),o=r(9),u=r(8),c=r(24),a=r(83);e(e.P,"Array",{flatten:function(){var t=arguments[0],n=o(this),r=u(n.length),e=a(n,0);return i(e,n,n,r,0,void 0===t?1:c(t)),e}}),r(31)("flatten")},function(t,n,r){"use strict";var e=r(0),i=r(75)(!0);e(e.P,"String",{at:function(t){return i(this,t)}})},function(t,n,r){"use strict";var e=r(0),i=r(120),o=r(58);e(e.P+e.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,r){"use strict";var e=r(0),i=r(120),o=r(58);e(e.P+e.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,r){"use strict";r(43)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,r){"use strict";r(43)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,r){"use strict";var e=r(0),i=r(23),o=r(8),u=r(53),c=r(55),a=RegExp.prototype,f=function(t,n){this._r=t,this._s=n};r(77)(f,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),e(e.P,"String",{matchAll:function(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),r="flags"in a?String(t.flags):c.call(t),e=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return e.lastIndex=o(t.lastIndex),new f(e,n)}})},function(t,n,r){r(65)("asyncIterator")},function(t,n,r){r(65)("observable")},function(t,n,r){var e=r(0),i=r(118),o=r(15),u=r(16),c=r(81);e(e.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,r,e=o(t),a=u.f,f=i(e),s={},l=0;f.length>l;)void 0!==(r=a(e,n=f[l++]))&&c(s,n,r);return s}})},function(t,n,r){var e=r(0),i=r(121)(!1);e(e.S,"Object",{values:function(t){return i(t)}})},function(t,n,r){var e=r(0),i=r(121)(!0);e(e.S,"Object",{entries:function(t){return i(t)}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(10),u=r(7);r(6)&&e(e.P+r(61),"Object",{__defineGetter__:function(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(10),u=r(7);r(6)&&e(e.P+r(61),"Object",{__defineSetter__:function(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(22),u=r(17),c=r(16).f;r(6)&&e(e.P+r(61),"Object",{__lookupGetter__:function(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.get}while(r=u(r))}})},function(t,n,r){"use strict";var e=r(0),i=r(9),o=r(22),u=r(17),c=r(16).f;r(6)&&e(e.P+r(61),"Object",{__lookupSetter__:function(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.set}while(r=u(r))}})},function(t,n,r){var e=r(0);e(e.P+e.R,"Map",{toJSON:r(122)("Map")})},function(t,n,r){var e=r(0);e(e.P+e.R,"Set",{toJSON:r(122)("Set")})},function(t,n,r){r(62)("Map")},function(t,n,r){r(62)("Set")},function(t,n,r){r(62)("WeakMap")},function(t,n,r){r(62)("WeakSet")},function(t,n,r){r(63)("Map")},function(t,n,r){r(63)("Set")},function(t,n,r){r(63)("WeakMap")},function(t,n,r){r(63)("WeakSet")},function(t,n,r){var e=r(0);e(e.G,{global:r(2)})},function(t,n,r){var e=r(0);e(e.S,"System",{global:r(2)})},function(t,n,r){var e=r(0),i=r(20);e(e.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{clamp:function(t,n,r){return Math.min(r,Math.max(n,t))}})},function(t,n,r){var e=r(0);e(e.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,n,r){var e=r(0),i=180/Math.PI;e(e.S,"Math",{degrees:function(t){return t*i}})},function(t,n,r){var e=r(0),i=r(124),o=r(104);e(e.S,"Math",{fscale:function(t,n,r,e,u){return o(i(t,n,r,e,u))}})},function(t,n,r){var e=r(0);e(e.S,"Math",{iaddh:function(t,n,r,e){var i=t>>>0,o=r>>>0;return(n>>>0)+(e>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},function(t,n,r){var e=r(0);e(e.S,"Math",{isubh:function(t,n,r,e){var i=t>>>0,o=r>>>0;return(n>>>0)-(e>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},function(t,n,r){var e=r(0);e(e.S,"Math",{imulh:function(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>16,c=e>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>16)+((i*c>>>0)+(65535&a)>>16)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,n,r){var e=r(0),i=Math.PI/180;e(e.S,"Math",{radians:function(t){return t*i}})},function(t,n,r){var e=r(0);e(e.S,"Math",{scale:r(124)})},function(t,n,r){var e=r(0);e(e.S,"Math",{umulh:function(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>>16,c=e>>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>>16)+((i*c>>>0)+(65535&a)>>>16)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,n,r){"use strict";var e=r(0),i=r(18),o=r(2),u=r(57),c=r(111);e(e.P+e.R,"Promise",{finally:function(t){var n=u(this,i.Promise||o.Promise),r="function"==typeof t;return this.then(r?function(r){return c(n,t()).then(function(){return r})}:t,r?function(r){return c(n,t()).then(function(){throw r})}:t)}})},function(t,n,r){"use strict";var e=r(0),i=r(88),o=r(110);e(e.S,"Promise",{try:function(t){var n=i.f(this),r=o(t);return(r.e?n.reject:n.resolve)(r.v),n.promise}})},function(t,n,r){var e=r(28),i=r(1),o=e.key,u=e.set;e.exp({defineMetadata:function(t,n,r,e){u(t,n,i(r),o(e))}})},function(t,n,r){var e=r(28),i=r(1),o=e.key,u=e.map,c=e.store;e.exp({deleteMetadata:function(t,n){var r=arguments.length<3?void 0:o(arguments[2]),e=u(i(n),r,!1);if(void 0===e||!e.delete(t))return!1;if(e.size)return!0;var a=c.get(n);return a.delete(r),!!a.size||c.delete(n)}})},function(t,n,r){var e=r(28),i=r(1),o=r(17),u=e.has,c=e.get,a=e.key,f=function(t,n,r){if(u(t,n,r))return c(t,n,r);var e=o(n);return null!==e?f(t,e,r):void 0};e.exp({getMetadata:function(t,n){return f(t,i(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,r){var e=r(114),i=r(123),o=r(28),u=r(1),c=r(17),a=o.keys,f=o.key,s=function(t,n){var r=a(t,n),o=c(t);if(null===o)return r;var u=s(o,n);return u.length?r.length?i(new e(r.concat(u))):u:r};o.exp({getMetadataKeys:function(t){return s(u(t),arguments.length<2?void 0:f(arguments[1]))}})},function(t,n,r){var e=r(28),i=r(1),o=e.get,u=e.key;e.exp({getOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,r){var e=r(28),i=r(1),o=e.keys,u=e.key;e.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,n,r){var e=r(28),i=r(1),o=r(17),u=e.has,c=e.key,a=function(t,n,r){if(u(t,n,r))return!0;var e=o(n);return null!==e&&a(t,e,r)};e.exp({hasMetadata:function(t,n){return a(t,i(n),arguments.length<3?void 0:c(arguments[2]))}})},function(t,n,r){var e=r(28),i=r(1),o=e.has,u=e.key;e.exp({hasOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,r){var e=r(28),i=r(1),o=r(10),u=e.key,c=e.set;e.exp({metadata:function(t,n){return function(r,e){c(t,n,(void 0!==e?i:o)(r),u(e))}}})},function(t,n,r){var e=r(0),i=r(87)(),o=r(2).process,u="process"==r(20)(o);e(e.G,{asap:function(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},function(t,n,r){"use strict";var e=r(0),i=r(2),o=r(18),u=r(87)(),c=r(5)("observable"),a=r(10),f=r(1),s=r(39),l=r(41),h=r(11),p=r(40),v=p.RETURN,d=function(t){return null==t?void 0:a(t)},g=function(t){var n=t._c;n&&(t._c=void 0,n())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,g(t))},w=function(t,n){f(t),this._c=void 0,this._o=t,t=new b(this);try{var r=n(t),e=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){e.unsubscribe()}:a(r),this._c=r)}catch(n){return void t.error(n)}y(this)&&g(this)};w.prototype=l({},{unsubscribe:function(){m(this)}});var b=function(t){this._s=t};b.prototype=l({},{next:function(t){var n=this._s;if(!y(n)){var r=n._o;try{var e=d(r.next);if(e)return e.call(r,t)}catch(t){try{m(n)}finally{throw t}}}},error:function(t){var n=this._s;if(y(n))throw t;var r=n._o;n._o=void 0;try{var e=d(r.error);if(!e)throw t;t=e.call(r,t)}catch(t){try{g(n)}finally{throw t}}return g(n),t},complete:function(t){var n=this._s;if(!y(n)){var r=n._o;n._o=void 0;try{var e=d(r.complete);t=e?e.call(r,t):void 0}catch(t){try{g(n)}finally{throw t}}return g(n),t}}});var S=function(t){s(this,S,"Observable","_f")._f=a(t)};l(S.prototype,{subscribe:function(t){return new w(t,this._f)},forEach:function(t){var n=this;return new(o.Promise||i.Promise)(function(r,e){a(t);var i=n.subscribe({next:function(n){try{return t(n)}catch(t){e(t),i.unsubscribe()}},error:e,complete:r})})}}),l(S,{from:function(t){var n="function"==typeof this?this:S,r=d(f(t)[c]);if(r){var e=f(r.call(t));return e.constructor===n?e:new n(function(t){return e.subscribe(t)})}return new n(function(n){var r=!1;return u(function(){if(!r){try{if(p(t,!1,function(t){if(n.next(t),r)return v})===v)return}catch(t){if(r)throw t;return void n.error(t)}n.complete()}}),function(){r=!0}})},of:function(){for(var t=0,n=arguments.length,r=new Array(n);t<n;)r[t]=arguments[t++];return new("function"==typeof this?this:S)(function(t){var n=!1;return u(function(){if(!n){for(var e=0;e<r.length;++e)if(t.next(r[e]),n)return;t.complete()}}),function(){n=!0}})}}),h(S.prototype,c,function(){return this}),e(e.G,{Observable:S}),r(38)("Observable")},function(t,n,r){var e=r(2),i=r(0),o=r(58),u=[].slice,c=/MSIE .\./.test(o),a=function(t){return function(n,r){var e=arguments.length>2,i=!!e&&u.call(arguments,2);return t(e?function(){("function"==typeof n?n:Function(n)).apply(this,i)}:n,r)}};i(i.G+i.B+i.F*c,{setTimeout:a(e.setTimeout),setInterval:a(e.setInterval)})},function(t,n,r){var e=r(0),i=r(86);e(e.G+e.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,n,r){for(var e=r(85),i=r(34),o=r(12),u=r(2),c=r(11),a=r(44),f=r(5),s=f("iterator"),l=f("toStringTag"),h=a.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=i(p),d=0;d<v.length;d++){var g,y=v[d],m=p[y],w=u[y],b=w&&w.prototype;if(b&&(b[s]||c(b,s,h),b[l]||c(b,l,y),a[y]=h,m))for(g in e)b[g]||o(b,g,e[g],!0)}},function(t,n,r){(function(n){!function(n){"use strict";var r,e=Object.prototype,i=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag",f="object"==typeof t,s=n.regeneratorRuntime;if(s)f&&(t.exports=s);else{(s=n.regeneratorRuntime=f?t.exports:{}).wrap=b;var l="suspendedStart",h="suspendedYield",p="executing",v="completed",d={},g={};g[u]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(N([])));m&&m!==e&&i.call(m,u)&&(g=m);var w=E.prototype=x.prototype=Object.create(g);_.prototype=w.constructor=E,E.constructor=_,E[a]=_.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===_||"GeneratorFunction"===(n.displayName||n.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(w),t},s.awrap=function(t){return{__await:t}},O(M.prototype),M.prototype[c]=function(){return this},s.AsyncIterator=M,s.async=function(t,n,r,e){var i=new M(b(t,n,r,e));return s.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},O(w),w[a]="Generator",w[u]=function(){return this},w.toString=function(){return"[object Generator]"},s.keys=function(t){var n=[];for(var r in t)n.push(r);return n.reverse(),function r(){for(;n.length;){var e=n.pop();if(e in t)return r.value=e,r.done=!1,r}return r.done=!0,r}},s.values=N,F.prototype={constructor:F,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(P),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function e(e,i){return c.type="throw",c.arg=t,n.next=e,i&&(n.method="next",n.arg=r),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],c=u.completion;if("root"===u.tryLoc)return e("end");if(u.tryLoc<=this.prev){var a=i.call(u,"catchLoc"),f=i.call(u,"finallyLoc");if(a&&f){if(this.prev<u.catchLoc)return e(u.catchLoc,!0);if(this.prev<u.finallyLoc)return e(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return e(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return e(u.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc<=this.prev&&i.call(e,"finallyLoc")&&this.prev<e.finallyLoc){var o=e;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),P(r),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var e=r.completion;if("throw"===e.type){var i=e.arg;P(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:N(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=r),d}}}function b(t,n,r,e){var i=n&&n.prototype instanceof x?n:x,o=Object.create(i.prototype),u=new F(e||[]);return o._invoke=function(t,n,r){var e=l;return function(i,o){if(e===p)throw new Error("Generator is already running");if(e===v){if("throw"===i)throw o;return k()}for(r.method=i,r.arg=o;;){var u=r.delegate;if(u){var c=A(u,r);if(c){if(c===d)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(e===l)throw e=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);e=p;var a=S(t,n,r);if("normal"===a.type){if(e=r.done?v:h,a.arg===d)continue;return{value:a.arg,done:r.done}}"throw"===a.type&&(e=v,r.method="throw",r.arg=a.arg)}}}(t,r,u),o}function S(t,n,r){try{return{type:"normal",arg:t.call(n,r)}}catch(t){return{type:"throw",arg:t}}}function x(){}function _(){}function E(){}function O(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function M(t){function r(n,e,o,u){var c=S(t[n],t,e);if("throw"!==c.type){var a=c.arg,f=a.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){r("next",t,o,u)},function(t){r("throw",t,o,u)}):Promise.resolve(f).then(function(t){a.value=t,o(a)},u)}u(c.arg)}var e;"object"==typeof n.process&&n.process.domain&&(r=n.process.domain.bind(r)),this._invoke=function(t,n){function i(){return new Promise(function(e,i){r(t,n,e,i)})}return e=e?e.then(i,i):i()}}function A(t,n){var e=t.iterator[n.method];if(e===r){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=r,A(t,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=S(e,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,d;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=r),n.delegate=null,d):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function j(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function P(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function F(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(j,this),this.reset(!0)}function N(t){if(t){var n=t[u];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,o=function n(){for(;++e<t.length;)if(i.call(t,e))return n.value=t[e],n.done=!1,n;return n.value=r,n.done=!0,n};return o.next=o}}return{next:k}}function k(){return{value:r,done:!0}}}("object"==typeof n?n:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,r(90))},function(t,n,r){r(326),t.exports=r(18).RegExp.escape},function(t,n,r){var e=r(0),i=r(327)(/[\\^$*+?.()|[\]{}]/g,"\\$&");e(e.S,"RegExp",{escape:function(t){return i(t)}})},function(t,n){t.exports=function(t,n){var r=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,r)}}},function(t,n,r){r(329),r(330),r(331),r(332),r(333),r(334),r(335);var e=r(336);t.exports=e},function(t,n){!function(t){function n(t,n){return(n?window[t][n]?/{|}|%7B|%7D|\[|\]|%5B|%5D/.test(window[t][n])?JSON.parse(unescape(window[t][n])):unescape(window[t][n]):void 0:window[t])||!1}function r(t,n,r){return"string"==typeof n?window[t][n]="object"==typeof r?escape(JSON.stringify(r)):escape(r):"object"==typeof n&&Object.keys(n).forEach(function(e){window[t][e]="object"==typeof r?escape(JSON.stringify(n[e])):escape(n[e])}),window[t]}t.IsNullOrEmpty=function(t){return null==t||null==t||""==t},t.inAttr=function(t){return!0===t||"true"===t||""===t},t.enpty_obj=function(t){return Object.keys(t).map(function(n){t[n]=null}),t},t.IsNumber=function(t){return isNaN(t)?0:t},t.clone=function(t){if(null==t||"object"!=typeof t)return t;if(t instanceof Date)return(n=new Date).setTime(t.getTime()),n;if(t instanceof Array){for(var n=[],r=0,e=t.length;r<e;++r)n[r]=clone(t[r]);return n}if(t instanceof Object){n={};for(var i in t)t.hasOwnProperty(i)&&(n[i]=clone(t[i]));return n}throw new Error("Unable to copy obj! Its type isn't supported.")},t.arrBuildTree=function(t,n,r){var e=[];return t.forEach(function(t){t.children=[]}),t.forEach(function(i){if(0!==i[n]&&"0"!==i[n]){var o=i;t.forEach(function(t){t[r]==o[n]&&t.children.push(o)})}else e.push(i)}),t.forEach(function(t){0==t.children.length&&delete t.children}),e},t.treeBreakArr=function(t,n){var r=[],e=0;n=n||"children";function i(t,o){var u=o+1;e=e>o?e:o,t.forEach(function(t){r.push(t),Array.isArray(t[n])&&t[n].length>0&&i(t[n],u)})}if("object"==typeof t&&Array.isArray(t))i(t,1);else if("object"==typeof t&&!Array.isArray(t)){var o=[];o.push(t),i(o,1)}return{array:r,depth:e}},t.getSearch=function(t){var n=[];try{n=window.location.search.split("?")[1].split("&")}catch(t){}var r={};return n.forEach(function(t){r[t.split("=")[0]]=t.split("=")[1]}),t?/%u/.test(r[t])?unescape(r[t]):r[t]:r},t.toSearch=function(n,r){var e="?";if("object"==typeof n&&Array.isArray(n))n.forEach(function(n,r){e+="["+r+"]="+t.toSearch(n,!0)+"&"});else{if("object"!=typeof n)return n;Object.keys(n).forEach(function(r){if("object"==typeof n[r]&&Array.isArray(n[r]))n[r].forEach(function(n,i){e+=r+"["+i+"]="+t.toSearch(n,!0)+"&"});else if("object"==typeof n[r]&&null!=n[r])e+=t.toSearch(n[r],!0)+"&";else{var i=/[\u3220-\uFA29]/.test(n[r])?escape(n[r]):n[r];e+=r+"="+(i||"")+"&"}})}return r?e.slice(1,-1):e.slice(0,-1)},t.setHash=function(t,n,r){var e=[];try{e=window.location.hash.split("#")[1].split("&")}catch(t){}var i={};$(e).each(function(){i[this.split("=")[0]]=this.split("=")[1]}),"string"==typeof t?(r=r||function(){},i[t]=n):"object"==typeof t&&(r=n||function(){},Object.keys(t).forEach(function(n){i[n]=t[n]}));var o="#";for(tkey in i)o+=tkey+"="+i[tkey]+"&";window.location.hash?window.location.replace(window.location.href.replace(window.location.hash,o.slice(0,-1))):window.location.replace(window.location.href+o.slice(0,-1)),r()},t.getHash=function(t){var n=[];try{n=window.location.hash.split("#")[1].split("&")}catch(t){}var r={};return n.forEach(function(t){r[t.split("=")[0]]=t.split("=")[1]}),t?r[t]:r},t.getLocal=function(t){return n("localStorage",t)},t.setLocal=function(t,n){return r("localStorage",t,n)},t.getSession=function(t){return n("sessionStorage",t)},t.setSession=function(t,n){return r("sessionStorage",t,n)},t.setRandomId=function(t){var n=this.$refs[t],r=t+"-"+(1e5*Math.random()+"").slice(0,5);return n.setAttribute("id",r),r},t.sortorder=function(t){try{if(t.indexOf("asc")>-1)return"asc";if(t.indexOf("desc")>-1)return"desc"}catch(n){return t}},t.GetGuid=function(){var t="";return $.ajaxSetup({async:!1}),this.$get(sysUrl+"/sysfile/getguid",{},function(n,r){t=n}),$.ajaxSetup({async:!0}),t},t.getObjByValue=function(t){var n=null,r=t.arr,e=t.target,i=t.key||"key",o=t.value||"value",u=t.mapkey||i,c=t.mapvalue||o,a=t.add||!1,f={};return"string"==typeof t.target?(r.forEach(function(t){f[escape(t[o])]=t}),n={},a&&(n=clone(f[escape(e)])),n[u]=f[escape(e)][i],n[c]=e):"object"==typeof t.target&&Array.isArray(t.target)&&(n=[],r.forEach(function(t){f[escape(t[o])]=t}),e.forEach(function(t){n.push(f[escape(t)])})),n},t.timeToDate=function(t){return/ /.test(t)?t.split(" ")[0]:t},t.getRandom=function(t){return(Math.random()+"").slice(2,t+2)},t.getTimeStrmp=function(){return(new Date).getTime()},t.floatToPercent=function(t,n,r){var e=100*Number(t);return e>100&&r&&(e=100),e.toFixed(n)+"%"},t.wxPay=function(t,n,r){WeixinJSBridge.invoke("getBrandWCPayRequest",{appId:t.appId,timeStamp:t.timeStamp,nonceStr:t.nonceStr,package:t.package,signType:"MD5",paySign:t.paySign},function(t){"get_brand_wcpay_request:ok"==t.err_msg?(alert("支付成功"),n&&n()):"get_brand_wcpay_request:fail"==t.err_msg?(alert("支付失败，请重试"),r&&r()):"get_brand_wcpay_request:cancel"==t.err_msg?(alert("用户取消支付"),r&&r()):(alert(t.err_msg),r&&r())})},t.downloader=function(t){var n=document.createElement("a");if("download"in n)return n.setAttribute("download",t),n.setAttribute("href",t),n.innerHTML="downloading",document.body.appendChild(n),setTimeout(function(){n.click(),document.body.removeChild(n)},1e3/24),!0;try{var r=document.createElement("iframe");return r.style.display="none",document.body.appendChild(r),r.src=t,setTimeout(function(){document.body.removeChild(r)},333),!0}catch(n){var e=document.createElement("form");return e.setAttribute("method","get"),e.setAttribute("action",t),document.body.appendChild(e),setTimeout(function(){e.submit(),document.body.removeChild(e)},1e3/24),!0}return window.open(url)||confirm("请使用右键-另存为进行下载，完成后点击后退返回当前页面")&&(location.href=url),!0},t.imgToBase64=function(t,n,r){var e=document.createElement("CANVAS"),i=e.getContext("2d"),o=new Image;o.crossOrigin="Anonymous",o.onload=function(){e.height=o.height,e.width=o.width,i.drawImage(o,0,0);var t=e.toDataURL(r||"image/png");n.call(this,t),e=null},o.src=t},t.inheritPrototype=function(t,n){var r=Object.create(n.prototype);r.constructor=t,t.prototype=r},t.loadScript=function(t){if(!t)throw new Error("请指定要加载的js文件路径");var n=document.createElement("script");n.type="text/javascript",n.async=!0,n.src=t;var r=document.getElementsByTagName("script")[0];return r.parentNode.insertBefore(n,r),!0},t.Arabia_to_Chinese=function(t){var n=["角","分"],r=["零","壹","贰","叁","肆","伍","陆","柒","捌","玖"],e=[["元","万","亿"],["","拾","佰","仟"]],i=t<0?"欠":"";t=Math.abs(t);for(var o="",u=0;u<n.length;u++)o+=(r[Math.floor(10*t*Math.pow(10,u))%10]+n[u]).replace(/零./,"");o=o||"整",t=Math.floor(t);for(u=0;u<e[0].length&&t>0;u++){for(var c="",a=0;a<e[1].length&&t>0;a++)c=r[t%10]+e[1][a]+c,t=Math.floor(t/10);o=c.replace(/(零.)*零$/,"").replace(/^$/,"零")+e[0][u]+o}return i+o.replace(/(零.)*零元/,"元").replace(/(零.)+/g,"零").replace(/^整$/,"零元整")},t.mixin=function(t,n,r){return Object.keys(t).forEach(function(e){r?n[e]=t[e]:n[e]||(n[e]=t[e])}),n}}(window)},function(t,n){window.Chain=function(){this.chain_arr=[]},window.Chain.prototype={link:function(t){return"function"==typeof t&&this.chain_arr.push(t),this},run:function(t){var n=this,r=0,e=(t=t,function(){var i=n.chain_arr[r];if(r++,i)return i(t,e)});e()}}},function(t,n){Hasher=function(t){this.Init(t)},Hasher.prototype={$data:{},$watch:{},Init:function(t){var n=this;this.$watch=t.watch;var r=t.data||{};if(this.$data=mixin(this.getHash(),r,!0),this.initListener(this.$data),!("onhashchange"in window&&(void 0===document.documentMode||document.documentMode>=8)))throw new Error("您的浏览器不支持hash监听事件");window.onhashchange=function(t){var r=n.hashWatcher(t);n.initListener(r.add),n.updateData(r.update);var e={};r.del.forEach(function(t){e[t]=""}),n.updateData(e)},t.mounted&&t.mounted.call(this)},push:function(t,n){var r=this.crearNewHref(t,n);return window.location.href=r,r},replace:function(t,n){var r=this.crearNewHref(t,n);return window.location.replace(r),r},toHash:function(t,n,r){var e=this.getHash();"string"==typeof t?(r=r||function(){},e[t]=n):"object"==typeof t&&(r=n||function(){},Object.keys(t).forEach(function(n){e[n]=t[n]}));var i="#";for(tkey in e)"$path"==tkey?i+=e[tkey]+"&":i+=tkey+"="+e[tkey]+"&";return i.slice(0,-1)},crearNewHref:function(t,n){var r=this.toHash(t,n),e=window.location.href;return window.location.hash?e.replace(window.location.hash,r):e+r},getHash:function(){var t=[];try{t=window.location.hash.split("#")[1].split("&")}catch(t){}var n={};return t.forEach(function(t){/=/.test(t)?n[t.split("=")[0]]=t.split("=")[1]:n.$path=t}),n},hashWatcher:function(t){var n=this,r=this.getHash(),e={},i={},o=[];return Object.keys(r).forEach(function(t){void 0===n.$data[t]&&void 0!==r[t]?i[t]=r[t]:n.$data[t]!=r[t]&&(e[t]={old:n.$data[t],new:r[t]})}),Object.keys(this.$data).forEach(function(t){void 0!==n.$data[t]&&void 0===r[t]&&o.push(t)}),{update:e,add:i,del:o}},initListener:function(t){var n=this;Object.keys(t).forEach(function(t){Object.defineProperty(n,t,{get:function(){return n.$data[t]},set:function(r){var e=n.$data[t];n.$data[t]=r,n.$watch[t]&&n.$watch[t](r,e)}})})},updateData:function(t){var n=this;Object.keys(t).forEach(function(r){n[r]=t[r].new})}}},function(t,n){ShadeBox=function(t){this.init(t)},ShadeBox.prototype={el:null,animate:300,lock:!1,init:function(t){var n=document.body,r=document.createElement("div"),e={position:"fixed",left:0,right:0,top:0,bottom:0,zIndex:5e3,display:"none",transition:"all",opacity:0};if(this.lock=t.lock,t.animate){var i=t.animate;/s/.test(i)&&(i=1e3*Number(i.split("s")[0])),this.animate=Number(i)}e.transition="all "+this.animate/1e3+"s",mixin(t.style,e),Object.keys(e).forEach(function(t){r.style[t]=e[t]}),r.id="cover__div--"+getRandom(5),r.innerHTML=t.innerHTML||"",n.appendChild(r),this.el=r},show:function(){document.body.style.overflow=this.lock?"hidden":"",this.el.style.display="block",this.el.style.opacity=1},hide:function(){document.body.style.overflow="",this.el.style.opacity=0,setTimeout(function(){this.el.style.display="none"}.bind(this),this.animate)}}},function(t,n){window.ajaxResCheck=function(t,n,r){r=r;2==arguments.length&&(r=n);var e={v:function(){r&&r(t.tdata,t)},pglist:function(){r&&r(t)},valerror:function(){IsNullOrEmpty(t.msg)||ShowMsgBox(t.msg,"error")},"login-index":function(){ShowMsgBox(t.msg,"error",function(){var t=getSession("company"),n=getSession("user");if(sessionStorage.clear(),t)window.top.location.href="/"+t+"/login";else{if("1"==n.userid)return void(window.top.location.href=htmlUrl+"/platlogin.html");window.top.location.href=htmlUrl+"/login.html"}})},"jump-url":function(){ShowMsgBox(t.msg,"info",function(){window.top.location.href=htmlUrl+t.url})}};return e[t.code]?e[t.code]():/^(throw-)/.test(t.code)?(t.code=t.code.split("throw-")[1],void(r&&r(t))):ShowMsgBox(t.msg,"error",function(){throw new Error(JSON.stringify(n))})},window.ShowMsg=function(t,n,r){r=r||function(){},window.top.$vue.$notify({message:t,type:n||"warning",onClose:r})},window.ShowConfirm=function(t,n,r,e){r=r||function(){},e=e||function(){},window.top.$vue.$confirm(t,"提示",{confirmButtonText:"确定",cancelButtonText:"取消",type:n||"warning",showClose:!1,callback:function(t,n){"confirm"==t?r():e()}})}},function(t,n){window.Date.prototype.pattern=function(t){var n={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours()%12==0?12:this.getHours()%12,"H+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var r in/(y+)/.test(t)&&(t=t.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),/(E+)/.test(t)&&(t=t.replace(RegExp.$1,(RegExp.$1.length>1?RegExp.$1.length>2?"/u661f/u671f":"/u5468":"")+{0:"/u65e5",1:"/u4e00",2:"/u4e8c",3:"/u4e09",4:"/u56db",5:"/u4e94",6:"/u516d"}[this.getDay()+""])),n)new RegExp("("+r+")").test(t)&&(t=t.replace(RegExp.$1,1==RegExp.$1.length?n[r]:("00"+n[r]).substr((""+n[r]).length)));return t},window.Date.prototype.Format=function(t){var n={"M+":this.getMonth()+1,"d+":this.getDate(),"H+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var r in/(y+)/.test(t)&&(t=t.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),n)new RegExp("("+r+")").test(t)&&(t=t.replace(RegExp.$1,1==RegExp.$1.length?n[r]:("00"+n[r]).substr((""+n[r]).length)));return t}},function(t,n){window.String.prototype.html=function(t){var n=["&#39;","'","&quot;",'"',"&nbsp;"," ","&gt;",">","&lt;","<","&amp;","&","&yen;","¥","&lsquo;","‘","&rsquo;","’","&hellip;","…","&ldquo;","“","&rdquo;","”","&mdash;","—"];t&&n.reverse();for(var r=0,e=this;r<n.length;r+=2)e=e.replace(new RegExp(n[r],"g"),n[r+1]);return e}},function(t,n){window.Vue?window.$?function(){function n(t){try{$vue.loadingController=!0}catch(t){}var n=clone(t.data);n=t.fztype?JSON.stringify(n):n;var r=t.fztype?"application/json;charset=UTF-8":"application/x-www-form-urlencoded;charset=UTF-8",e=t.callback||function(){};$.ajax({url:/\?/.test(t.url)?t.url+"&random="+getTimeStrmp():t.url+"?random="+getTimeStrmp(),type:t.type||"get",data:n,contentType:r,headers:{pageuser:getSession("user")?getSession("user").userid:""},success:function(n){var r="string"==typeof n&&/{|}/.test(n)?JSON.parse(n):n;try{$vue.loadingController=!1}catch(t){}!function t(n){if("object"==typeof n&&Array.isArray(n))n.forEach(function(n){"string"==typeof n?n=t(n):t(n)});else if("object"==typeof n&&n)Object.keys(n).forEach(function(r){"string"==typeof n[r]?n[r]=t(n[r]):t(n[r])});else if("string"==typeof n)return n.html()}(r),ajaxResCheck.call(this,r,t,e)},complete:function(t,n){try{"login-index"==t.responseJSON.result&&(window.parent!=window?window.top.location.href=htmlUrl+"/login.html":location.href=htmlUrl+"/login.html")}catch(t){}},error:function(n){console.error("ajax-error:"+t.url,n)}})}function r(t){window.$vue=null,t&&this.init(t)}function e(t){return null!=t&&null!=t&&"false"!=t}window.$bus=new Vue({}),Vue.prototype.$get=function(t,r,e,i){var o,u,c,a;o=t,u="",c=c||function(){},a=!1,2==arguments.length&&"function"==typeof r?c=r:2==arguments.length&&"function"!=typeof r?u=r:3==arguments.length?"boolean"==typeof arguments[arguments.length-1]?(u=r,a=e):(u=r,c=e):4==arguments.length&&(u=r,c=e,a=i),n.call(this,{url:o,data:u,type:"get",callback:function(t,n){c.call(this,t,n)}.bind(this),fztype:a})},Vue.prototype.$post=function(t,r,e,i){var o,u,c,a;o=t,u="",c=c||function(){},a=!1,2==arguments.length&&"function"==typeof r?c=r:2==arguments.length&&"function"!=typeof r?u=r:3==arguments.length?"boolean"==typeof arguments[arguments.length-1]?(u=r,a=e):(u=r,c=e):4==arguments.length&&(u=r,c=e,a=i),n.call(this,{url:o,data:u,type:"post",callback:function(t,n){c.call(this,t,n)}.bind(this),fztype:a})},r.prototype={data:{},methods:{},computed:{},watch:{},created:function(){},mounted:function(){},init:function(t){var n=t||this;t&&(n.mounted=n.mounted||function(){},n.created=n.created||function(){}),new Vue({el:"#main_con",data:function(){return n.data},computed:n.computed,watch:n.watch,methods:n.methods,mounted:function(){window.$vue=this,n.mounted.call(this)},created:function(){window.$vue=this,function(){var t=document.querySelectorAll("el-form-item"),n=["string","number","boolean","method","regexp","integer","float","array","object","enum","date","url","hex","email"];typeMap=["字符串","数字","布尔","method","正则","integer","浮点数","数组","对象","enum","日期","url地址","哈希","电子邮件"];for(var r=0;r<t.length;r++){var i=[],o="";if(e(t[r].getAttribute("required"))){var u=["blur"];e(t[r].getAttribute("change"))&&u.push("change"),i.push({required:"true",message:"请输入"+t[r].getAttribute("label"),trigger:u}),t[r].removeAttribute("required"),t[r].removeAttribute("change")}e(t[r].getAttribute("min"))&&(i.push({min:parseInt(t[r].getAttribute("min")),message:"至少输入"+t[r].getAttribute("min")+"个字符",trigger:"blur"}),t[r].removeAttribute("min")),e(t[r].getAttribute("max"))&&(i.push({max:parseInt(t[r].getAttribute("max")),message:"至多输入"+t[r].getAttribute("max")+"个字符",trigger:"blur"}),t[r].removeAttribute("max")),e(t[r].getAttribute("mobile"))&&(o='{ "validator":validatorObj.mobile,"trigger": ["blur", "change"]}',t[r].removeAttribute("mobile")),e(t[r].getAttribute("arrayvalue"))&&(o='{ "validator":validatorObj.arrayvalue,"trigger": ["blur", "change"]}',t[r].removeAttribute("arrayvalue"));for(var c=0;c<n.length;c++)null!=t[r].getAttribute(n[c])&&null!=t[r].getAttribute(n[c])&&"false"!=t[r].getAttribute(n[c])&&i.push({type:n[c],message:"请输入正确的"+typeMap[c]+"格式",trigger:["blur","change"]});var a=t[r].getAttribute(":rules")||"[]",f=JSON.stringify(i).slice(1,-1);function s(t){return t?",":""}var l="["+f+s(f)+o+s(o)+a.slice(1,-1)+"]";l=l.replace(/"/g,"'"),t[r].setAttribute(":rules",l)}}(),this.loadingController=this.loadingController||!1,this.dialogVisible=this.dialogVisible||!1,this.searchKey=this.searchKey||"",this.tableData=this.tableData||[],n.created.call(this)}})},getdata:function(t,r,e,i){if(arguments.length<=3){var o=t;n(o)}else if(4==arguments.length){var o=t;!function(t,r,e,i){n(t)}(o)}}},t.exports=r}():console.error("无法找到$对象"):console.error("无法找到Vue对象")}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYWluVnVlL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9tYWluVnVlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNjYWxlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQub2YuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZi5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovL21haW5WdWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwid2VicGFjazovL21haW5WdWUvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL3NyYy9saWIvYXBwLmpzIiwid2VicGFjazovL21haW5WdWUvLi9zcmMvbGliL0NoYWluLmpzIiwid2VicGFjazovL21haW5WdWUvLi9zcmMvbGliL0hhc2hlci5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vc3JjL2xpYi9TaGFkZS5qcyIsIndlYnBhY2s6Ly9tYWluVnVlLy4vc3JjL2xpYi93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vbWFpblZ1ZS8uL3NyYy9wcm90by9EYXRlLmpzIiwid2VicGFjazovL21haW5WdWUvLi9zcmMvcHJvdG8vU3RyaW5nLmpzIiwid2VicGFjazovL21haW5WdWUvLi9zcmMvbGliL21haW5WdWUuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiYSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwidG9JbnRlZ2VyIiwibWluIiwiZGVmaW5lZCIsImNyZWF0ZURlc2MiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJTdHJpbmciLCJ0aGlzIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIk5BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJsZW5ndGgiLCJJT2JqZWN0IiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwiYiIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9TdHJpbmciLCJzbGljZSIsIm1ldGhvZCIsImFyZyIsInZhbHVlT2YiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsIktFWSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImRhdGEiLCJ2Iiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiY29uY2F0IiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJrZXlNZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsIk1FVEEiLCJzZXREZXNjIiwiaWQiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiVU5TQ09QQUJMRVMiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJtYXgiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsImRvY3VtZW50Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiZGVmIiwic3RhdCIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJfdCIsImNvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsImNvcHlyaWdodCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpc0FycmF5IiwiTUFUQ0giLCJpc1JlZ0V4cCIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJhcnIiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIlNZTUJPTCIsImZucyIsInN0cmZuIiwicnhmbiIsIkQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiSyIsIl9fZGVmaW5lU2V0dGVyX18iLCJDT0xMRUNUSU9OIiwiQSIsImNiIiwibWFwRm4iLCJuZXh0SXRlbSIsImlzIiwiY3JlYXRlRWxlbWVudCIsIndrc0V4dCIsIiRTeW1ib2wiLCJjaGFyQXQiLCJkb2N1bWVudEVsZW1lbnQiLCJjaGVjayIsInNldFByb3RvdHlwZU9mIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJjb3VudCIsInN0ciIsIkluZmluaXR5Iiwic2lnbiIsIngiLCIkZXhwbTEiLCJleHBtMSIsIlRPX1NUUklORyIsInBvcyIsImNoYXJDb2RlQXQiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImRlc2NyaXB0b3IiLCJzZWFyY2hTdHJpbmciLCJyZSIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwib3JpZ2luYWwiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImludm9rZSIsImh0bWwiLCJjZWwiLCJwcm9jZXNzIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJhcmdzIiwibmV4dFRpY2siLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJQcm9taXNlIiwiaXNOb2RlIiwiaGVhZCIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsInN0YW5kYWxvbmUiLCJyZXNvbHZlIiwicHJvbWlzZSIsInRoZW4iLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInRhc2siLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlamVjdCIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwibG9nIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsImciLCJldmFsIiwibmFtZXMiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImFzc2lnbiIsImsiLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwiZmFjdG9yaWVzIiwicGFydEFyZ3MiLCJib3VuZCIsImNvbnN0cnVjdCIsInVuIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCIkdHJpbSIsIndzIiwiaGV4IiwicmFkaXgiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJtc2ciLCJpc0Zpbml0ZSIsImxvZzFwIiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJyZXQiLCJtZW1vIiwiaXNSaWdodCIsInRvIiwiaW5jIiwiZmxhZ3MiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5Iiwic3Ryb25nIiwiZW50cnkiLCJnZXRFbnRyeSIsIiRpdGVyRGVmaW5lIiwiU0laRSIsIl9mIiwiX2wiLCJkZWxldGUiLCJwcmV2IiwiYWRkIiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJ1ZnN0b3JlIiwidG1wIiwiJFdlYWtNYXAiLCJmcmVlemUiLCIkaGFzIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsIm51bWJlciIsIlJlZmxlY3QiLCJvd25LZXlzIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudCIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwicmVwZWF0IiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImxlZnQiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsImlzRW50cmllcyIsInNjYWxlIiwiaW5Mb3ciLCJpbkhpZ2giLCJvdXRMb3ciLCJvdXRIaWdoIiwiX2JhYmVsUG9seWZpbGwiLCJFcnJvciIsIkRFRklORV9QUk9QRVJUWSIsInBhZFN0YXJ0IiwicGFkRW5kIiwiJGZhaWxzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic3ltYm9scyIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJ5IiwiRlByb3RvIiwibmFtZVJFIiwibWF0Y2giLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiY29kZSIsImRpZ2l0cyIsImFOdW1iZXJWYWx1ZSIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwiYWNjIiwiZnJhY3Rpb25EaWdpdHMiLCJ6IiwieDIiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIk51bWJlciIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCIkaW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsImxvZzEwIiwiTE9HMTBFIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCJmcm9tQ2hhckNvZGUiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJyYXciLCJjYWxsU2l0ZSIsInRwbCIsIiRhdCIsInBvaW50IiwiY29kZVBvaW50QXQiLCJjb250ZXh0IiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsIiRzdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsImNvbG9yIiwic2l6ZSIsInVybCIsIkRhdGUiLCJnZXRUaW1lIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCJmb3JjZWQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwicmUxIiwicmUyIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiJG1hdGNoIiwicmVnZXhwIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwiU1BMSVQiLCIkc3BsaXQiLCJfc3BsaXQiLCIkcHVzaCIsIk5QQ0ciLCJsaW1pdCIsInNlcGFyYXRvcjIiLCJsYXN0SW5kZXgiLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5IiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImVtcHR5IiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwiY29uc29sZSIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiZXJyb3IiLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJlcnIiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXRjaCIsImNhcGFiaWxpdHkiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIiRpc1ZpZXciLCJpc1ZpZXciLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwiaW5pdCIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJMIiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5IiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwicmVjZWl2ZXIiLCJnZXRQcm90byIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwic2V0UHJvdG8iLCIkaW5jbHVkZXMiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0TWFwIiwiZmxhdHRlbiIsImRlcHRoQXJnIiwiYXQiLCIkcGFkIiwiZ2V0RmxhZ3MiLCJSZWdFeHBQcm90byIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIl9yIiwibWF0Y2hBbGwiLCJyeCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsImlzRXJyb3IiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJERUdfUEVSX1JBRCIsIlBJIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsImZzY2FsZSIsImlhZGRoIiwieDAiLCJ4MSIsInkwIiwieTEiLCIkeDAiLCIkeTAiLCJpc3ViaCIsImltdWxoIiwidSIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsInVtdWxoIiwic2lnbmJpdCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0cnkiLCJtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsImRlbGV0ZU1ldGFkYXRhIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJTZXQiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib0tleXMiLCJwS2V5cyIsImdldE1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlIYXNNZXRhZGF0YSIsImhhc01ldGFkYXRhIiwiaGFzT3duTWV0YWRhdGEiLCIkbWV0YWRhdGEiLCJhc2FwIiwiT0JTRVJWQUJMRSIsImNsZWFudXBTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJjbGVhbnVwIiwic3Vic2NyaXB0aW9uQ2xvc2VkIiwiX28iLCJjbG9zZVN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsIm9ic2VydmVyIiwic3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbk9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCJjb21wbGV0ZSIsIiRPYnNlcnZhYmxlIiwic3Vic2NyaWJlIiwib2JzZXJ2YWJsZSIsIml0ZW1zIiwiT2JzZXJ2YWJsZSIsIk1TSUUiLCJ0aW1lIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCIkdGFzayIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImluTW9kdWxlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInBvcCIsIkNvbnRleHQiLCJyZXNldCIsInNraXBUZW1wUmVzZXQiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJzdGF0ZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJvYmoiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInJldHVybiIsImluZm8iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJlc2NhcGUiLCIkcmUiLCJyZWdFeHAiLCJwYXJ0IiwibWFpblZ1ZSIsIm93bmVyIiwiZ2V0U3RvcmFnZSIsInBhcnNlIiwidW5lc2NhcGUiLCJzZXRTdG9yYWdlIiwiaXRlbSIsIklzTnVsbE9yRW1wdHkiLCJpbkF0dHIiLCJlbnB0eV9vYmoiLCJJc051bWJlciIsImNsb25lIiwiY29weSIsInNldFRpbWUiLCJhdHRyIiwiYXJyQnVpbGRUcmVlIiwidGFyZ2V0QXJyIiwicGFyZW50S2V5V29yZCIsInNlbGZLZXlXb3JkIiwiYXJyX3RyZWUiLCJjaGlsZHJlbiIsInRyZWVCcmVha0FyciIsInRhcmdldFRyZWUiLCJjaGlsZEtleSIsImRlZXAiLCJkZWVwTG9vcCIsInRyZWUiLCJsZXZlbCIsImFycmF5IiwiZ2V0U2VhcmNoIiwiaGFzaCIsImxvY2F0aW9uIiwiaGFzaE9iaiIsInRvU2VhcmNoIiwiZmxhZyIsInNldEhhc2giLCJjYWxsYmFjayIsIiQiLCJoYXNoU3RyIiwidGtleSIsImhyZWYiLCJnZXRIYXNoIiwiZ2V0TG9jYWwiLCJzZXRMb2NhbCIsImdldFNlc3Npb24iLCJzZXRTZXNzaW9uIiwic2V0UmFuZG9tSWQiLCJyZWYiLCIkcmVmcyIsInJhbmRvbUlkIiwic2V0QXR0cmlidXRlIiwic29ydG9yZGVyIiwiR2V0R3VpZCIsImd1aWQiLCJhamF4U2V0dXAiLCIkZ2V0Iiwic3lzVXJsIiwiZ2V0T2JqQnlWYWx1ZSIsIm1hcGtleSIsIm1hcHZhbHVlIiwiYXJyTWFwIiwidGltZVRvRGF0ZSIsImdldFJhbmRvbSIsImdldFRpbWVTdHJtcCIsImZsb2F0VG9QZXJjZW50IiwicmFuZ2UiLCJjYWxjIiwid3hQYXkiLCJlcnJjYWxsYmFjayIsIldlaXhpbkpTQnJpZGdlIiwiYXBwSWQiLCJ0aW1lU3RhbXAiLCJub25jZVN0ciIsInBhY2thZ2UiLCJzaWduVHlwZSIsInBheVNpZ24iLCJlcnJfbXNnIiwiYWxlcnQiLCJkb3dubG9hZGVyIiwicGF0aCIsImVsZUEiLCJpbm5lckhUTUwiLCJib2R5IiwiY2xpY2siLCJlbGVtSUYiLCJmb3JtIiwic3VibWl0IiwiY29uZmlybSIsImltZ1RvQmFzZTY0Iiwib3V0cHV0Rm9ybWF0IiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsImltZyIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJvbmxvYWQiLCJoZWlnaHQiLCJ3aWR0aCIsImRyYXdJbWFnZSIsImRhdGFVUkwiLCJ0b0RhdGFVUkwiLCJpbmhlcml0UHJvdG90eXBlIiwic3ViVHlwZSIsInN1cGVyVHlwZSIsInByb3RvVHlwZSIsImxvYWRTY3JpcHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJBcmFiaWFfdG9fQ2hpbmVzZSIsImZyYWN0aW9uIiwiZGlnaXQiLCJ1bml0IiwibWl4aW4iLCJDaGFpbiIsImNoYWluX2FyciIsImxpbmsiLCJmdW4iLCJsb29wIiwidGhpc19ub2RlIiwiSGFzaGVyIiwiSW5pdCIsIiRkYXRhIiwiJHdhdGNoIiwid2F0Y2giLCJvYmpEYXRhIiwiaW5pdExpc3RlbmVyIiwiZG9jdW1lbnRNb2RlIiwib25oYXNoY2hhbmdlIiwiY2hhbmdlIiwiaGFzaFdhdGNoZXIiLCJ1cGRhdGVEYXRhIiwidXBkYXRlIiwiZGVsZWQiLCJkZWwiLCJtb3VudGVkIiwibmV3SHJlZiIsImNyZWFyTmV3SHJlZiIsInRvSGFzaCIsIm5ld0hhc2giLCJvbGQiLCJuZXciLCJvbGRWYWwiLCJTaGFkZUJveCIsImFuaW1hdGUiLCJsb2NrIiwiY292ZXIiLCJkZWZTdHlsZSIsInBvc2l0aW9uIiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJ6SW5kZXgiLCJ0cmFuc2l0aW9uIiwib3BhY2l0eSIsImFuaSIsInNob3ciLCJvdmVyZmxvdyIsImFqYXhSZXNDaGVjayIsInNldHRpbmdzIiwic3dpdGNoT2JqIiwidGRhdGEiLCJwZ2xpc3QiLCJ2YWxlcnJvciIsIlNob3dNc2dCb3giLCJsb2dpbi1pbmRleCIsImNvbXBhbnkiLCJ1c2VyIiwic2Vzc2lvblN0b3JhZ2UiLCJ1c2VyaWQiLCJodG1sVXJsIiwianVtcC11cmwiLCJTaG93TXNnIiwiJHZ1ZSIsIiRub3RpZnkiLCJtZXNzYWdlIiwib25DbG9zZSIsIlNob3dDb25maXJtIiwiY2IxIiwiY2IyIiwiJGNvbmZpcm0iLCJjb25maXJtQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvblRleHQiLCJzaG93Q2xvc2UiLCJhY3Rpb24iLCJwYXR0ZXJuIiwiZm10IiwiTSsiLCJnZXRNb250aCIsImQrIiwiZ2V0RGF0ZSIsImgrIiwiZ2V0SG91cnMiLCJIKyIsIm0rIiwiZ2V0TWludXRlcyIsInMrIiwiZ2V0U2Vjb25kcyIsInErIiwiZ2V0TWlsbGlzZWNvbmRzIiwiJDEiLCJnZXRGdWxsWWVhciIsInN1YnN0ciIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCJnZXREYXkiLCJGb3JtYXQiLCJlbmNvZGUiLCJWdWUiLCJBamF4UmVxdWVzdCIsImxvYWRpbmdDb250cm9sbGVyIiwiY19kYXRhIiwiZnp0eXBlIiwiY29udGVudFR5cGUiLCJhamF4IiwiaGVhZGVycyIsInBhZ2V1c2VyIiwic3VjY2VzcyIsImRlY29kZSIsInhociIsInN0YXR1cyIsInJlc3BvbnNlSlNPTiIsIm9wdGlvbiIsImlzRXhpc3QiLCIkYnVzIiwiJHBvc3QiLCJjb21wdXRlZCIsImNyZWF0ZWQiLCJub2RlTGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0eXBlQXJyIiwidHlwZU1hcCIsInJ1bGVzIiwibW9iaWxlVmFsU3RyIiwiZ2V0QXR0cmlidXRlIiwidHJpZ2dlciIsInJlcXVpcmVkIiwicmVtb3ZlQXR0cmlidXRlIiwib2xkUnVsZXMiLCJzbGljZWRSdWxlcyIsImRvdEJ1aWxkZXIiLCJuZXdSdWxlc1N0ciIsImZvcm1WYWxpZGF0ZVRyYW5zIiwiZGlhbG9nVmlzaWJsZSIsInNlYXJjaEtleSIsInRhYmxlRGF0YSIsImdldGRhdGEiLCJhX3VybCIsImExIiwiYjEiLCJjMSIsImQxIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGlCQUFBQyxTQUFBLGlCQUFBQyxPQUNBQSxPQUFBRCxRQUFBRCxJQUNBLG1CQUFBRyxlQUFBQyxJQUNBRCxPQUFBLGFBQUFILEdBQ0EsaUJBQUFDLFFBQ0FBLFFBQUEsUUFBQUQsSUFFQUQsRUFBQSxRQUFBQyxJQVJBLENBU0NLLE9BQUEsV0FDRCxtQkNUQSxJQUFBQyxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxH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LEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLElBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxL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bEIsUUFBQSxHQUNBLElBQUEreUMsRUFBQWwxQyxFQUlBNHlDLEVBR0tzQyxRQUNELE1BQUE3eEMsVUFBQWxCLE9BQUEsQ0FDSixJQUFBK3lDLEVBQUFsMUMsR0FJQSxTQUFBbTFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0ExQyxFQUFBdUMsR0FEQSxDQUlLRCxNQWdHTGg2QyxFQUFBRCxRQUFBcXFDLEVBbFVBdHFDLEdBSEF1NUIsUUFBQU0sTUFBQSxXQUpBTixRQUFBTSxNQUFBIiwiZmlsZSI6InpoX2FwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIm1haW5WdWVcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibWFpblZ1ZVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJtYWluVnVlXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTI1KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuNycgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYgKCFrZXlNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG4gIHZhciBmbnMgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSk7XG4gIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgdmFyIHJ4Zm4gPSBmbnNbMV07XG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKSB7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIHRtcCA9IHt9O1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNzsgfSkpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwidmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG4iLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG4iLCIvLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcbiIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xuICB2YXIgX3NwbGl0ID0gJHNwbGl0O1xuICB2YXIgJHB1c2ggPSBbXS5wdXNoO1xuICB2YXIgJFNQTElUID0gJ3NwbGl0JztcbiAgdmFyIExFTkdUSCA9ICdsZW5ndGgnO1xuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmICghTlBDRykgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgICAgIGlmICghTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSkgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdHRlblxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0dGVuOiBmdW5jdGlvbiBmbGF0dGVuKC8qIGRlcHRoQXJnID0gMSAqLykge1xuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50c1swXTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoQXJnKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdHRlbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWlzLWVycm9yXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0Vycm9yJywge1xuICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KSB7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKHVwcGVyLCBNYXRoLm1heChsb3dlciwgeCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgREVHX1BFUl9SQUQ6IE1hdGguUEkgLyAxODAgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIFJBRF9QRVJfREVHID0gMTgwIC8gTWF0aC5QSTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBkZWdyZWVzOiBmdW5jdGlvbiBkZWdyZWVzKHJhZGlhbnMpIHtcbiAgICByZXR1cm4gcmFkaWFucyAqIFJBRF9QRVJfREVHO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2NhbGUgPSByZXF1aXJlKCcuL19tYXRoLXNjYWxlJyk7XG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBmc2NhbGU6IGZ1bmN0aW9uIGZzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgICByZXR1cm4gZnJvdW5kKHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IFJBRF9QRVJfREVHOiAxODAgLyBNYXRoLlBJIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBERUdfUEVSX1JBRCA9IE1hdGguUEkgLyAxODA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgcmFkaWFuczogZnVuY3Rpb24gcmFkaWFucyhkZWdyZWVzKSB7XG4gICAgcmV0dXJuIGRlZ3JlZXMgKiBERUdfUEVSX1JBRDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNjYWxlOiByZXF1aXJlKCcuL19tYXRoLXNjYWxlJykgfSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+Pj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+Pj4gMTYpO1xuICB9XG59KTtcbiIsIi8vIGh0dHA6Ly9qZmJhc3RpZW4uZ2l0aHViLmlvL3BhcGVycy9NYXRoLnNpZ25iaXQuaHRtbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduYml0OiBmdW5jdGlvbiBzaWduYml0KHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgIT0geCA/IHggOiB4ID09IDAgPyAxIC8geCA9PSBJbmZpbml0eSA6IHggPiAwO1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHsgaGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciAkbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvTWV0YUtleSA9ICRtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9ICRtZXRhZGF0YS5zZXQ7XG5cbiRtZXRhZGF0YS5leHAoeyBtZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSkge1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yd2FsZHJvbi90YzM5LW5vdGVzL2Jsb2IvbWFzdGVyL2VzNi8yMDE0LTA5L3NlcHQtMjUubWQjNTEwLWdsb2JhbGFzYXAtZm9yLWVucXVldWluZy1hLW1pY3JvdGFza1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wcm9jZXNzO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbikge1xuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBPQlNFUlZBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ29ic2VydmFibGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBSRVRVUk4gPSBmb3JPZi5SRVRVUk47XG5cbnZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pO1xufTtcblxudmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jO1xuICBpZiAoY2xlYW51cCkge1xuICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwKCk7XG4gIH1cbn07XG5cbnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gIH1cbn07XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHN1YnNjcmliZXIpIHtcbiAgYW5PYmplY3Qob2JzZXJ2ZXIpO1xuICB0aGlzLl9jID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vID0gb2JzZXJ2ZXI7XG4gIG9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO1xuICB0cnkge1xuICAgIHZhciBjbGVhbnVwID0gc3Vic2NyaWJlcihvYnNlcnZlcik7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNsZWFudXA7XG4gICAgaWYgKGNsZWFudXAgIT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSBjbGVhbnVwID0gZnVuY3Rpb24gKCkgeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgIGVsc2UgYUZ1bmN0aW9uKGNsZWFudXApO1xuICAgICAgdGhpcy5fYyA9IGNsZWFudXA7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgcmV0dXJuO1xuICB9IGlmIChzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpIGNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkgeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjtcbn07XG5cblN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmIChzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkgdGhyb3cgdmFsdWU7XG4gICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpO1xuICAgICAgaWYgKCFtKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHZhbHVlID0gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTtcbiAgICAgICAgdmFsdWUgPSBtID8gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcikge1xuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpO1xufTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX2YpO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgYUZ1bmN0aW9uKGZuKTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgY29tcGxldGU6IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KSB7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZTtcbiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTtcbiAgICBpZiAobWV0aG9kKSB7XG4gICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFuT2JqZWN0KG1ldGhvZC5jYWxsKHgpKTtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7XG4gICAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm4gUkVUVVJOO1xuICAgICAgICAgICAgfSkgPT09IFJFVFVSTikgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChkb25lKSB0aHJvdyBlO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9LFxuICBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IG5ldyBBcnJheShsKTsgaSA8IGw7KSBpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdO1xuICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW1zLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2pdKTtcbiAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9XG59KTtcblxuaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZSB9KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnT2JzZXJ2YWJsZScpO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG4iLCJyZXF1aXJlKCdAL2xpYi9hcHAnKVxyXG5yZXF1aXJlKCdAL2xpYi9DaGFpbicpXHJcbnJlcXVpcmUoJ0AvbGliL0hhc2hlcicpXHJcbnJlcXVpcmUoJ0AvbGliL1NoYWRlJylcclxucmVxdWlyZSgnQC9saWIvd2luZG93JylcclxuXHJcbnJlcXVpcmUoJ0AvcHJvdG8vRGF0ZScpXHJcbnJlcXVpcmUoJ0AvcHJvdG8vU3RyaW5nJylcclxuXHJcbnZhciBtYWluVnVlID0gcmVxdWlyZSgnQC9saWIvbWFpblZ1ZScpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG1haW5WdWVcclxuIiwiKGZ1bmN0aW9uKG93bmVyKSB7XHJcbiAgICAvL+mqjOivgeaYr+WQpuS4uuepulxyXG4gICAgb3duZXIuSXNOdWxsT3JFbXB0eSA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICBpZiAodmFsICE9IHVuZGVmaW5lZCAmJiB2YWwgIT0gbnVsbCAmJiB2YWwgIT0gXCJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIG93bmVyLmluQXR0ciA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgIFx0aWYgKHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09ICd0cnVlJyB8fCB2YWwgPT09ICcnKSB7XHJcbiAgICBcdFx0cmV0dXJuIHRydWU7XHJcbiAgICBcdH0gZWxzZSB7XHJcbiAgICBcdFx0cmV0dXJuIGZhbHNlO1xyXG4gICAgXHR9XHJcbiAgICB9XHJcblxyXG4gICAgLy/muIXnqbrlr7nosaHlhoXlrrlcclxuICAgIG93bmVyLmVucHR5X29iaiA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIFx0T2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgXHRcdG9ialtrZXldID0gbnVsbDtcclxuICAgIFx0fSlcclxuICAgIFx0cmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICAvL+mqjOivgeaYr+WQpuS4uuaVsOWtl1xyXG4gICAgb3duZXIuSXNOdW1iZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIFx0aWYgKGlzTmFOKHZhbHVlKSkge1xyXG4gICAgXHRcdHJldHVybiAwO1xyXG4gICAgXHR9XHJcbiAgICBcdHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvL+Wvueixoea3seaLt+i0nVxyXG4gICAgb3duZXIuY2xvbmUgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICBcdC8vIEhhbmRsZSB0aGUgMyBzaW1wbGUgdHlwZXMsIGFuZCBudWxsIG9yIHVuZGVmaW5lZFxyXG4gICAgXHRpZiAobnVsbCA9PSBvYmogfHwgXCJvYmplY3RcIiAhPSB0eXBlb2Ygb2JqKSByZXR1cm4gb2JqO1xyXG5cclxuICAgIFx0Ly8gSGFuZGxlIERhdGVcclxuICAgIFx0aWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgIFx0XHR2YXIgY29weSA9IG5ldyBEYXRlKCk7XHJcbiAgICBcdFx0Y29weS5zZXRUaW1lKG9iai5nZXRUaW1lKCkpO1xyXG4gICAgXHRcdHJldHVybiBjb3B5O1xyXG4gICAgXHR9XHJcblxyXG4gICAgXHQvLyBIYW5kbGUgQXJyYXlcclxuICAgIFx0aWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICBcdFx0dmFyIGNvcHkgPSBbXTtcclxuICAgIFx0XHRmb3IgKHZhciBpID0gMCwgbGVuID0gb2JqLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICBcdFx0XHRjb3B5W2ldID0gY2xvbmUob2JqW2ldKTtcclxuICAgIFx0XHR9XHJcbiAgICBcdFx0cmV0dXJuIGNvcHk7XHJcbiAgICBcdH1cclxuXHJcbiAgICBcdC8vIEhhbmRsZSBPYmplY3RcclxuICAgIFx0aWYgKG9iaiBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgXHRcdHZhciBjb3B5ID0ge307XHJcbiAgICBcdFx0Zm9yICh2YXIgYXR0ciBpbiBvYmopIHtcclxuICAgIFx0XHRcdGlmIChvYmouaGFzT3duUHJvcGVydHkoYXR0cikpIGNvcHlbYXR0cl0gPSBjbG9uZShvYmpbYXR0cl0pO1xyXG4gICAgXHRcdH1cclxuICAgIFx0XHRyZXR1cm4gY29weTtcclxuICAgIFx0fVxyXG5cclxuICAgIFx0dGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNvcHkgb2JqISBJdHMgdHlwZSBpc24ndCBzdXBwb3J0ZWQuXCIpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKlxyXG4gICAg5pWw57uE5ou85qCRXHJcbiAgICB0YXJnZXRBcnLnm67moIfmlbDnu4RcclxuICAgIHBhcmVudEtleVdvcmTniLbnuqflhbPplK7lrZdcclxuICAgIHNlbGZLZXlXb3Jk6Ieq6Lqr5YWz6ZSu5a2XXHJcbiAgICAqL1xyXG4gICAgb3duZXIuYXJyQnVpbGRUcmVlID0gZnVuY3Rpb24gKHRhcmdldEFyciwgcGFyZW50S2V5V29yZCwgc2VsZktleVdvcmQpIHtcclxuICAgIFx0dmFyIGFycl90cmVlID0gW107XHJcblxyXG4gICAgXHR0YXJnZXRBcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdGl0ZW0uY2hpbGRyZW4gPSBbXTtcclxuICAgIFx0fSlcclxuICAgIFx0dGFyZ2V0QXJyLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIFx0XHRpZiAoIShpdGVtW3BhcmVudEtleVdvcmRdID09PSAwIHx8IGl0ZW1bcGFyZW50S2V5V29yZF0gPT09ICcwJykpIHtcclxuICAgIFx0XHRcdHZhciB0aGF0ID0gaXRlbTtcclxuICAgIFx0XHRcdHRhcmdldEFyci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICBcdFx0XHRcdGlmIChpdGVtW3NlbGZLZXlXb3JkXSA9PSB0aGF0W3BhcmVudEtleVdvcmRdKSB7XHJcbiAgICBcdFx0XHRcdFx0aXRlbS5jaGlsZHJlbi5wdXNoKHRoYXQpO1xyXG4gICAgXHRcdFx0XHR9XHJcbiAgICBcdFx0XHR9KVxyXG4gICAgXHRcdH0gZWxzZSB7XHJcbiAgICBcdFx0XHRhcnJfdHJlZS5wdXNoKGl0ZW0pO1xyXG4gICAgXHRcdH1cclxuICAgIFx0fSk7XHJcbiAgICBcdC8q5riF6ZmkY2hpbGRyZW7kuLrnqbrnmoTpobkqL1xyXG4gICAgXHR0YXJnZXRBcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdGlmIChpdGVtLmNoaWxkcmVuLmxlbmd0aCA9PSAwKSB7XHJcbiAgICBcdFx0XHRkZWxldGUgaXRlbS5jaGlsZHJlblxyXG4gICAgXHRcdH1cclxuICAgIFx0fSlcclxuICAgIFx0cmV0dXJuIGFycl90cmVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qCR57uT5p6E5ouG5pWw57uEXHJcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R8YXJyYXl9IHRhcmdldFRyZWUg5qCR5b2i57uT5p6E5a+56LGh5oiW5pWw57uEXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNoaWxkS2V5ICAg5a2Q6aG557Si5byVa2V5XHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgICAg6L+U5Zue55qE5a+56LGh77yMYXJyYXnkuLrmi4bliIblkI7nmoTmlbDnu4TvvIxkZXB0aOS4uuagkeeahOa3seW6plxyXG4gICAgICovXHJcbiAgICBvd25lci50cmVlQnJlYWtBcnIgPSBmdW5jdGlvbiAodGFyZ2V0VHJlZSwgY2hpbGRLZXkpIHtcclxuICAgIFx0dmFyIGFyciA9IFtdLFxyXG4gICAgXHRcdGRlZXAgPSAwLFxyXG4gICAgXHRcdGNoaWxkS2V5ID0gY2hpbGRLZXkgfHwgJ2NoaWxkcmVuJztcclxuXHJcbiAgICBcdGZ1bmN0aW9uIGRlZXBMb29wKHRyZWUsIGxldmVsKSB7XHJcbiAgICBcdFx0dmFyIGRlcHRoID0gbGV2ZWwgKyAxO1xyXG4gICAgXHRcdGRlZXAgPSAoZGVlcCA+IGxldmVsKSA/IGRlZXAgOiBsZXZlbDtcclxuICAgIFx0XHR0cmVlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIFx0XHRcdGFyci5wdXNoKGl0ZW0pO1xyXG4gICAgXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoaXRlbVtjaGlsZEtleV0pICYmIGl0ZW1bY2hpbGRLZXldLmxlbmd0aCA+IDApIHtcclxuICAgIFx0XHRcdFx0ZGVlcExvb3AoaXRlbVtjaGlsZEtleV0sIGRlcHRoKTtcclxuICAgIFx0XHRcdH1cclxuICAgIFx0XHR9KVxyXG4gICAgXHR9O1xyXG5cclxuICAgIFx0aWYgKHR5cGVvZiB0YXJnZXRUcmVlID09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodGFyZ2V0VHJlZSkpIHtcclxuICAgIFx0XHRkZWVwTG9vcCh0YXJnZXRUcmVlLCAxKTtcclxuICAgIFx0fSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0VHJlZSA9PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh0YXJnZXRUcmVlKSkge1xyXG4gICAgXHRcdHZhciBhID0gW107XHJcbiAgICBcdFx0YS5wdXNoKHRhcmdldFRyZWUpO1xyXG4gICAgXHRcdGRlZXBMb29wKGEsIDEpO1xyXG4gICAgXHR9O1xyXG5cclxuICAgIFx0cmV0dXJuIHtcclxuICAgIFx0XHRhcnJheTogYXJyLFxyXG4gICAgXHRcdGRlcHRoOiBkZWVwXHJcbiAgICBcdH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqKioqXHJcbiAgICDmjqXmlLblnLDlnYDmoI/lj4LmlbBcclxuICAgIGtleTrlj4LmlbDlkI3np7BcclxuICAgICoqKioqKioqKiovXHJcbiAgICBvd25lci5nZXRTZWFyY2ggPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICBcdHZhciBoYXNoID0gW107XHJcbiAgICBcdHRyeSB7XHJcbiAgICBcdFx0aGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3BsaXQoJz8nKVsxXS5zcGxpdChcIiZcIik7XHJcbiAgICBcdH0gY2F0Y2ggKGUpIHt9XHJcbiAgICBcdHZhciBoYXNoT2JqID0ge307XHJcbiAgICBcdGhhc2guZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdGhhc2hPYmpbaXRlbS5zcGxpdChcIj1cIilbMF1dID0gaXRlbS5zcGxpdChcIj1cIilbMV07XHJcbiAgICBcdH0pO1xyXG4gICAgXHRpZiAoISFrZXkpXHJcbiAgICBcdFx0cmV0dXJuIC8ldS8udGVzdChoYXNoT2JqW2tleV0pID8gdW5lc2NhcGUoaGFzaE9ialtrZXldKSA6IGhhc2hPYmpba2V5XTtcclxuICAgIFx0ZWxzZVxyXG4gICAgXHRcdHJldHVybiBoYXNoT2JqO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bCG5a+56LGh6L2s5YyW5oiQc2VhcmNo5a2X56ym5LiyXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiAg5a+56LGh5oiW5pWw57uEXHJcbiAgICAgKiBAcGFyYW0gIHtib29sZWFufSBmbGFnIOaYr+WQpuaQuuW4pic/J1xyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSAgICAgIOi/lOWbnueahOagvOW8j+WMluWQjuWtl+espuS4slxyXG4gICAgICovXHJcbiAgICBvd25lci50b1NlYXJjaCA9IGZ1bmN0aW9uIChvYmosIGZsYWcpIHtcclxuICAgIFx0dmFyIHJlcyA9ICc/J1xyXG4gICAgXHRpZiAodHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KG9iaikpIHtcclxuICAgIFx0XHRvYmouZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuICAgIFx0XHRcdHJlcyArPSAoJ1snICsgaW5kZXggKyAnXT0nICsgb3duZXIudG9TZWFyY2goaXRlbSwgdHJ1ZSkgKyAnJicpO1xyXG4gICAgXHRcdH0pO1xyXG4gICAgXHR9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcpIHtcclxuICAgIFx0XHRPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgXHRcdFx0aWYgKHR5cGVvZiBvYmpba2V5XSA9PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KG9ialtrZXldKSkge1xyXG4gICAgXHRcdFx0XHRvYmpba2V5XS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgXHRcdFx0XHRcdHJlcyArPSAoa2V5ICsgJ1snICsgaW5kZXggKyAnXT0nICsgb3duZXIudG9TZWFyY2goaXRlbSwgdHJ1ZSkgKyAnJicpXHJcbiAgICBcdFx0XHRcdH0pO1xyXG4gICAgXHRcdFx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ29iamVjdCcgJiYgb2JqW2tleV0gIT0gbnVsbCkge1xyXG4gICAgXHRcdFx0XHRyZXMgKz0gKG93bmVyLnRvU2VhcmNoKG9ialtrZXldLCB0cnVlKSArICcmJyk7XHJcbiAgICBcdFx0XHR9IGVsc2Uge1xyXG4gICAgXHRcdFx0XHR2YXIgaXRlbSA9IC9bXFx1MzIyMC1cXHVGQTI5XS8udGVzdChvYmpba2V5XSkgPyBlc2NhcGUob2JqW2tleV0pIDogb2JqW2tleV07XHJcbiAgICBcdFx0XHRcdHJlcyArPSAoa2V5ICsgJz0nICsgKGl0ZW0gfHwgJycpICsgJyYnKTtcclxuICAgIFx0XHRcdH1cclxuXHJcbiAgICBcdFx0fSk7XHJcbiAgICBcdH0gZWxzZSB7XHJcbiAgICBcdFx0cmV0dXJuIG9iajtcclxuICAgIFx0fVxyXG4gICAgXHRyZXR1cm4gISFmbGFnID8gcmVzLnNsaWNlKDEsIC0xKSA6IHJlcy5zbGljZSgwLCAtMSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog55Sf5oiQaGFzaOWAvOW5tuaUvue9ruWmgndpbmRvdy5sb2NhdGlvbi5ocmVmXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAga2V5ICAgICAg6ZSuXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgdmFsdWUgICAg5YC8XHJcbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sg5Zue6LCD5Ye95pWwXHJcbiAgICAgKiBAcmV0dXJuIHtudWxsfSAgICAgICAgICAgIOi/lOWbnuWAvFxyXG4gICAgICovXHJcbiAgICBvd25lci5zZXRIYXNoID0gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgXHR2YXIgaGFzaCA9IFtdO1xyXG4gICAgXHR0cnkge1xyXG4gICAgXHRcdGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zcGxpdCgnIycpWzFdLnNwbGl0KFwiJlwiKTtcclxuICAgIFx0fSBjYXRjaCAoZSkge31cclxuICAgIFx0dmFyIGhhc2hPYmogPSB7fTtcclxuICAgIFx0JChoYXNoKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgIFx0XHRoYXNoT2JqW3RoaXMuc3BsaXQoXCI9XCIpWzBdXSA9IHRoaXMuc3BsaXQoXCI9XCIpWzFdO1xyXG4gICAgXHR9KTtcclxuXHJcbiAgICBcdGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xyXG4gICAgXHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XHJcblxyXG4gICAgXHRcdGhhc2hPYmpba2V5XSA9IHZhbHVlO1xyXG5cclxuICAgIFx0fSBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xyXG4gICAgXHRcdGNhbGxiYWNrID0gdmFsdWUgfHwgZnVuY3Rpb24gKCkge307XHJcbiAgICBcdFx0T2JqZWN0LmtleXMoa2V5KS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICBcdFx0XHRoYXNoT2JqW2l0ZW1dID0ga2V5W2l0ZW1dXHJcbiAgICBcdFx0fSlcclxuICAgIFx0fVxyXG5cclxuICAgIFx0dmFyIGhhc2hTdHIgPSAnIyc7XHJcbiAgICBcdGZvciAodGtleSBpbiBoYXNoT2JqKSB7XHJcbiAgICBcdFx0aGFzaFN0ciArPSAodGtleSArICc9JyArIGhhc2hPYmpbdGtleV0gKyAnJicpO1xyXG4gICAgXHR9O1xyXG4gICAgXHRpZiAoISF3aW5kb3cubG9jYXRpb24uaGFzaCkge1xyXG4gICAgXHRcdHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhhc2gsIGhhc2hTdHIuc2xpY2UoMCwgLTEpKSk7XHJcbiAgICBcdH0gZWxzZSB7XHJcbiAgICBcdFx0d2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYgKyBoYXNoU3RyLnNsaWNlKDAsIC0xKSlcclxuICAgIFx0fVxyXG5cclxuICAgIFx0Y2FsbGJhY2soKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5Z3aW5kb3cubG9jYXRpb24uaGFzaOS4reeJueWumuWAvFxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBrZXkg5b6F6I635Y+W55qEa2V5XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICDojrflj5bliLDnmoTlgLxcclxuICAgICAqL1xyXG4gICAgb3duZXIuZ2V0SGFzaCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIFx0dmFyIGhhc2ggPSBbXTtcclxuICAgIFx0dHJ5IHtcclxuICAgIFx0XHRoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3BsaXQoJyMnKVsxXS5zcGxpdChcIiZcIik7XHJcbiAgICBcdH0gY2F0Y2ggKGUpIHt9XHJcbiAgICBcdHZhciBoYXNoT2JqID0ge307XHJcbiAgICBcdGhhc2guZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdGhhc2hPYmpbaXRlbS5zcGxpdChcIj1cIilbMF1dID0gaXRlbS5zcGxpdChcIj1cIilbMV07XHJcbiAgICBcdH0pO1xyXG4gICAgXHRpZiAoISFrZXkpXHJcbiAgICBcdFx0cmV0dXJuIGhhc2hPYmpba2V5XTtcclxuICAgIFx0ZWxzZVxyXG4gICAgXHRcdHJldHVybiBoYXNoT2JqO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572uc3RvcmFnZeWfuuaWueazlVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSB0eXBlIHNlc3Npb25TdG9yYWdl5oiWbG9jYWxTdG9yYWdlXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGtleSAg6KaB5Y+W55qEa2V5XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8T2JqZWN0fSAgICAgIOWvueW6lOWtmOWCqOeahOaVsOaNrlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRTdG9yYWdlKHR5cGUsIGtleSkge1xyXG4gICAgXHR2YXIgcmVzID0gISFrZXkgP1xyXG4gICAgXHRcdHdpbmRvd1t0eXBlXVtrZXldID9cclxuICAgIFx0XHQoKC97fH18JTdCfCU3RHxcXFt8XFxdfCU1QnwlNUQvLnRlc3Qod2luZG93W3R5cGVdW2tleV0pID9cclxuICAgIFx0XHRcdEpTT04ucGFyc2UodW5lc2NhcGUod2luZG93W3R5cGVdW2tleV0pKSA6XHJcbiAgICBcdFx0XHR1bmVzY2FwZSh3aW5kb3dbdHlwZV1ba2V5XSkpKSA6IHVuZGVmaW5lZCA6XHJcbiAgICBcdFx0d2luZG93W3R5cGVdO1xyXG4gICAgXHRyZXR1cm4gcmVzIHx8IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5ZzdG9yYWdl5Z+65pa55rOVXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAgc2Vzc2lvblN0b3JhZ2XmiJZsb2NhbFN0b3JhZ2VcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0ga2V5ICAg6KaB6K6+572u55qEa2V55oiW5pW05Liq5a+56LGhXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWUg5bey6K6+572u55qE57uT5p6cXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHNldFN0b3JhZ2UodHlwZSwga2V5LCB2YWx1ZSkge1xyXG4gICAgXHRpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcclxuICAgIFx0XHR3aW5kb3dbdHlwZV1ba2V5XSA9ICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSA/IGVzY2FwZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpIDogZXNjYXBlKHZhbHVlKTtcclxuICAgIFx0fSBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xyXG4gICAgXHRcdE9iamVjdC5rZXlzKGtleSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdFx0d2luZG93W3R5cGVdW2l0ZW1dID0gKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gZXNjYXBlKEpTT04uc3RyaW5naWZ5KGtleVtpdGVtXSkpIDogZXNjYXBlKGtleVtpdGVtXSk7XHJcbiAgICBcdFx0fSk7XHJcbiAgICBcdH07XHJcbiAgICBcdHJldHVybiB3aW5kb3dbdHlwZV07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5Zsb2NhbFN0b3JhZ2Xph4znmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30ga2V5IOW+heiOt+WPlueahGtleVxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfE9iamVjdH0g5Y+W5Zue55qE5YC8XHJcbiAgICAgKi9cclxuICAgIG93bmVyLmdldExvY2FsID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgXHRyZXR1cm4gZ2V0U3RvcmFnZSgnbG9jYWxTdG9yYWdlJywga2V5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWwhuWAvOWtmOWFpWxvY2FsU3RvcmFnZVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfE9iamVjdH0ga2V5ICAg5b6F5a2Y5YC855qEa2V55oiWanNvbuWvueixoVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfG9iamVjdH0gdmFsdWUg5b6F5a2Y5YC855qEdmFsdWVcclxuICAgICAqIEByZXR1cm4ge29iamVjdH0gICAgICAg5a2Y5YWl5ZCObG9jYWxTdG9yYWdl5a+56LGhXHJcbiAgICAgKi9cclxuICAgIG93bmVyLnNldExvY2FsID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgIFx0cmV0dXJuIHNldFN0b3JhZ2UoJ2xvY2FsU3RvcmFnZScsIGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+Wc2Vzc2lvblN0b3JhZ2Xph4znmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30ga2V5IOW+heiOt+WPlueahGtleVxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfE9iamVjdH0g5Y+W5Zue55qE5YC8XHJcbiAgICAgKi9cclxuICAgIG93bmVyLmdldFNlc3Npb24gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICBcdHJldHVybiBnZXRTdG9yYWdlKCdzZXNzaW9uU3RvcmFnZScsIGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlsIblgLzlrZjlhaVzZXNzaW9uU3RvcmFnZVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfE9iamVjdH0ga2V5ICAg5b6F5a2Y5YC855qEa2V55oiWanNvbuWvueixoVxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfG9iamVjdH0gdmFsdWUg5b6F5a2Y5YC855qEdmFsdWVcclxuICAgICAqIEByZXR1cm4ge29iamVjdH0gICAgICAg5a2Y5YWl5ZCOc2Vzc2lvblN0b3JhZ2Xlr7nosaFcclxuICAgICAqL1xyXG4gICAgb3duZXIuc2V0U2Vzc2lvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICBcdHJldHVybiBzZXRTdG9yYWdlKCdzZXNzaW9uU3RvcmFnZScsIGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zyo55uu5qCHcmVm5LiK55Sf5oiQ5LiA5Liq6ZqP5py6aWRcclxuICAgICAqIEBwYXJhbSAge29ian0gcmVmIHZ1ZeeahOS4gOS4qnJlZuWunuS+i1xyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSAgICAg55Sf5oiQ55qE6ZqP5py6aWRcclxuICAgICAqL1xyXG4gICAgb3duZXIuc2V0UmFuZG9tSWQgPSBmdW5jdGlvbiAocmVmKSB7XHJcbiAgICBcdHZhciB0YXJnZXQgPSB0aGlzLiRyZWZzW3JlZl0sXHJcbiAgICBcdFx0cmFuZG9tID0gKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAgKyAnJykuc2xpY2UoMCwgNSk7XHJcblxyXG4gICAgXHR2YXIgcmFuZG9tSWQgPSByZWYgKyAnLScgKyByYW5kb207XHJcbiAgICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2lkJywgcmFuZG9tSWQpO1xyXG5cclxuICAgIFx0cmV0dXJuIHJhbmRvbUlkO1xyXG4gICAgfVxyXG5cclxuICAgIC8q5qC85byP5YyW5o6S5bqP6aG65bqP5YWz6ZSu5a2XKi9cclxuICAgIG93bmVyLnNvcnRvcmRlciA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIFx0dHJ5IHtcclxuICAgIFx0XHRpZiAoc3RyLmluZGV4T2YoJ2FzYycpID4gLTEpIHtcclxuICAgIFx0XHRcdHJldHVybiAnYXNjJ1xyXG4gICAgXHRcdH0gZWxzZSBpZiAoc3RyLmluZGV4T2YoJ2Rlc2MnKSA+IC0xKSB7XHJcbiAgICBcdFx0XHRyZXR1cm4gJ2Rlc2MnXHJcbiAgICBcdFx0fVxyXG4gICAgXHR9IGNhdGNoIChlKSB7XHJcbiAgICBcdFx0cmV0dXJuIHN0clxyXG4gICAgXHR9XHJcbiAgICB9XHJcblxyXG4gICAgLy/ojrflj5ZmaWxlZ3VpZFxyXG4gICAgb3duZXIuR2V0R3VpZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFx0dmFyIGd1aWQgPSBcIlwiO1xyXG4gICAgXHQkLmFqYXhTZXR1cCh7XHJcbiAgICBcdFx0YXN5bmM6IGZhbHNlXHJcbiAgICBcdH0pO1xyXG4gICAgXHR0aGlzLiRnZXQoc3lzVXJsICsgXCIvc3lzZmlsZS9nZXRndWlkXCIsIHt9LCBmdW5jdGlvbiAoZGF0YSwgcmVzKSB7XHJcbiAgICBcdFx0Z3VpZCA9IGRhdGE7XHJcbiAgICBcdH0pXHJcbiAgICBcdCQuYWpheFNldHVwKHtcclxuICAgIFx0XHRhc3luYzogdHJ1ZVxyXG4gICAgXHR9KTtcclxuICAgIFx0cmV0dXJuIGd1aWQ7XHJcbiAgICB9XHJcblxyXG4gICAgb3duZXIuZ2V0T2JqQnlWYWx1ZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIFx0dmFyIHJlcyA9IG51bGw7XHJcbiAgICBcdHZhciBhcnIgPSBvYmouYXJyLFxyXG4gICAgXHRcdHRhcmdldCA9IG9iai50YXJnZXQsXHJcbiAgICBcdFx0a2V5ID0gb2JqLmtleSB8fCAna2V5JyxcclxuICAgIFx0XHR2YWx1ZSA9IG9iai52YWx1ZSB8fCAndmFsdWUnLFxyXG4gICAgXHRcdG1hcGtleSA9IG9iai5tYXBrZXkgfHwga2V5LFxyXG4gICAgXHRcdG1hcHZhbHVlID0gb2JqLm1hcHZhbHVlIHx8IHZhbHVlLFxyXG4gICAgXHRcdGFkZCA9IG9iai5hZGQgfHwgZmFsc2VcclxuXHJcbiAgICBcdHZhciBhcnJNYXAgPSB7fTtcclxuXHJcbiAgICBcdGlmICh0eXBlb2YgKG9iai50YXJnZXQpID09ICdzdHJpbmcnKSB7XHJcbiAgICBcdFx0YXJyLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIFx0XHRcdGFyck1hcFtlc2NhcGUoaXRlbVt2YWx1ZV0pXSA9IGl0ZW07XHJcbiAgICBcdFx0fSk7XHJcblxyXG4gICAgXHRcdHJlcyA9IHt9O1xyXG4gICAgXHRcdGlmIChhZGQpIHtcclxuICAgIFx0XHRcdHJlcyA9IGNsb25lKGFyck1hcFtlc2NhcGUodGFyZ2V0KV0pO1xyXG4gICAgXHRcdH07XHJcbiAgICBcdFx0cmVzW21hcGtleV0gPSBhcnJNYXBbZXNjYXBlKHRhcmdldCldW2tleV07XHJcbiAgICBcdFx0cmVzW21hcHZhbHVlXSA9IHRhcmdldDtcclxuICAgIFx0fSBlbHNlIGlmICgodHlwZW9mIChvYmoudGFyZ2V0KSA9PSAnb2JqZWN0JykgJiYgQXJyYXkuaXNBcnJheShvYmoudGFyZ2V0KSkge1xyXG4gICAgXHRcdHJlcyA9IFtdO1xyXG4gICAgXHRcdGFyci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICBcdFx0XHRhcnJNYXBbZXNjYXBlKGl0ZW1bdmFsdWVdKV0gPSBpdGVtO1xyXG4gICAgXHRcdH0pO1xyXG5cclxuICAgIFx0XHR0YXJnZXQuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXHRcdFx0cmVzLnB1c2goYXJyTWFwW2VzY2FwZShpdGVtKV0pXHJcbiAgICBcdFx0fSlcclxuICAgIFx0fVxyXG5cclxuICAgIFx0cmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIh+WIhnl5eXktTU0tZGQgaGg6bW06c3PmoLzlvI/nmoTlrZfnrKbkuLLmiJB5eXl5LU1NLWRk5qC85byPXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRpbWUg5pe26Ze05qC85byP5a2X56ym5LiyXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAg5pel5pyf5qC85byP5a2X56ym5LiyXHJcbiAgICAgKi9cclxuICAgIG93bmVyLnRpbWVUb0RhdGUgPSBmdW5jdGlvbiAodGltZSkge1xyXG4gICAgXHRpZiAoLyAvLnRlc3QodGltZSkpIHtcclxuICAgIFx0XHRyZXR1cm4gdGltZS5zcGxpdCgnICcpWzBdO1xyXG4gICAgXHR9IGVsc2Uge1xyXG4gICAgXHRcdHJldHVybiB0aW1lXHJcbiAgICBcdH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUn+aIkOafkOmVv+W6pumaj+acuuaVsOWtl+espuS4slxyXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBsZW5ndGgg6ZqP5py65a2X56ym5Liy6ZW/5bqmXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICDpmo/mnLrmlbDlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgb3duZXIuZ2V0UmFuZG9tID0gZnVuY3Rpb24gKGxlbmd0aCkge1xyXG4gICAgXHR2YXIgcmFuZG9tID0gTWF0aC5yYW5kb20oKSArICcnO1xyXG4gICAgXHRyZXR1cm4gcmFuZG9tLnNsaWNlKDIsIGxlbmd0aCArIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog55Sf5oiQ5b2T5YmN5pe26Ze05oizXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IOeUn+aIkOeahOaXtumXtOaIs1xyXG4gICAgICovXHJcbiAgICBvd25lci5nZXRUaW1lU3RybXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcdHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bCP5pWw6L2s55m+5YiG5pWw5a2X56ym5LiyXHJcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG51bSAgICDlsI/mlbBcclxuICAgICAqIEBwYXJhbSAge251bWJlcn0gbGVuZ3RoIOeUn+aIkOeZvuWIhuavlOeahOWwj+aVsOeCueWQjuS9jeaVsFxyXG4gICAgICogQHBhcmFtICB7Ym9vbGVhbn0gcmFuZ2Ug5piv5ZCm5bCG57uT5p6c6ZmQ5Yi25ZyoMC0xMDAlXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICDnmb7liIbmr5TlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgb3duZXIuZmxvYXRUb1BlcmNlbnQgPSBmdW5jdGlvbiAobnVtLCBsZW5ndGgsIHJhbmdlKSB7XHJcbiAgICBcdHZhciBjYWxjID0gKE51bWJlcihudW0pICogMTAwKTtcclxuICAgIFx0aWYgKGNhbGMgPiAxMDAgJiYgISFyYW5nZSkgY2FsYyA9IDEwMDtcclxuICAgIFx0cmV0dXJuIGNhbGMudG9GaXhlZChsZW5ndGgpICsgJyUnO1xyXG4gICAgfVxyXG5cclxuICAgIG93bmVyLnd4UGF5ID0gZnVuY3Rpb24gKG9iaiwgY2FsbGJhY2ssIGVycmNhbGxiYWNrKSB7XHJcbiAgICBcdC8v6LCD6LW35pSv5LuYXHJcbiAgICBcdFdlaXhpbkpTQnJpZGdlLmludm9rZSgnZ2V0QnJhbmRXQ1BheVJlcXVlc3QnLCB7XHJcbiAgICBcdFx0XCJhcHBJZFwiOiBvYmouYXBwSWQsXHJcbiAgICBcdFx0XCJ0aW1lU3RhbXBcIjogb2JqLnRpbWVTdGFtcCxcclxuICAgIFx0XHRcIm5vbmNlU3RyXCI6IG9iai5ub25jZVN0cixcclxuICAgIFx0XHRcInBhY2thZ2VcIjogb2JqLnBhY2thZ2UsXHJcbiAgICBcdFx0XCJzaWduVHlwZVwiOiBcIk1ENVwiLFxyXG4gICAgXHRcdFwicGF5U2lnblwiOiBvYmoucGF5U2lnblxyXG4gICAgXHR9LCBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICBcdFx0Ly/mlK/ku5jmiJDlip9cclxuICAgIFx0XHRpZiAocmVzLmVycl9tc2cgPT0gXCJnZXRfYnJhbmRfd2NwYXlfcmVxdWVzdDpva1wiKSB7XHJcbiAgICBcdFx0XHRhbGVydChcIuaUr+S7mOaIkOWKn1wiKTtcclxuICAgIFx0XHRcdCEhY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcclxuICAgIFx0XHR9IGVsc2UgaWYgKHJlcy5lcnJfbXNnID09IFwiZ2V0X2JyYW5kX3djcGF5X3JlcXVlc3Q6ZmFpbFwiKSB7XHJcbiAgICBcdFx0XHRhbGVydChcIuaUr+S7mOWksei0pe+8jOivt+mHjeivlVwiKTtcclxuICAgIFx0XHRcdCEhZXJyY2FsbGJhY2sgJiYgZXJyY2FsbGJhY2soKTtcclxuICAgIFx0XHR9IGVsc2UgaWYgKHJlcy5lcnJfbXNnID09IFwiZ2V0X2JyYW5kX3djcGF5X3JlcXVlc3Q6Y2FuY2VsXCIpIHtcclxuICAgIFx0XHRcdGFsZXJ0KFwi55So5oi35Y+W5raI5pSv5LuYXCIpO1xyXG4gICAgXHRcdFx0ISFlcnJjYWxsYmFjayAmJiBlcnJjYWxsYmFjaygpO1xyXG4gICAgXHRcdH0gZWxzZSB7XHJcbiAgICBcdFx0XHRhbGVydChyZXMuZXJyX21zZyk7XHJcbiAgICBcdFx0XHQhIWVycmNhbGxiYWNrICYmIGVycmNhbGxiYWNrKCk7XHJcbiAgICBcdFx0fTtcclxuICAgIFx0fSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuIvovb3lip/og71cclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gcGF0aCDpmYTku7bmnI3liqHlmajlrozmlbTlnLDlnYBcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAg57uT5p6cXHJcbiAgICAgKi9cclxuICAgIG93bmVyLmRvd25sb2FkZXIgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgXHR2YXIgZWxlQSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIFx0aWYgKCdkb3dubG9hZCcgaW4gZWxlQSkge1xyXG4gICAgXHRcdGVsZUEuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIHBhdGgpO1xyXG4gICAgXHRcdGVsZUEuc2V0QXR0cmlidXRlKCdocmVmJywgcGF0aCk7XHJcblxyXG4gICAgXHRcdGVsZUEuaW5uZXJIVE1MID0gJ2Rvd25sb2FkaW5nJztcclxuXHJcbiAgICBcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVBKTtcclxuXHJcbiAgICBcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICBcdFx0XHRlbGVBLmNsaWNrKCk7XHJcbiAgICBcdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZUEpO1xyXG4gICAgXHRcdH0sIDEwMDAgLyAyNCk7XHJcbiAgICBcdFx0cmV0dXJuIHRydWU7XHJcbiAgICBcdH07XHJcblxyXG4gICAgXHR0cnkge1xyXG4gICAgXHRcdHZhciBlbGVtSUYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xyXG4gICAgXHRcdGVsZW1JRi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICBcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtSUYpO1xyXG4gICAgXHRcdGVsZW1JRi5zcmMgPSBwYXRoO1xyXG4gICAgXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtSUYpO1xyXG4gICAgXHRcdH0sIDMzMyk7XHJcbiAgICBcdFx0cmV0dXJuIHRydWU7XHJcbiAgICBcdH0gY2F0Y2ggKGUpIHtcclxuICAgIFx0XHR2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcclxuICAgIFx0XHRmb3JtLnNldEF0dHJpYnV0ZSgnbWV0aG9kJywgJ2dldCcpO1xyXG4gICAgXHRcdGZvcm0uc2V0QXR0cmlidXRlKCdhY3Rpb24nLCBwYXRoKTtcclxuICAgIFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xyXG4gICAgXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgXHRcdFx0Zm9ybS5zdWJtaXQoKTtcclxuICAgIFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZm9ybSk7XHJcbiAgICBcdFx0fSwgMTAwMCAvIDI0KTtcclxuICAgIFx0XHRyZXR1cm4gdHJ1ZTtcclxuICAgIFx0fVxyXG5cclxuICAgIFx0aWYgKCF3aW5kb3cub3Blbih1cmwpKSB7IC8vIHBvcHVwIGJsb2NrZWQsIG9mZmVyIGRpcmVjdCBkb3dubG9hZDpcclxuICAgIFx0XHRpZiAoY29uZmlybShcIuivt+S9v+eUqOWPs+mUri3lj6blrZjkuLrov5vooYzkuIvovb3vvIzlrozmiJDlkI7ngrnlh7vlkI7pgIDov5Tlm57lvZPliY3pobXpnaJcIikpIHtcclxuICAgIFx0XHRcdGxvY2F0aW9uLmhyZWYgPSB1cmw7XHJcbiAgICBcdFx0fVxyXG4gICAgXHR9XHJcbiAgICBcdHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zu+54mH6L2sYmFzZTY057yW56CBXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgdXJsICAgICAgICAgIOaWh+S7tuWtmOWCqOi3r+W+hFxyXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrICAgICDlm57osIPlh73mlbBcclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gICBvdXRwdXRGb3JtYXQg5Zu+54mH57yW56CB57G75Z6LXHJcbiAgICAgKiBAcmV0dXJuIHtudWxsfSAgICAgICAgICAgICAgICDov5Tlm57lgLxcclxuICAgICAqL1xyXG4gICAgb3duZXIuaW1nVG9CYXNlNjQgPSBmdW5jdGlvbiAodXJsLCBjYWxsYmFjaywgb3V0cHV0Rm9ybWF0KSB7XHJcbiAgICBcdHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdDQU5WQVMnKSxcclxuICAgIFx0XHRjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcclxuICAgIFx0XHRpbWcgPSBuZXcgSW1hZ2U7XHJcbiAgICBcdGltZy5jcm9zc09yaWdpbiA9ICdBbm9ueW1vdXMnO1xyXG4gICAgXHRpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXHRcdGNhbnZhcy5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xyXG4gICAgXHRcdGNhbnZhcy53aWR0aCA9IGltZy53aWR0aDtcclxuICAgIFx0XHRjdHguZHJhd0ltYWdlKGltZywgMCwgMCk7XHJcbiAgICBcdFx0dmFyIGRhdGFVUkwgPSBjYW52YXMudG9EYXRhVVJMKG91dHB1dEZvcm1hdCB8fCAnaW1hZ2UvcG5nJyk7XHJcbiAgICBcdFx0Y2FsbGJhY2suY2FsbCh0aGlzLCBkYXRhVVJMKTtcclxuICAgIFx0XHRjYW52YXMgPSBudWxsO1xyXG4gICAgXHR9O1xyXG4gICAgXHRpbWcuc3JjID0gdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y6f5Z6L6ZO+57un5om/XHJcbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gc3ViVHlwZSAgIOWtkOexu1xyXG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259IHN1cGVyVHlwZSDniLbnsbtcclxuICAgICAqIEByZXR1cm4ge251bGx9ICAgICAgICAgICDov5Tlm57lgLxcclxuICAgICAqL1xyXG4gICAgb3duZXIuaW5oZXJpdFByb3RvdHlwZSA9IGZ1bmN0aW9uIChzdWJUeXBlLCBzdXBlclR5cGUpIHtcclxuICAgIFx0dmFyIHByb3RvVHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJUeXBlLnByb3RvdHlwZSk7XHJcbiAgICBcdC8vIE9iamVjdC5jcmVhciA9IGZ1bmN0aW9uKHN1cGVyVHlwZSkge1xyXG4gICAgXHQvLyBcdFx0dmFyIEYgPSBmdW5jdGlvbigpIHt9O1xyXG4gICAgXHQvLyBcdFx0Ri5wcm90b3R5cGUgPSBzdXBlclR5cGU7XHJcbiAgICBcdC8vIFx0XHRyZXR1cm4gbmV3IEYoKTtcclxuICAgIFx0Ly8gfVxyXG4gICAgXHRwcm90b1R5cGUuY29uc3RydWN0b3IgPSBzdWJUeXBlO1xyXG4gICAgXHRzdWJUeXBlLnByb3RvdHlwZSA9IHByb3RvVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW8guatpeWKoOi9vWpzXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHNyYyBqc+aWh+S7tui3r+W+hFxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgIOWKoOi9vee7k+aenFxyXG4gICAgICovXHJcbiAgICBvd25lci5sb2FkU2NyaXB0ID0gZnVuY3Rpb24gKHNyYykge1xyXG4gICAgXHRpZiAoIXNyYykge1xyXG4gICAgXHRcdHRocm93IG5ldyBFcnJvcign6K+35oyH5a6a6KaB5Yqg6L2955qEanPmlofku7bot6/lvoQnKTtcclxuICAgIFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgICBcdH07XHJcbiAgICBcdHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICBcdHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgXHRzLmFzeW5jID0gdHJ1ZTtcclxuICAgIFx0cy5zcmMgPSBzcmM7XHJcbiAgICBcdHZhciB4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xyXG4gICAgXHR4LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHMsIHgpO1xyXG4gICAgXHRyZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaVsOWtl+i9rOS4reaWh+mHkeminVxyXG4gICAgICogQHBhcmFtICB7bnVtYmVyfHN0cmluZ30gbiDmlbDlrZfph5Hpop1cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gICAgIOi9rOaNouWQjueahOS4reaWh+mHkeminVxyXG4gICAgICovXHJcbiAgICBvd25lci5BcmFiaWFfdG9fQ2hpbmVzZSA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgdmFyIGZyYWN0aW9uID0gWyfop5InLCAn5YiGJ107XHJcbiAgICAgICAgdmFyIGRpZ2l0ID0gWyfpm7YnLCAn5aO5JywgJ+i0sCcsICflj4EnLCAn6IKGJywgJ+S8jScsICfpmYYnLCAn5p+SJywgJ+aNjCcsICfnjpYnXTtcclxuICAgICAgICB2YXIgdW5pdCA9IFsgWyflhYMnLCAn5LiHJywgJ+S6vyddLCBbJycsICfmi74nLCAn5L2wJywgJ+S7nyddICBdO1xyXG4gICAgICAgIHZhciBoZWFkID0gbiA8IDAgPyAn5qygJzogJyc7XHJcbiAgICAgICAgbiA9IE1hdGguYWJzKG4pO1xyXG5cclxuICAgICAgICB2YXIgcyA9ICcnO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYWN0aW9uLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcyArPSAoZGlnaXRbTWF0aC5mbG9vcihuICogMTAgKiBNYXRoLnBvdygxMCwgaSkpICUgMTBdICsgZnJhY3Rpb25baV0pLnJlcGxhY2UoL+mbti4vLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHMgPSBzIHx8ICfmlbQnO1xyXG4gICAgICAgIG4gPSBNYXRoLmZsb29yKG4pO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRbMF0ubGVuZ3RoICYmIG4gPiAwOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgcCA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHVuaXRbMV0ubGVuZ3RoICYmIG4gPiAwOyBqKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHAgPSBkaWdpdFtuICUgMTBdICsgdW5pdFsxXVtqXSArIHA7XHJcbiAgICAgICAgICAgICAgICBuID0gTWF0aC5mbG9vcihuIC8gMTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHMgPSBwLnJlcGxhY2UoLyjpm7YuKSrpm7YkLywgJycpLnJlcGxhY2UoL14kLywgJ+mbticpICArIHVuaXRbMF1baV0gKyBzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGVhZCArIHMucmVwbGFjZSgvKOmbti4pKumbtuWFgy8sICflhYMnKS5yZXBsYWNlKC8o6Zu2LikrL2csICfpm7YnKS5yZXBsYWNlKC9e5pW0JC8sICfpm7blhYPmlbQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmBjeWOhuWei+Wvueixoea3t+WFpe+8jOWwhm9iaua3t+WFpXRhcmdldFxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvYmogICAg5b6F5re35YWl55qE5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IHRhcmdldCDmt7flhaXnm67moIflr7nosaFcclxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IHN0YXRlICDmmK/lkKbopobnm5bmt7flhaVcclxuICAgICAqIEByZXR1cm4ge29iamVjdH0gICAgICAgIOa3t+WFpeWQjueahOWvueixoVxyXG4gICAgICovXHJcbiAgICBvd25lci5taXhpbiA9IGZ1bmN0aW9uIChvYmosIHRhcmdldCwgc3RhdGUpIHtcclxuICAgIFx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIFx0XHRpZiAoc3RhdGUpIHtcclxuICAgIFx0XHRcdHRhcmdldFtrZXldID0gb2JqW2tleV07XHJcbiAgICBcdFx0fSBlbHNlIHtcclxuICAgIFx0XHRcdGlmICghdGFyZ2V0W2tleV0pXHJcbiAgICBcdFx0XHRcdHRhcmdldFtrZXldID0gb2JqW2tleV07XHJcbiAgICBcdFx0fVxyXG4gICAgXHR9KTtcclxuICAgIFx0cmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxufSkod2luZG93KVxyXG4iLCIvKipcclxuICog6LSj5Lu76ZO+57G7XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxud2luZG93LkNoYWluID0gZnVuY3Rpb24gKCkge1xyXG5cdHRoaXMuY2hhaW5fYXJyID0gW107XHJcbn1cclxud2luZG93LkNoYWluLnByb3RvdHlwZSA9IHtcclxuXHQvKipcclxuXHQgKiDpk77nmoTlhoXlrrlcclxuXHQgKiBAcGFyYW0gIHtmdW5jdGlvbn0gZnVuIOW+heaJp+ihjOWHveaVsO+8jOWMheWQq+S4pOS4quWPguaVsO+8mumAmueUqOWPguaVsOWPiuaJp+ihjOS4i+S4gOeOr+iKgueahOWHveaVsFxyXG5cdCAqIEByZXR1cm4ge3RoaXN9ICAgICDov5Tlm57oh6rouqvvvIzlj6/pk77lvI/osIPnlKhcclxuXHQgKi9cclxuXHRsaW5rOiBmdW5jdGlvbiAoZnVuKSB7XHJcblx0XHR2YXIgdGhhdCA9IHRoaXM7XHJcblx0XHRpZiAodHlwZW9mIChmdW4pID09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0dGhpcy5jaGFpbl9hcnIucHVzaChmdW4pO1xyXG5cdFx0fTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblx0LyoqXHJcblx0ICog5omn6KGM6LSj5Lu76ZO+XHJcblx0ICogQHBhcmFtICB7T2JqZWN0fSBvYmog6LSj5Lu76ZO+5Lit55qE6YCa55So5Y+C5pWwXHJcblx0ICogQHJldHVybiB7bnVsbH0gICAgIFtkZXNjcmlwdGlvbl1cclxuXHQgKi9cclxuXHRydW46IGZ1bmN0aW9uIChvYmopIHtcclxuXHRcdHZhciB0aGF0ID0gdGhpcyxcclxuXHRcdFx0aW5kZXggPSAwLFxyXG5cdFx0XHRvYmogPSBvYmo7XHJcblxyXG5cdFx0dmFyIGxvb3AgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHZhciB0aGlzX25vZGUgPSB0aGF0LmNoYWluX2FycltpbmRleF07XHJcblx0XHRcdGluZGV4Kys7XHJcblx0XHRcdGlmICghIXRoaXNfbm9kZSkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzX25vZGUob2JqLCBsb29wKVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdGxvb3AoKTtcclxuXHR9XHJcbn07XHJcbiIsIi8qKlxyXG4gKiDlr7zoiKrmoI9oYXNo5YC855uR5ZCs5Y+N6aaI57G7XHJcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqIOiuvue9ruWPguaVsHdhdGNo5a+56LGh5Lit5bqU5YyF5ZCr5b6F55uR5ZCs55qEa2V5XHJcbiAqIEByZXR1cm4ge251bGx9ICAgICDov5Tlm57lgLxcclxuICovXHJcbkhhc2hlciA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHR0aGlzLkluaXQob2JqKTtcclxufTtcclxuSGFzaGVyLnByb3RvdHlwZSA9IHtcclxuXHQkZGF0YToge30sXHJcblx0JHdhdGNoOiB7fSxcclxuXHRJbml0OiBmdW5jdGlvbiAob2JqKSB7XHJcblx0XHR2YXIgdGhhdCA9IHRoaXM7XHJcblx0XHQvL3VybOWPmOWMluebkeWQrOWZqFxyXG5cdFx0dGhpcy4kd2F0Y2ggPSBvYmoud2F0Y2g7XHJcblxyXG5cdFx0dmFyIG9iakRhdGEgPSBvYmouZGF0YSB8fCB7fTtcclxuXHRcdHRoaXMuJGRhdGEgPSBtaXhpbih0aGlzLmdldEhhc2goKSwgb2JqRGF0YSwgdHJ1ZSk7XHJcblxyXG5cdFx0dGhpcy5pbml0TGlzdGVuZXIodGhpcy4kZGF0YSk7XHJcblxyXG5cdFx0aWYgKCgnb25oYXNoY2hhbmdlJyBpbiB3aW5kb3cpICYmICgodHlwZW9mIGRvY3VtZW50LmRvY3VtZW50TW9kZSA9PT0gJ3VuZGVmaW5lZCcpIHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+PSA4KSkge1xyXG5cdFx0XHQvLyDmtY/op4jlmajmlK/mjIFvbmhhc2hjaGFuZ2Xkuovku7ZcclxuXHRcdFx0d2luZG93Lm9uaGFzaGNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dmFyIGNoYW5nZSA9IHRoYXQuaGFzaFdhdGNoZXIoZSk7XHJcblxyXG5cdFx0XHRcdHRoYXQuaW5pdExpc3RlbmVyKGNoYW5nZS5hZGQpO1xyXG5cdFx0XHRcdHRoYXQudXBkYXRlRGF0YShjaGFuZ2UudXBkYXRlKTtcclxuXHJcblx0XHRcdFx0dmFyIGRlbGVkID0ge307XHJcblx0XHRcdFx0Y2hhbmdlLmRlbC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcblx0XHRcdFx0XHRkZWxlZFtpdGVtXSA9ICcnO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHRoYXQudXBkYXRlRGF0YShkZWxlZCk7XHJcblx0XHRcdH07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ+aCqOeahOa1j+iniOWZqOS4jeaUr+aMgWhhc2jnm5HlkKzkuovku7YnKTtcclxuXHRcdH07XHJcblxyXG5cdFx0b2JqLm1vdW50ZWQgJiYgb2JqLm1vdW50ZWQuY2FsbCh0aGlzKTtcclxuXHR9LFxyXG5cdC8qKlxyXG5cdCAqIOWPr+i/lOWbnueahOWcqOWvvOiIquS4reWKoOWFpeWPguaVsO+8jOexu+avlGhpc3Rvcnnlr7nosaFwdXNoU3RhdGXmlrnms5VcclxuXHQgKiBAcGFyYW0gIHtzdHJpbmcvT2JqZWN0fSBrZXkgICDplK7miJblr7nosaFcclxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlIOWAvFxyXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gICAgICAg5paw55qE5Zyw5Z2A5YC8XHJcblx0ICovXHJcblx0cHVzaDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuXHRcdHZhciBuZXdIcmVmID0gdGhpcy5jcmVhck5ld0hyZWYoa2V5LCB2YWx1ZSk7XHJcblxyXG5cdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSAobmV3SHJlZik7XHJcblx0XHRyZXR1cm4gbmV3SHJlZjtcclxuXHR9LFxyXG5cdC8qKlxyXG5cdCAqIOS4jeWPr+i/lOWbnueahOWcqOWvvOiIquS4reWKoOWFpeWPguaVsO+8jOexu+avlGhpc3Rvcnnlr7nosaFyZXBsYWNlU3RhdGXmlrnms5VcclxuXHQgKiBAcGFyYW0gIHtzdHJpbmcvT2JqZWN0fSBrZXkgICDplK7miJblr7nosaFcclxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlIOWAvFxyXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gICAgICAg5paw55qE5Zyw5Z2A5YC8XHJcblx0ICovXHJcblx0cmVwbGFjZTogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuXHRcdHZhciBuZXdIcmVmID0gdGhpcy5jcmVhck5ld0hyZWYoa2V5LCB2YWx1ZSk7XHJcblxyXG5cdFx0d2luZG93LmxvY2F0aW9uLnJlcGxhY2UobmV3SHJlZik7XHJcblx0XHRyZXR1cm4gbmV3SHJlZjtcclxuXHR9LFxyXG5cdHRvSGFzaDogZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNhbGxiYWNrKSB7XHJcblx0XHR2YXIgaGFzaE9iaiA9IHRoaXMuZ2V0SGFzaCgpO1xyXG5cclxuXHRcdGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxuXHRcdFx0aGFzaE9ialtrZXldID0gdmFsdWU7XHJcblxyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRjYWxsYmFjayA9IHZhbHVlIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cdFx0XHRPYmplY3Qua2V5cyhrZXkpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuXHRcdFx0XHRoYXNoT2JqW2l0ZW1dID0ga2V5W2l0ZW1dXHJcblx0XHRcdH0pXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGhhc2hTdHIgPSAnIyc7XHJcblx0XHRmb3IgKHRrZXkgaW4gaGFzaE9iaikge1xyXG5cdFx0XHRpZiAodGtleSA9PSAnJHBhdGgnKVxyXG5cdFx0XHRcdGhhc2hTdHIgKz0gKGhhc2hPYmpbdGtleV0gKyAnJicpO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aGFzaFN0ciArPSAodGtleSArICc9JyArIGhhc2hPYmpbdGtleV0gKyAnJicpO1xyXG5cdFx0fTtcclxuXHRcdHJldHVybiBoYXNoU3RyLnNsaWNlKDAsIC0xKTtcclxuXHR9LFxyXG5cdGNyZWFyTmV3SHJlZjogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuXHRcdHZhciBoYXNoID0gdGhpcy50b0hhc2goa2V5LCB2YWx1ZSksXHJcblx0XHRcdGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuXHJcblx0XHRpZiAoISF3aW5kb3cubG9jYXRpb24uaGFzaCkge1xyXG5cdFx0XHRyZXR1cm4gKGhyZWYucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaGFzaCwgaGFzaCkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIChocmVmICsgaGFzaCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ld0hyZWY7XHJcblx0fSxcclxuXHRnZXRIYXNoOiBmdW5jdGlvbiAoKSB7XHJcblx0XHR2YXIgaGFzaCA9IFtdXHJcblx0XHR0cnkge1xyXG5cdFx0XHRoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3BsaXQoJyMnKVsxXS5zcGxpdChcIiZcIik7XHJcblx0XHR9IGNhdGNoIChlKSB7fVxyXG5cdFx0dmFyIGhhc2hPYmogPSB7fTtcclxuXHRcdGhhc2guZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG5cdFx0XHRpZiAoLz0vLnRlc3QoaXRlbSkpXHJcblx0XHRcdFx0aGFzaE9ialtpdGVtLnNwbGl0KFwiPVwiKVswXV0gPSBpdGVtLnNwbGl0KFwiPVwiKVsxXTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGhhc2hPYmpbJyRwYXRoJ10gPSBpdGVtO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gaGFzaE9iajtcclxuXHR9LFxyXG5cdGhhc2hXYXRjaGVyOiBmdW5jdGlvbiAoZSkge1xyXG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xyXG5cdFx0dmFyIG5ld0hhc2ggPSB0aGlzLmdldEhhc2goKTtcclxuXHRcdHZhciB1cGRhdGUgPSB7fSxcclxuXHRcdFx0YWRkID0ge30sXHJcblx0XHRcdGRlbCA9IFtdO1xyXG5cclxuXHRcdE9iamVjdC5rZXlzKG5ld0hhc2gpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG5cdFx0XHRpZiAodGhhdC4kZGF0YVtrZXldID09PSB1bmRlZmluZWQgJiYgbmV3SGFzaFtrZXldICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRhZGRba2V5XSA9IG5ld0hhc2hba2V5XTtcclxuXHRcdFx0fSBlbHNlIGlmICh0aGF0LiRkYXRhW2tleV0gIT0gbmV3SGFzaFtrZXldKSB7XHJcblx0XHRcdFx0dXBkYXRlW2tleV0gPSB7XHJcblx0XHRcdFx0XHRvbGQ6IHRoYXQuJGRhdGFba2V5XSxcclxuXHRcdFx0XHRcdG5ldzogbmV3SGFzaFtrZXldXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRPYmplY3Qua2V5cyh0aGlzLiRkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuXHRcdFx0aWYgKHRoYXQuJGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkICYmIG5ld0hhc2hba2V5XSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0ZGVsLnB1c2goa2V5KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dXBkYXRlOiB1cGRhdGUsXHJcblx0XHRcdGFkZDogYWRkLFxyXG5cdFx0XHRkZWw6IGRlbFxyXG5cdFx0fVxyXG5cdH0sXHJcblx0aW5pdExpc3RlbmVyOiBmdW5jdGlvbiAob2JqKSB7XHJcblx0XHR2YXIgdGhhdCA9IHRoaXM7XHJcblx0XHRPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhhdCwga2V5LCB7XHJcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhhdC4kZGF0YVtrZXldO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0c2V0OiBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFx0dmFyIG9sZFZhbCA9IHRoYXQuJGRhdGFba2V5XTtcclxuXHRcdFx0XHRcdHRoYXQuJGRhdGFba2V5XSA9IGU7XHJcblx0XHRcdFx0XHRpZiAoISF0aGF0LiR3YXRjaFtrZXldKVxyXG5cdFx0XHRcdFx0XHR0aGF0LiR3YXRjaFtrZXldKGUsIG9sZFZhbCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHR1cGRhdGVEYXRhOiBmdW5jdGlvbiAob2JqKSB7XHJcblx0XHR2YXIgdGhhdCA9IHRoaXM7XHJcblx0XHRPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG5cdFx0XHR0aGF0W2tleV0gPSBvYmpba2V5XS5uZXc7XHJcblx0XHR9KVxyXG5cdH1cclxufTtcclxuIiwiLyoqXHJcbiAqIOmBrue9qeWxguexu1xyXG4gKiBAcGFyYW0gICAgICAge09iamVjdH0gb2JqIOiuvue9rlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcblNoYWRlQm94ID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgdGhpcy5pbml0KG9iaik7XHJcbn07XHJcblNoYWRlQm94LnByb3RvdHlwZSA9IHtcclxuICAgIGVsOiBudWxsLFxyXG4gICAgYW5pbWF0ZTogMzAwLFxyXG4gICAgbG9jazogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIOmBrue9qeWxguaehOmAoOWHveaVsO+8jGJvZHnmnKvlsL7liJvpgKDkuIDkuKrpmpDol4/nmoTlhajlsY9kaXZcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gb2JqIOebuOWFs+iuvue9ru+8mntcclxuICAgICAqIHN0eWxlOumBrue9qeWxguagt+W8jyxcclxuICAgICAqIGFuaW1hdGU6IOWKqOeUu+aViOaenOaMgee7reaXtumXtOm7mOiupDMwMG1zLFxyXG4gICAgICogbG9jazog5pi+56S66YGu572p5pe277yM5piv5ZCm6ZSB5a6aYm9keeemgeatoua7muWKqCxcclxuICAgICAqIGlubmVySFRNTDog6YGu572p5bGC5YaFZG9t5a2X56ym5LiyfVxyXG4gICAgICogQHJldHVybiB7dW5kZWZpbmVkfSAgICAg5peg6L+U5Zue5YC8XHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHksXHJcbiAgICAgICAgICAgIGNvdmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXHJcbiAgICAgICAgICAgIGRlZlN0eWxlID0ge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICBib3R0b206IDAsXHJcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDUwMDAsXHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnYWxsJyxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9jayA9IG9iai5sb2NrO1xyXG5cclxuICAgICAgICBpZiAoISFvYmouYW5pbWF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgYW5pID0gb2JqLmFuaW1hdGU7XHJcbiAgICAgICAgICAgIGlmICgvcy8udGVzdChhbmkpKSB7XHJcbiAgICAgICAgICAgICAgICBhbmkgPSBOdW1iZXIoYW5pLnNwbGl0KCdzJylbMF0pICogMTAwMDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRlID0gTnVtYmVyKGFuaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlZlN0eWxlLnRyYW5zaXRpb24gPSAnYWxsICcgKyAodGhpcy5hbmltYXRlIC8gMTAwMCkgKyAncyc7XHJcblxyXG4gICAgICAgIG1peGluKG9iai5zdHlsZSwgZGVmU3R5bGUpO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKGRlZlN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgY292ZXIuc3R5bGVba2V5XSA9IGRlZlN0eWxlW2tleV07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvdmVyLmlkID0gJ2NvdmVyX19kaXYtLScgKyBnZXRSYW5kb20oNSk7XHJcblxyXG4gICAgICAgIGNvdmVyLmlubmVySFRNTCA9IG9iai5pbm5lckhUTUwgfHwgJyc7XHJcblxyXG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoY292ZXIpO1xyXG4gICAgICAgIHRoaXMuZWwgPSBjb3ZlcjtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIOaYvuekuumBrue9qeWxglxyXG4gICAgICogQHJldHVybiB7dW5kZWZpbmVkfSDml6Dov5Tlm57lgLxcclxuICAgICAqL1xyXG4gICAgc2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSB0aGlzLmxvY2sgPyAnaGlkZGVuJyA6ICcnO1xyXG4gICAgICAgIHRoaXMuZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgdGhpcy5lbC5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIOmakOiXj+mBrue9qeWxglxyXG4gICAgICogQHJldHVybiB7dW5kZWZpbmVkfSDml6Dov5Tlm57lgLxcclxuICAgICAqL1xyXG4gICAgaGlkZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnJztcclxuICAgICAgICB0aGlzLmVsLnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpLCB0aGlzLmFuaW1hdGUpO1xyXG4gICAgfVxyXG59O1xyXG4iLCIvKipcclxuICogYWpheCBjb2Rl5p+l6K+iXHJcbiAqIEBwYXJhbSAge09iamVjdH0gICBvYmogICAgICDov5Tlm57nmoTlr7nosaFcclxuICogQHBhcmFtICB7T2JqZWN0fSAgIHNldHRpbmdzIOaOpeWPo+ebuOWFs+a1i+ivle+8iOmdnuW/hemhu++8iVxyXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sg5Zue6LCD5Ye95pWwXHJcbiAqIEByZXR1cm4ge251bGx9ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxyXG4gKi9cclxud2luZG93LmFqYXhSZXNDaGVjayA9IGZ1bmN0aW9uIChvYmosIHNldHRpbmdzLCBjYWxsYmFjaykge1xyXG5cdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrO1xyXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIpIHtcclxuXHRcdGNhbGxiYWNrID0gc2V0dGluZ3M7XHJcblx0fVxyXG5cclxuXHR2YXIgc3dpdGNoT2JqID0ge1xyXG5cdFx0J3YnOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdCEhY2FsbGJhY2sgJiYgY2FsbGJhY2sob2JqLnRkYXRhLCBvYmopO1xyXG5cdFx0fSxcclxuXHRcdCdwZ2xpc3QnOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdCEhY2FsbGJhY2sgJiYgY2FsbGJhY2sob2JqKTtcclxuXHRcdH0sXHJcblx0XHQndmFsZXJyb3InOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmICghSXNOdWxsT3JFbXB0eShvYmoubXNnKSkge1xyXG5cdFx0XHRcdFNob3dNc2dCb3gob2JqLm1zZywgXCJlcnJvclwiKTtcclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblx0XHQnbG9naW4taW5kZXgnOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFNob3dNc2dCb3gob2JqLm1zZywgJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHZhciBjb21wYW55ID0gZ2V0U2Vzc2lvbignY29tcGFueScpLFxyXG5cdFx0XHRcdFx0dXNlciA9IGdldFNlc3Npb24oJ3VzZXInKTtcclxuXHRcdFx0XHRzZXNzaW9uU3RvcmFnZS5jbGVhcigpO1xyXG5cdFx0XHRcdGlmICghY29tcGFueSkge1xyXG5cdFx0XHRcdFx0aWYgKHVzZXIudXNlcmlkID09ICcxJykge1xyXG5cdFx0XHRcdFx0XHR3aW5kb3cudG9wLmxvY2F0aW9uLmhyZWYgPSAoaHRtbFVybCArIFwiL3BsYXRsb2dpbi5odG1sXCIpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR3aW5kb3cudG9wLmxvY2F0aW9uLmhyZWYgPSAoaHRtbFVybCArIFwiL2xvZ2luLmh0bWxcIik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHdpbmRvdy50b3AubG9jYXRpb24uaHJlZiA9ICgnLycgKyBjb21wYW55ICsgXCIvbG9naW5cIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblx0XHQnanVtcC11cmwnOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFNob3dNc2dCb3gob2JqLm1zZywgJ2luZm8nLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0d2luZG93LnRvcC5sb2NhdGlvbi5ocmVmID0gKGh0bWxVcmwgKyBvYmoudXJsKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gISFzd2l0Y2hPYmpbb2JqLmNvZGVdID8gc3dpdGNoT2JqW29iai5jb2RlXSgpIDogKC9eKHRocm93LSkvLnRlc3Qob2JqLmNvZGUpID8gKGZ1bmN0aW9uKCl7XHJcblx0XHRvYmouY29kZSA9IG9iai5jb2RlLnNwbGl0KCd0aHJvdy0nKVsxXTtcclxuXHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrKG9iaik7XHJcblx0fSgpKSA6IFNob3dNc2dCb3gob2JqLm1zZywgJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSk7XHJcblx0fSkpO1xyXG5cclxufVxyXG5cclxuLyoqKioqKioqKioqKioqKioqKlxyXG4gKioqIE5vdGlmaWNhdGlvbiDmtojmga/pgJrnn6VcclxuICoqKiBtc2cg5o+Q56S65L+h5oGvXHJcbiAqKiogdHlwZSDmtojmga/nsbvlnotcclxuICoqKioqKioqKioqKioqKioqKi9cclxud2luZG93LlNob3dNc2cgPSBmdW5jdGlvbiAobXNnLCB0eXBlLCBjYWxsYmFjaykge1xyXG5cdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XHJcblx0d2luZG93LnRvcC4kdnVlLiRub3RpZnkoe1xyXG5cdFx0bWVzc2FnZTogbXNnLFxyXG5cdFx0dHlwZTogdHlwZSB8fCBcIndhcm5pbmdcIixcclxuXHRcdG9uQ2xvc2U6IGNhbGxiYWNrXHJcblx0fSk7XHJcblx0Ly8kbWVzc2FnZSh7IHNob3dDbG9zZTogdHJ1ZSwgbWVzc2FnZTogbXNnLCB0eXBlOiB0eXBlIHx8IFwid2FybmluZ1wiLCBkdXJhdGlvbjogMTUwMCB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGNvbmZpcm3noa7orqTpgInmi6nmoYZcclxuICogQHBhcmFtICB7c3RyaW5nfSBtc2cgIOaPkOekuuS/oeaBr1xyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHR5cGUg5o+Q56S657G75Z6LXHJcbiAqIEBwYXJhbSAge2Z1bmN0aW9ufSBjYjEgIOehruiupOWbnuiwg1xyXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2IyICDlj5bmtojlm57osINcclxuICogQHJldHVybiB7bnVsbH0gICAgICDml6Dov5Tlm57lgLxcclxuICovXHJcbndpbmRvdy5TaG93Q29uZmlybSA9IGZ1bmN0aW9uIChtc2csIHR5cGUsIGNiMSwgY2IyKSB7XHJcblx0Y2IxID0gY2IxIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cdGNiMiA9IGNiMiB8fCBmdW5jdGlvbiAoKSB7fTtcclxuXHR3aW5kb3cudG9wLiR2dWUuJGNvbmZpcm0obXNnLCAn5o+Q56S6Jywge1xyXG5cdFx0Y29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLFxyXG5cdFx0Y2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsXHJcblx0XHR0eXBlOiB0eXBlIHx8ICd3YXJuaW5nJyxcclxuXHRcdHNob3dDbG9zZTogZmFsc2UsXHJcblx0XHRjYWxsYmFjazogZnVuY3Rpb24gKGFjdGlvbiwgaW5zdGFuY2UpIHtcclxuXHRcdFx0aWYgKGFjdGlvbiA9PSAnY29uZmlybScpIHtcclxuXHRcdFx0XHRjYjEoKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjYjIoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pXHJcbn1cclxuIiwiLyoqXHJcbiAqIOWvuURhdGXnmoTmianlsZXvvIzlsIYgRGF0ZSDovazljJbkuLrmjIflrprmoLzlvI/nmoRTdHJpbmdcclxuICog5pyIKE0p44CB5pelKGQp44CBMTLlsI/ml7YoaCnjgIEyNOWwj+aXtihIKeOAgeWIhihtKeOAgeenkihzKeOAgeWRqChFKeOAgeWto+W6pihxKSDlj6/ku6XnlKggMS0yIOS4quWNoOS9jeesplxyXG4gKiDlubQoeSnlj6/ku6XnlKggMS00IOS4quWNoOS9jeespu+8jOavq+enkihTKeWPquiDveeUqCAxIOS4quWNoOS9jeespijmmK8gMS0zIOS9jeeahOaVsOWtlylcclxuICogZWc6XHJcbiAqIChuZXcgRGF0ZSgpKS5wYXR0ZXJuKFwieXl5eS1NTS1kZCBoaDptbTpzcy5TXCIpID09PiAyMDA2LTA3LTAyIDA4OjA5OjA0LjQyM1xyXG4gKiAobmV3IERhdGUoKSkucGF0dGVybihcInl5eXktTU0tZGQgRSBISDptbTpzc1wiKSA9PT4gMjAwOS0wMy0xMCDkuowgMjA6MDk6MDRcclxuICogKG5ldyBEYXRlKCkpLnBhdHRlcm4oXCJ5eXl5LU1NLWRkIEVFIGhoOm1tOnNzXCIpID09PiAyMDA5LTAzLTEwIOWRqOS6jCAwODowOTowNFxyXG4gKiAobmV3IERhdGUoKSkucGF0dGVybihcInl5eXktTU0tZGQgRUVFIGhoOm1tOnNzXCIpID09PiAyMDA5LTAzLTEwIOaYn+acn+S6jCAwODowOTowNFxyXG4gKiAobmV3IERhdGUoKSkucGF0dGVybihcInl5eXktTS1kIGg6bTpzLlNcIikgPT0+IDIwMDYtNy0yIDg6OTo0LjE4XHJcbuS9v+eUqO+8mihldmFsKHZhbHVlLnJlcGxhY2UoL1xcL0RhdGVcXCgoXFxkKylcXClcXC8vZ2ksIFwibmV3IERhdGUoJDEpXCIpKSkucGF0dGVybihcInl5eXktTS1kIGg6bTpzLlNcIik7XHJcbiAqL1xyXG53aW5kb3cuRGF0ZS5wcm90b3R5cGUucGF0dGVybiA9IGZ1bmN0aW9uIChmbXQpIHtcclxuXHR2YXIgbyA9IHtcclxuXHRcdFwiTStcIjogdGhpcy5nZXRNb250aCgpICsgMSwgLy/mnIjku71cclxuXHRcdFwiZCtcIjogdGhpcy5nZXREYXRlKCksIC8v5pelXHJcblx0XHRcImgrXCI6IHRoaXMuZ2V0SG91cnMoKSAlIDEyID09IDAgPyAxMiA6IHRoaXMuZ2V0SG91cnMoKSAlIDEyLCAvL+Wwj+aXtlxyXG5cdFx0XCJIK1wiOiB0aGlzLmdldEhvdXJzKCksIC8v5bCP5pe2XHJcblx0XHRcIm0rXCI6IHRoaXMuZ2V0TWludXRlcygpLCAvL+WIhlxyXG5cdFx0XCJzK1wiOiB0aGlzLmdldFNlY29uZHMoKSwgLy/np5JcclxuXHRcdFwicStcIjogTWF0aC5mbG9vcigodGhpcy5nZXRNb250aCgpICsgMykgLyAzKSwgLy/lraPluqZcclxuXHRcdFwiU1wiOiB0aGlzLmdldE1pbGxpc2Vjb25kcygpIC8v5q+r56eSXHJcblx0fTtcclxuXHR2YXIgd2VlayA9IHtcclxuXHRcdFwiMFwiOiBcIi91NjVlNVwiLFxyXG5cdFx0XCIxXCI6IFwiL3U0ZTAwXCIsXHJcblx0XHRcIjJcIjogXCIvdTRlOGNcIixcclxuXHRcdFwiM1wiOiBcIi91NGUwOVwiLFxyXG5cdFx0XCI0XCI6IFwiL3U1NmRiXCIsXHJcblx0XHRcIjVcIjogXCIvdTRlOTRcIixcclxuXHRcdFwiNlwiOiBcIi91NTE2ZFwiXHJcblx0fTtcclxuXHRpZiAoLyh5KykvLnRlc3QoZm10KSkge1xyXG5cdFx0Zm10ID0gZm10LnJlcGxhY2UoUmVnRXhwLiQxLCAodGhpcy5nZXRGdWxsWWVhcigpICsgXCJcIikuc3Vic3RyKDQgLSBSZWdFeHAuJDEubGVuZ3RoKSk7XHJcblx0fVxyXG5cdGlmICgvKEUrKS8udGVzdChmbXQpKSB7XHJcblx0XHRmbXQgPSBmbXQucmVwbGFjZShSZWdFeHAuJDEsICgoUmVnRXhwLiQxLmxlbmd0aCA+IDEpID8gKFJlZ0V4cC4kMS5sZW5ndGggPiAyID8gXCIvdTY2MWYvdTY3MWZcIiA6IFwiL3U1NDY4XCIpIDogXCJcIikgKyB3ZWVrW3RoaXMuZ2V0RGF5KCkgKyBcIlwiXSk7XHJcblx0fVxyXG5cdGZvciAodmFyIGsgaW4gbykge1xyXG5cdFx0aWYgKG5ldyBSZWdFeHAoXCIoXCIgKyBrICsgXCIpXCIpLnRlc3QoZm10KSkge1xyXG5cdFx0XHRmbXQgPSBmbXQucmVwbGFjZShSZWdFeHAuJDEsIChSZWdFeHAuJDEubGVuZ3RoID09IDEpID8gKG9ba10pIDogKChcIjAwXCIgKyBvW2tdKS5zdWJzdHIoKFwiXCIgKyBvW2tdKS5sZW5ndGgpKSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBmbXQ7XHJcbn1cclxuXHJcbndpbmRvdy5EYXRlLnByb3RvdHlwZS5Gb3JtYXQgPSBmdW5jdGlvbiAoZm10KSB7IC8vYXV0aG9yOiBtZWl6elxyXG5cdHZhciBvID0ge1xyXG5cdFx0XCJNK1wiOiB0aGlzLmdldE1vbnRoKCkgKyAxLCAvL+aciOS7vVxyXG5cdFx0XCJkK1wiOiB0aGlzLmdldERhdGUoKSwgLy/ml6VcclxuXHRcdFwiSCtcIjogdGhpcy5nZXRIb3VycygpLCAvL+Wwj+aXtlxyXG5cdFx0XCJtK1wiOiB0aGlzLmdldE1pbnV0ZXMoKSwgLy/liIZcclxuXHRcdFwicytcIjogdGhpcy5nZXRTZWNvbmRzKCksIC8v56eSXHJcblx0XHRcInErXCI6IE1hdGguZmxvb3IoKHRoaXMuZ2V0TW9udGgoKSArIDMpIC8gMyksIC8v5a2j5bqmXHJcblx0XHRcIlNcIjogdGhpcy5nZXRNaWxsaXNlY29uZHMoKSAvL+avq+enklxyXG5cdH07XHJcblx0aWYgKC8oeSspLy50ZXN0KGZtdCkpIGZtdCA9IGZtdC5yZXBsYWNlKFJlZ0V4cC4kMSwgKHRoaXMuZ2V0RnVsbFllYXIoKSArIFwiXCIpLnN1YnN0cig0IC0gUmVnRXhwLiQxLmxlbmd0aCkpO1xyXG5cdGZvciAodmFyIGsgaW4gbylcclxuXHRcdGlmIChuZXcgUmVnRXhwKFwiKFwiICsgayArIFwiKVwiKS50ZXN0KGZtdCkpIGZtdCA9IGZtdC5yZXBsYWNlKFJlZ0V4cC4kMSwgKFJlZ0V4cC4kMS5sZW5ndGggPT0gMSkgPyAob1trXSkgOiAoKFwiMDBcIiArIG9ba10pLnN1YnN0cigoXCJcIiArIG9ba10pLmxlbmd0aCkpKTtcclxuXHRyZXR1cm4gZm10O1xyXG59XHJcbiIsIi8qKlxyXG4gKiDnibnmrorlrZfnrKbovazkuYnlj4rlj43ovazkuYlcclxuICogQHBhcmFtICB7Qm9vbGVhbn0gZW5jb2RlIOexu+Wei3RydWXkuLrovazkuYlmYWxzZeS4uuWPjei9rOS5iVxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICDnu5PmnpzlrZfnrKbkuLJcclxuICovXHJcbndpbmRvdy5TdHJpbmcucHJvdG90eXBlLmh0bWwgPSBmdW5jdGlvbiAoZW5jb2RlKSB7XHJcblx0dmFyIHJlcGxhY2UgPSBbXCImIzM5O1wiLCBcIidcIixcclxuXHRcdFwiJnF1b3Q7XCIsICdcIicsXHJcblx0XHRcIiZuYnNwO1wiLCBcIiBcIixcclxuXHRcdFwiJmd0O1wiLCBcIj5cIixcclxuXHRcdFwiJmx0O1wiLCBcIjxcIixcclxuXHRcdFwiJmFtcDtcIiwgXCImXCIsXHJcblx0XHRcIiZ5ZW47XCIsIFwiwqVcIixcclxuXHRcdFwiJmxzcXVvO1wiLCBcIuKAmFwiLFxyXG5cdFx0XCImcnNxdW87XCIsIFwi4oCZXCIsXHJcblx0XHRcIiZoZWxsaXA7XCIsIFwi4oCmXCIsXHJcblx0XHRcIiZsZHF1bztcIiwgXCLigJxcIixcclxuXHRcdFwiJnJkcXVvO1wiLCBcIuKAnVwiLFxyXG5cdFx0XCImbWRhc2g7XCIsIFwi4oCUXCJcclxuXHRdO1xyXG5cdGlmIChlbmNvZGUpIHtcclxuXHRcdHJlcGxhY2UucmV2ZXJzZSgpO1xyXG5cdH1cclxuXHRmb3IgKHZhciBpID0gMCwgc3RyID0gdGhpczsgaSA8IHJlcGxhY2UubGVuZ3RoOyBpICs9IDIpIHtcclxuXHRcdHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAocmVwbGFjZVtpXSwgJ2cnKSwgcmVwbGFjZVtpICsgMV0pO1xyXG5cdH1cclxuXHRyZXR1cm4gc3RyO1xyXG59O1xyXG4iLCIoZnVuY3Rpb24oZmFjdG9yeSkge1xyXG4gICAgaWYoIXdpbmRvdy5WdWUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCfml6Dms5Xmib7liLBWdWXlr7nosaEnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZighd2luZG93LiQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCfml6Dms5Xmib7liLAk5a+56LGhJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZmFjdG9yeSgpO1xyXG59KShmdW5jdGlvbigpIHtcclxuICAgIC8v5bel5YW357uE5Lu2YnVzXHJcblx0d2luZG93LiRidXMgPSBuZXcgVnVlKHtcclxuXHJcblx0fSk7XHJcblxyXG5cdFZ1ZS5wcm90b3R5cGUuJGdldCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XHJcblx0XHR2YXIgdXJsLCBkYXRhLCBjYWxsYmFjaywgZnp0eXBlO1xyXG5cclxuXHRcdHVybCA9IGE7XHJcblx0XHRkYXRhID0gJyc7XHJcblx0XHRjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cdFx0Znp0eXBlID0gZmFsc2U7XHJcblxyXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMiAmJiB0eXBlb2YgKGIpID09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0Y2FsbGJhY2sgPSBiO1xyXG5cdFx0fSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIgJiYgdHlwZW9mIChiKSAhPSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdGRhdGEgPSBiO1xyXG5cdFx0fSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDMpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiAoYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSkgPT0gJ2Jvb2xlYW4nKSB7XHJcblx0XHRcdFx0ZGF0YSA9IGI7XHJcblx0XHRcdFx0Znp0eXBlID0gYztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkYXRhID0gYjtcclxuXHRcdFx0XHRjYWxsYmFjayA9IGM7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSA0KSB7XHJcblx0XHRcdGRhdGEgPSBiO1xyXG5cdFx0XHRjYWxsYmFjayA9IGM7XHJcblx0XHRcdGZ6dHlwZSA9IGQ7XHJcblx0XHR9XHJcblxyXG5cdFx0QWpheFJlcXVlc3QuY2FsbCh0aGlzLCB7XHJcblx0XHRcdHVybDogdXJsLFxyXG5cdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHR0eXBlOiAnZ2V0JyxcclxuXHRcdFx0Y2FsbGJhY2s6IGZ1bmN0aW9uIChkYXRhLCByZXMpIHtcclxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKHRoaXMsIGRhdGEsIHJlcylcclxuXHRcdFx0fS5iaW5kKHRoaXMpLFxyXG5cdFx0XHRmenR5cGU6IGZ6dHlwZVxyXG5cdFx0fSlcclxuXHR9XHJcblxyXG5cdFZ1ZS5wcm90b3R5cGUuJHBvc3QgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xyXG5cdFx0dmFyIHVybCwgZGF0YSwgY2FsbGJhY2ssIGZ6dHlwZTtcclxuXHJcblx0XHR1cmwgPSBhO1xyXG5cdFx0ZGF0YSA9ICcnO1xyXG5cdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcclxuXHRcdGZ6dHlwZSA9IGZhbHNlO1xyXG5cclxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIgJiYgdHlwZW9mIChiKSA9PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdGNhbGxiYWNrID0gYjtcclxuXHRcdH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyICYmIHR5cGVvZiAoYikgIT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRkYXRhID0gYjtcclxuXHRcdH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAzKSB7XHJcblx0XHRcdGlmICh0eXBlb2YgKGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0pID09ICdib29sZWFuJykge1xyXG5cdFx0XHRcdGRhdGEgPSBiO1xyXG5cdFx0XHRcdGZ6dHlwZSA9IGM7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGF0YSA9IGI7XHJcblx0XHRcdFx0Y2FsbGJhY2sgPSBjO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gNCkge1xyXG5cdFx0XHRkYXRhID0gYjtcclxuXHRcdFx0Y2FsbGJhY2sgPSBjO1xyXG5cdFx0XHRmenR5cGUgPSBkO1xyXG5cdFx0fVxyXG5cclxuXHRcdEFqYXhSZXF1ZXN0LmNhbGwodGhpcywge1xyXG5cdFx0XHR1cmw6IHVybCxcclxuXHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0dHlwZTogJ3Bvc3QnLFxyXG5cdFx0XHRjYWxsYmFjazogZnVuY3Rpb24gKGRhdGEsIHJlcykge1xyXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwodGhpcywgZGF0YSwgcmVzKVxyXG5cdFx0XHR9LmJpbmQodGhpcyksXHJcblx0XHRcdGZ6dHlwZTogZnp0eXBlXHJcblx0XHR9KVxyXG5cdH1cclxuXHJcbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblx0ICoqKuWPkemAgWFqYXjor7fmsYJcclxuXHQgKioqIHVybCDor7fmsYJ1cmwvL2FcclxuXHQgKioqIGRhdGEg5o+Q5Lqk5pWw5o2uLy9iXHJcblx0ICoqKiB0eXBlIOivt+axguexu+Weiy8vY1xyXG5cdCAqKioqKiogY2FsbGJhY2sg6K+35rGC5oiQ5Yqf5Zue6LCDLy9jXFxkXHJcblx0ICpmenR5cGUg5piv5ZCm5aSN5p2C5Zue6LCDXHJcblx0ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHRmdW5jdGlvbiBBamF4UmVxdWVzdChzZXR0aW5ncykge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0JHZ1ZS5sb2FkaW5nQ29udHJvbGxlciA9IHRydWU7XHJcblx0XHR9IGNhdGNoIChlKSB7fVxyXG5cclxuXHRcdHZhciBjX2RhdGEgPSBjbG9uZShzZXR0aW5ncy5kYXRhKTtcclxuXHJcblx0XHRjX2RhdGEgPSAhIXNldHRpbmdzLmZ6dHlwZSA/IEpTT04uc3RyaW5naWZ5KGNfZGF0YSkgOiBjX2RhdGE7XHJcblx0XHR2YXIgY29udGVudFR5cGUgPSAhIXNldHRpbmdzLmZ6dHlwZSA/ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnIDogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JztcclxuXHRcdHZhciBjYWxsYmFjayA9IHNldHRpbmdzLmNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9XHJcblxyXG5cdFx0JC5hamF4KHtcclxuXHRcdFx0dXJsOiAvXFw/Ly50ZXN0KHNldHRpbmdzLnVybCkgPyBzZXR0aW5ncy51cmwgKyAnJnJhbmRvbT0nICsgZ2V0VGltZVN0cm1wKCkgOiBzZXR0aW5ncy51cmwgKyAnP3JhbmRvbT0nICsgZ2V0VGltZVN0cm1wKCksXHJcblx0XHRcdHR5cGU6IHNldHRpbmdzLnR5cGUgfHwgJ2dldCcsXHJcblx0XHRcdGRhdGE6IGNfZGF0YSxcclxuXHRcdFx0Y29udGVudFR5cGU6IGNvbnRlbnRUeXBlLFxyXG5cdFx0XHRoZWFkZXJzOiB7XHJcblx0XHRcdFx0cGFnZXVzZXI6IGdldFNlc3Npb24oJ3VzZXInKSA/IGdldFNlc3Npb24oJ3VzZXInKS51c2VyaWQgOiAnJ1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG5cclxuXHRcdFx0XHR2YXIgb2JqID0gKHR5cGVvZiAoZGF0YSkgPT0gJ3N0cmluZycgJiYgL3t8fS8udGVzdChkYXRhKSkgPyBKU09OLnBhcnNlKGRhdGEpIDogZGF0YTtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0JHZ1ZS5sb2FkaW5nQ29udHJvbGxlciA9IGZhbHNlO1xyXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XHJcblxyXG5cdFx0XHRcdC8v5Y+N57yW56CBXHJcblx0XHRcdFx0ZnVuY3Rpb24gZGVjb2RlKHRhcmdldCkge1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiB0YXJnZXQgPT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XHJcblx0XHRcdFx0XHRcdHRhcmdldC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtID09ICdzdHJpbmcnKSBpdGVtID0gZGVjb2RlKGl0ZW0pO1xyXG5cdFx0XHRcdFx0XHRcdGVsc2UgZGVjb2RlKGl0ZW0pO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PSAnb2JqZWN0JyAmJiAhIXRhcmdldCkge1xyXG5cdFx0XHRcdFx0XHRPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT0gJ3N0cmluZycpIHRhcmdldFtrZXldID0gZGVjb2RlKHRhcmdldFtrZXldKTtcclxuXHRcdFx0XHRcdFx0XHRlbHNlIGRlY29kZSh0YXJnZXRba2V5XSk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0YXJnZXQuaHRtbCgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRkZWNvZGUob2JqKTtcclxuXHJcblxyXG5cdFx0XHRcdGFqYXhSZXNDaGVjay5jYWxsKHRoaXMsIG9iaiwgc2V0dGluZ3MsIGNhbGxiYWNrKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly9BSkFY6K+35rGC57uT5p2f5ZCO77yMXHJcblx0XHRcdGNvbXBsZXRlOiBmdW5jdGlvbiAoeGhyLCBzdGF0dXMpIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0aWYgKHhoci5yZXNwb25zZUpTT04ucmVzdWx0ID09IFwibG9naW4taW5kZXhcIikge1xyXG5cdFx0XHRcdFx0XHRpZiAod2luZG93LnBhcmVudCAhPSB3aW5kb3cpIHtcclxuXHRcdFx0XHRcdFx0XHR3aW5kb3cudG9wLmxvY2F0aW9uLmhyZWYgPSBodG1sVXJsICsgXCIvbG9naW4uaHRtbFwiO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGxvY2F0aW9uLmhyZWYgPSBodG1sVXJsICsgXCIvbG9naW4uaHRtbFwiO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdFx0Ly8gVE9ETzogaGFuZGxlIGV4Y2VwdGlvblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ2FqYXgtZXJyb3I6JyArIHNldHRpbmdzLnVybCwgZXJyb3IpXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0fVxyXG5cclxuICAgIC8v5Yib5bu6bWFpblZ1ZVxyXG5cdGZ1bmN0aW9uIG1haW5WdWUob3B0aW9uKSB7XHJcblx0XHR3aW5kb3cuJHZ1ZSA9IG51bGw7XHJcblxyXG5cdFx0aWYgKCEhb3B0aW9uKSB7XHJcblx0XHRcdHRoaXMuaW5pdChvcHRpb24pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0bWFpblZ1ZS5wcm90b3R5cGUgPSB7XHJcblx0XHRkYXRhOiB7fSxcclxuXHRcdG1ldGhvZHM6IHt9LFxyXG5cdFx0Y29tcHV0ZWQ6IHt9LFxyXG5cdFx0d2F0Y2g6IHt9LFxyXG5cdFx0Y3JlYXRlZDogZnVuY3Rpb24gKCkge30sXHJcblx0XHRtb3VudGVkOiBmdW5jdGlvbiAoKSB7fSxcclxuXHJcblx0XHRpbml0OiBmdW5jdGlvbiAob2JqKSB7XHJcblx0XHRcdHZhciBvYmplY3QgPSAhIW9iaiA/IG9iaiA6IHRoaXM7XHJcblxyXG5cdFx0XHRpZiAoISFvYmopIHtcclxuXHRcdFx0XHRvYmplY3QubW91bnRlZCA9IG9iamVjdC5tb3VudGVkIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cdFx0XHRcdG9iamVjdC5jcmVhdGVkID0gb2JqZWN0LmNyZWF0ZWQgfHwgZnVuY3Rpb24gKCkge307XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdG5ldyBWdWUoe1xyXG5cdFx0XHRcdGVsOiBcIiNtYWluX2NvblwiLFxyXG5cdFx0XHRcdGRhdGE6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdHJldHVybiBvYmplY3QuZGF0YVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0Y29tcHV0ZWQ6IG9iamVjdC5jb21wdXRlZCxcclxuXHRcdFx0XHR3YXRjaDogb2JqZWN0LndhdGNoLFxyXG5cdFx0XHRcdG1ldGhvZHM6IG9iamVjdC5tZXRob2RzLFxyXG5cdFx0XHRcdG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdHdpbmRvdy4kdnVlID0gdGhpcztcclxuXHRcdFx0XHRcdG9iamVjdC5tb3VudGVkLmNhbGwodGhpcyk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHR3aW5kb3cuJHZ1ZSA9IHRoaXM7XHJcblx0XHRcdFx0XHRmb3JtVmFsaWRhdGVUcmFucygpO1xyXG5cclxuXHRcdFx0XHRcdHRoaXMubG9hZGluZ0NvbnRyb2xsZXIgPSB0aGlzLmxvYWRpbmdDb250cm9sbGVyIHx8IGZhbHNlO1xyXG5cdFx0XHRcdFx0dGhpcy5kaWFsb2dWaXNpYmxlID0gdGhpcy5kaWFsb2dWaXNpYmxlIHx8IGZhbHNlO1xyXG5cdFx0XHRcdFx0dGhpcy5zZWFyY2hLZXkgPSB0aGlzLnNlYXJjaEtleSB8fCAnJztcclxuXHRcdFx0XHRcdHRoaXMudGFibGVEYXRhID0gdGhpcy50YWJsZURhdGEgfHwgW107XHJcblxyXG5cdFx0XHRcdFx0b2JqZWN0LmNyZWF0ZWQuY2FsbCh0aGlzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHJcblx0XHRnZXRkYXRhOiBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xyXG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAzKSB7XHJcblx0XHRcdFx0dmFyIGFfdXJsID0gYSxcclxuXHRcdFx0XHRcdGFfZGF0YV9vYmogPSBiLFxyXG5cdFx0XHRcdFx0c3VjY2Vzc19jYWxsYmFjayA9IGMgfHwgZnVuY3Rpb24gKCkge307XHJcblx0XHRcdFx0KGZ1bmN0aW9uIChhMSwgYjEsIGMxKSB7XHJcblx0XHRcdFx0XHRBamF4UmVxdWVzdChhMSwgYjEsIFwiZ2V0XCIsIGZ1bmN0aW9uIChkYXRhLCByZXMpIHtcclxuXHRcdFx0XHRcdFx0YzEoZGF0YSwgcmVzKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fSkoYV91cmwsIGFfZGF0YV9vYmosIHN1Y2Nlc3NfY2FsbGJhY2spXHJcblx0XHRcdH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSA0KSB7XHJcblx0XHRcdFx0dmFyIGFfdXJsID0gYSxcclxuXHRcdFx0XHRcdGFfZGF0YV9vYmogPSBiLFxyXG5cdFx0XHRcdFx0YV90eXBlID0gYyxcclxuXHRcdFx0XHRcdHN1Y2Nlc3NfY2FsbGJhY2sgPSBkIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cdFx0XHRcdChmdW5jdGlvbiAoYTEsIGIxLCBjMSwgZDEpIHtcclxuXHRcdFx0XHRcdEFqYXhSZXF1ZXN0KGExLCBiMSwgYzEsIGZ1bmN0aW9uIChkYXRhLCByZXMpIHtcclxuXHRcdFx0XHRcdFx0ZDEoZGF0YSwgcmVzKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fSkoYV91cmwsIGFfZGF0YV9vYmosIGFfdHlwZSwgc3VjY2Vzc19jYWxsYmFjaylcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuICAgIC8qKlxyXG5cdCAqIOmqjOivgeWxnuaAp+aYr+WQpuWtmOWcqO+8jOS4unRydWXmiJYnJ1xyXG5cdCAqIEBwYXJhbSAge3N0cn0gIHRhcmdldCDlvoXpqozor4Hnm67moIdcclxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAg6L+U5Zue5YC877yM5a2Y5Zyo5pyqdHJ1Ze+8jOWPjeS5i2ZhbHNlXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gaXNFeGlzdCh0YXJnZXQpIHtcclxuXHRcdGlmICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQgIT0gdW5kZWZpbmVkICYmIHRhcmdldCAhPSAnZmFsc2UnKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly/ooajljZXpqozor4HpooTlpITnkIZcclxuXHRmdW5jdGlvbiBmb3JtVmFsaWRhdGVUcmFucygpIHtcclxuXHJcblx0XHR2YXIgbm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdlbC1mb3JtLWl0ZW0nKSxcclxuXHRcdFx0dHlwZUFyciA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJywgJ21ldGhvZCcsICdyZWdleHAnLCAnaW50ZWdlcicsICdmbG9hdCcsICdhcnJheScsICdvYmplY3QnLCAnZW51bScsICdkYXRlJywgJ3VybCcsICdoZXgnLCAnZW1haWwnXTtcclxuXHRcdFx0dHlwZU1hcCA9IFsn5a2X56ym5LiyJywgJ+aVsOWtlycsICfluIPlsJQnLCAnbWV0aG9kJywgJ+ato+WImScsICdpbnRlZ2VyJywgJ+a1rueCueaVsCcsICfmlbDnu4QnLCAn5a+56LGhJywgJ2VudW0nLCAn5pel5pyfJywgJ3VybOWcsOWdgCcsICflk4jluIwnLCAn55S15a2Q6YKu5Lu2J107XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBub2RlTGlzdC5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgcnVsZXMgPSBbXSxcclxuXHRcdFx0XHRtb2JpbGVWYWxTdHIgPSAnJztcclxuXHJcblx0XHRcdGlmIChpc0V4aXN0KG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSgncmVxdWlyZWQnKSkpIHtcclxuXHRcdFx0XHR2YXIgdHJpZ2dlciA9IFsnYmx1ciddXHJcblx0XHRcdFx0aWYgKGlzRXhpc3Qobm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdjaGFuZ2UnKSkpIHtcclxuXHRcdFx0XHRcdHRyaWdnZXIucHVzaChcImNoYW5nZVwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cnVsZXMucHVzaCh7XHJcblx0XHRcdFx0XHQncmVxdWlyZWQnOiAndHJ1ZScsXHJcblx0XHRcdFx0XHQnbWVzc2FnZSc6ICfor7fovpPlhaUnICsgbm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdsYWJlbCcpLFxyXG5cdFx0XHRcdFx0J3RyaWdnZXInOiB0cmlnZ2VyXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHRub2RlTGlzdFtpXS5yZW1vdmVBdHRyaWJ1dGUoJ3JlcXVpcmVkJyk7XHJcblx0XHRcdFx0bm9kZUxpc3RbaV0ucmVtb3ZlQXR0cmlidXRlKCdjaGFuZ2UnKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGlzRXhpc3Qobm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdtaW4nKSkpIHtcclxuXHRcdFx0XHRydWxlcy5wdXNoKHtcclxuXHRcdFx0XHRcdCdtaW4nOiBwYXJzZUludChub2RlTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ21pbicpKSxcclxuXHRcdFx0XHRcdCdtZXNzYWdlJzogJ+iHs+Wwkei+k+WFpScgKyBub2RlTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ21pbicpICsgJ+S4quWtl+espicsXHJcblx0XHRcdFx0XHQndHJpZ2dlcic6ICdibHVyJ1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0bm9kZUxpc3RbaV0ucmVtb3ZlQXR0cmlidXRlKCdtaW4nKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGlzRXhpc3Qobm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdtYXgnKSkpIHtcclxuXHRcdFx0XHRydWxlcy5wdXNoKHtcclxuXHRcdFx0XHRcdCdtYXgnOiBwYXJzZUludChub2RlTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ21heCcpKSxcclxuXHRcdFx0XHRcdCdtZXNzYWdlJzogJ+iHs+Wkmui+k+WFpScgKyBub2RlTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ21heCcpICsgJ+S4quWtl+espicsXHJcblx0XHRcdFx0XHQndHJpZ2dlcic6ICdibHVyJ1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0bm9kZUxpc3RbaV0ucmVtb3ZlQXR0cmlidXRlKCdtYXgnKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGlzRXhpc3Qobm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKCdtb2JpbGUnKSkpIHtcclxuXHRcdFx0XHRtb2JpbGVWYWxTdHIgPSAneyBcInZhbGlkYXRvclwiOnZhbGlkYXRvck9iai5tb2JpbGUsXCJ0cmlnZ2VyXCI6IFtcImJsdXJcIiwgXCJjaGFuZ2VcIl19JztcclxuXHRcdFx0XHRub2RlTGlzdFtpXS5yZW1vdmVBdHRyaWJ1dGUoJ21vYmlsZScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChpc0V4aXN0KG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSgnYXJyYXl2YWx1ZScpKSkge1xyXG5cdFx0XHRcdG1vYmlsZVZhbFN0ciA9ICd7IFwidmFsaWRhdG9yXCI6dmFsaWRhdG9yT2JqLmFycmF5dmFsdWUsXCJ0cmlnZ2VyXCI6IFtcImJsdXJcIiwgXCJjaGFuZ2VcIl19JztcclxuXHRcdFx0XHRub2RlTGlzdFtpXS5yZW1vdmVBdHRyaWJ1dGUoJ2FycmF5dmFsdWUnKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCB0eXBlQXJyLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0aWYgKG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSh0eXBlQXJyW2pdKSAhPSBudWxsICYmIG5vZGVMaXN0W2ldLmdldEF0dHJpYnV0ZSh0eXBlQXJyW2pdKSAhPSB1bmRlZmluZWQgJiYgbm9kZUxpc3RbaV0uZ2V0QXR0cmlidXRlKHR5cGVBcnJbal0pICE9ICdmYWxzZScpIHtcclxuXHRcdFx0XHRcdHJ1bGVzLnB1c2goe1xyXG5cdFx0XHRcdFx0XHQndHlwZSc6IHR5cGVBcnJbal0sXHJcblx0XHRcdFx0XHRcdCdtZXNzYWdlJzogJ+ivt+i+k+WFpeato+ehrueahCcgKyB0eXBlTWFwW2pdICsgJ+agvOW8jycsXHJcblx0XHRcdFx0XHRcdCd0cmlnZ2VyJzogWydibHVyJywgJ2NoYW5nZSddXHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHJcblxyXG5cdFx0XHR2YXIgb2xkUnVsZXMgPSBub2RlTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJzpydWxlcycpIHx8ICdbXScsXHJcblx0XHRcdFx0c2xpY2VkUnVsZXMgPSBKU09OLnN0cmluZ2lmeShydWxlcykuc2xpY2UoMSwgLTEpO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gZG90QnVpbGRlcihzdHIpIHtcclxuXHRcdFx0XHRyZXR1cm4gISFzdHIgPyAnLCcgOiAnJ1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgbmV3UnVsZXNTdHIgPSAnWycgKyBzbGljZWRSdWxlcyArIGRvdEJ1aWxkZXIoc2xpY2VkUnVsZXMpICsgbW9iaWxlVmFsU3RyICsgZG90QnVpbGRlcihtb2JpbGVWYWxTdHIpICsgb2xkUnVsZXMuc2xpY2UoMSwgLTEpICsgJ10nO1xyXG5cdFx0XHRuZXdSdWxlc1N0ciA9IG5ld1J1bGVzU3RyLnJlcGxhY2UoL1wiL2csIFwiJ1wiKTtcclxuXHRcdFx0bm9kZUxpc3RbaV0uc2V0QXR0cmlidXRlKCc6cnVsZXMnLCBuZXdSdWxlc1N0cik7XHJcblxyXG5cdFx0fVxyXG5cdH1cclxuXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IG1haW5WdWU7XHJcbn0pXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=